//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.tencent_player_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.common.StandardMethodCodec;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.tencent_player_fluttify.TencentPlayerFluttifyPlugin.Handler;
import me.yohom.foundation_fluttify.core.FluttifyMessageCodec;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler3 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("com.tencent.rtmp.TXImageSprite::setVTTUrlAndImageUrls_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String vttUrl = (String) ((Map<String, Object>) __args__).get("vttUrl");
                    // ref arg
                    java.util.List<String> images = (java.util.List<String>) ((Map<String, Object>) __args__).get("images");
            
                    // ref
                    com.tencent.rtmp.TXImageSprite __this__ = (com.tencent.rtmp.TXImageSprite) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setVTTUrlAndImageUrls(vttUrl, images);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXImageSprite::getThumbnail_batch", (__argsBatch__, __methodResult__) -> {
                List<android.graphics.Bitmap> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number time = (Number) ((Map<String, Object>) __args__).get("time");
            
                    // ref
                    com.tencent.rtmp.TXImageSprite __this__ = (com.tencent.rtmp.TXImageSprite) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    android.graphics.Bitmap __result__ = null;
                    try {
                        __result__ = __this__.getThumbnail(time.floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXImageSprite::release_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.TXImageSprite __this__ = (com.tencent.rtmp.TXImageSprite) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.release();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // anonymous class
            put("com.tencent.rtmp.TXLivePlayer.ITXAudioRawDataListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.TXLivePlayer.ITXAudioRawDataListener __result__ = new com.tencent.rtmp.TXLivePlayer.ITXAudioRawDataListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.TXLivePlayer.ITXAudioRawDataListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onPcmDataAvailable(byte[] var1, long var2) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onPcmDataAvailable(" + var1 + var2 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onPcmDataAvailable_",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onAudioInfoChanged(int var1, int var2, int var3) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onAudioInfoChanged(" + var1 + var2 + var3 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onAudioInfoChanged__",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.ITXVodPlayListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.ITXVodPlayListener __result__ = new com.tencent.rtmp.ITXVodPlayListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.ITXVodPlayListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onPlayEvent(com.tencent.rtmp.TXVodPlayer var1, int var2, android.os.Bundle var3) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onPlayEvent(" + var1 + var2 + var3 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onPlayEvent__",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onNetStatus(com.tencent.rtmp.TXVodPlayer var1, android.os.Bundle var2) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onNetStatus(" + var1 + var2 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onNetStatus_",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.TXLivePlayer.ITXLivePlayVideoRenderListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.TXLivePlayer.ITXLivePlayVideoRenderListener __result__ = new com.tencent.rtmp.TXLivePlayer.ITXLivePlayVideoRenderListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.TXLivePlayer.ITXLivePlayVideoRenderListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onRenderVideoFrame(com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onRenderVideoFrame(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onRenderVideoFrame",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.ITXLivePlayListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.ITXLivePlayListener __result__ = new com.tencent.rtmp.ITXLivePlayListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.ITXLivePlayListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onPlayEvent(int var1, android.os.Bundle var2) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onPlayEvent(" + var1 + var2 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onPlayEvent_",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onNetStatus(android.os.Bundle var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onNetStatus(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onNetStatus",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.downloader.ITXVodPreloadListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.downloader.ITXVodPreloadListener __result__ = new com.tencent.rtmp.downloader.ITXVodPreloadListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.downloader.ITXVodPreloadListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onComplete(int var1, String var2) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onComplete(" + var1 + var2 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onComplete_",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onError(int var1, String var2, int var3, String var4) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onError(" + var1 + var2 + var3 + var4 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onError___",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                        put("var4", var4);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.downloader.ITXVodDownloadListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.downloader.ITXVodDownloadListener __result__ = new com.tencent.rtmp.downloader.ITXVodDownloadListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.downloader.ITXVodDownloadListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onDownloadStart(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onDownloadStart(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onDownloadStart",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onDownloadProgress(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onDownloadProgress(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onDownloadProgress",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onDownloadStop(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onDownloadStop(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onDownloadStop",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onDownloadFinish(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onDownloadFinish(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onDownloadFinish",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onDownloadError(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1, int var2, String var3) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onDownloadError(" + var1 + var2 + var3 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onDownloadError__",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public int hlsKeyVerify(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1, String var2, byte[] var3) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: hlsKeyVerify(" + var1 + var2 + var3 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "hlsKeyVerify__",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                    }}
                                );
                            }
                        });
            
                        // method result
                        return 0;
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.TXLivePlayer.ITXSnapshotListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.TXLivePlayer.ITXSnapshotListener __result__ = new com.tencent.rtmp.TXLivePlayer.ITXSnapshotListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.TXLivePlayer.ITXSnapshotListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onSnapshot(android.graphics.Bitmap var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onSnapshot(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onSnapshot",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.TXLivePlayer.ITXAudioVolumeEvaluationListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.TXLivePlayer.ITXAudioVolumeEvaluationListener __result__ = new com.tencent.rtmp.TXLivePlayer.ITXAudioVolumeEvaluationListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.TXLivePlayer.ITXAudioVolumeEvaluationListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onAudioVolumeEvaluationNotify(int var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onAudioVolumeEvaluationNotify(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onAudioVolumeEvaluationNotify",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.TXLivePlayer.ITXVideoRawDataListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.TXLivePlayer.ITXVideoRawDataListener __result__ = new com.tencent.rtmp.TXLivePlayer.ITXVideoRawDataListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.TXLivePlayer.ITXVideoRawDataListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onVideoRawDataAvailable(byte[] var1, int var2, int var3, int var4) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onVideoRawDataAvailable(" + var1 + var2 + var3 + var4 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "onVideoRawDataAvailable___",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                        put("var4", var4);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_ui_TXCloudVideoView", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.ui.TXCloudVideoView);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_ui_DashBoard", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.ui.DashBoard);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_ui_TXSubtitleView", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.ui.TXSubtitleView);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLivePlayer", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLivePlayer);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLiveBase", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLiveBase);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXPlayInfoParams", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXPlayInfoParams);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXTrackInfo", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXTrackInfo);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLivePlayer_TXLiteAVTexture", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXVodPlayer", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXVodPlayer);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXPlayerAuthBuilder", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXPlayerAuthBuilder);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXPlayerDrmBuilder", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXPlayerDrmBuilder);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_downloader_TXVodDownloadMediaInfo", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.downloader.TXVodDownloadMediaInfo);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_downloader_TXVodDownloadDataSource", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.downloader.TXVodDownloadDataSource);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_downloader_TXVodPreloadManager", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.downloader.TXVodPreloadManager);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_downloader_TXVodDownloadManager", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.downloader.TXVodDownloadManager);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLiveBaseListener", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLiveBaseListener);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLiveConstants", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLiveConstants);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXBitrateItem", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXBitrateItem);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLivePlayConfig", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLivePlayConfig);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXPlayerGlobalSetting", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXPlayerGlobalSetting);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXVodPlayConfig", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXVodPlayConfig);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXVodConstants", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXVodConstants);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXImageSprite", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXImageSprite);
            });
            put("RefClass::isKindOfcom_tencent_tmediacodec_hook_THookTextureView", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.tmediacodec.hook.THookTextureView);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_ui_TXCloudVideoView__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_ui_TXCloudVideoView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.ui.TXCloudVideoView __obj__ = new com.tencent.rtmp.ui.TXCloudVideoView(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_ui_TXCloudVideoView__android_view_SurfaceView", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_ui_TXCloudVideoView__android_view_SurfaceView");
                }
            
                // args
                // ref arg
                android.view.SurfaceView surfaceView = (android.view.SurfaceView) ((Map<String, Object>) __args__).get("surfaceView");
            
                // create target object
                com.tencent.rtmp.ui.TXCloudVideoView __obj__ = new com.tencent.rtmp.ui.TXCloudVideoView(surfaceView);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_ui_DashBoard__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_ui_DashBoard__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.ui.DashBoard __obj__ = new com.tencent.rtmp.ui.DashBoard(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_ui_TXSubtitleView__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_ui_TXSubtitleView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.ui.TXSubtitleView __obj__ = new com.tencent.rtmp.ui.TXSubtitleView(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXLivePlayer__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXLivePlayer__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.TXLivePlayer __obj__ = new com.tencent.rtmp.TXLivePlayer(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXPlayInfoParams__int__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXPlayInfoParams__int__String__String");
                }
            
                // args
                // ref arg
                Number appId = (Number) ((Map<String, Object>) __args__).get("appId");
                // ref arg
                String fileId = (String) ((Map<String, Object>) __args__).get("fileId");
                // ref arg
                String pSign = (String) ((Map<String, Object>) __args__).get("pSign");
            
                // create target object
                com.tencent.rtmp.TXPlayInfoParams __obj__ = new com.tencent.rtmp.TXPlayInfoParams(appId.intValue(), fileId, pSign);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXTrackInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXTrackInfo__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXTrackInfo __obj__ = new com.tencent.rtmp.TXTrackInfo();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXLivePlayer_TXLiteAVTexture__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXLivePlayer_TXLiteAVTexture__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture __obj__ = new com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXVodPlayer__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXVodPlayer__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.TXVodPlayer __obj__ = new com.tencent.rtmp.TXVodPlayer(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXPlayerAuthBuilder__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXPlayerAuthBuilder__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXPlayerAuthBuilder __obj__ = new com.tencent.rtmp.TXPlayerAuthBuilder();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXPlayerDrmBuilder__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXPlayerDrmBuilder__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXPlayerDrmBuilder __obj__ = new com.tencent.rtmp.TXPlayerDrmBuilder();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXPlayerDrmBuilder__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXPlayerDrmBuilder__String__String");
                }
            
                // args
                // ref arg
                String licenseUrl = (String) ((Map<String, Object>) __args__).get("licenseUrl");
                // ref arg
                String playUrl = (String) ((Map<String, Object>) __args__).get("playUrl");
            
                // create target object
                com.tencent.rtmp.TXPlayerDrmBuilder __obj__ = new com.tencent.rtmp.TXPlayerDrmBuilder(licenseUrl, playUrl);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadMediaInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_downloader_TXVodDownloadMediaInfo__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadMediaInfo();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadDataSource__int__String__int__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_downloader_TXVodDownloadDataSource__int__String__int__String__String");
                }
            
                // args
                // ref arg
                Number appId = (Number) ((Map<String, Object>) __args__).get("appId");
                // ref arg
                String fileId = (String) ((Map<String, Object>) __args__).get("fileId");
                // ref arg
                Number quality = (Number) ((Map<String, Object>) __args__).get("quality");
                // ref arg
                String pSign = (String) ((Map<String, Object>) __args__).get("pSign");
                // ref arg
                String userName = (String) ((Map<String, Object>) __args__).get("userName");
            
                // create target object
                com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(appId.intValue(), fileId, quality.intValue(), pSign, userName);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__int");
                }
            
                // args
                // ref arg
                com.tencent.rtmp.TXPlayerAuthBuilder authBuilder = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("authBuilder");
                // ref arg
                Number quality = (Number) ((Map<String, Object>) __args__).get("quality");
            
                // create target object
                com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(authBuilder, quality.intValue());
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__String");
                }
            
                // args
                // ref arg
                com.tencent.rtmp.TXPlayerAuthBuilder authBuilder = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("authBuilder");
                // ref arg
                String templateName = (String) ((Map<String, Object>) __args__).get("templateName");
            
                // create target object
                com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(authBuilder, templateName);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXLiveConstants__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXLiveConstants__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXLiveConstants __obj__ = new com.tencent.rtmp.TXLiveConstants();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXBitrateItem__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXBitrateItem__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXBitrateItem __obj__ = new com.tencent.rtmp.TXBitrateItem();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXLivePlayConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXLivePlayConfig__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXLivePlayConfig __obj__ = new com.tencent.rtmp.TXLivePlayConfig();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXPlayerGlobalSetting__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXPlayerGlobalSetting__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXPlayerGlobalSetting __obj__ = new com.tencent.rtmp.TXPlayerGlobalSetting();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXVodPlayConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXVodPlayConfig__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXVodPlayConfig __obj__ = new com.tencent.rtmp.TXVodPlayConfig();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXVodConstants__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXVodConstants__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXVodConstants __obj__ = new com.tencent.rtmp.TXVodConstants();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXImageSprite__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXImageSprite__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.TXImageSprite __obj__ = new com.tencent.rtmp.TXImageSprite(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tmediacodec_hook_THookTextureView__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tmediacodec_hook_THookTextureView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.tmediacodec.hook.THookTextureView __obj__ = new com.tencent.tmediacodec.hook.THookTextureView(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_ui_TXCloudVideoView__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.ui.TXCloudVideoView> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.ui.TXCloudVideoView __obj__ = new com.tencent.rtmp.ui.TXCloudVideoView(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_ui_TXCloudVideoView__android_view_SurfaceView", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.ui.TXCloudVideoView> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.view.SurfaceView surfaceView = (android.view.SurfaceView) ((Map<String, Object>) __args__).get("surfaceView");
            
                    // create target object
                    com.tencent.rtmp.ui.TXCloudVideoView __obj__ = new com.tencent.rtmp.ui.TXCloudVideoView(surfaceView);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_ui_DashBoard__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.ui.DashBoard> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.ui.DashBoard __obj__ = new com.tencent.rtmp.ui.DashBoard(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_ui_TXSubtitleView__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.ui.TXSubtitleView> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.ui.TXSubtitleView __obj__ = new com.tencent.rtmp.ui.TXSubtitleView(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXLivePlayer__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXLivePlayer> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.TXLivePlayer __obj__ = new com.tencent.rtmp.TXLivePlayer(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXPlayInfoParams__int__String__String", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXPlayInfoParams> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number appId = (Number) ((Map<String, Object>) __args__).get("appId");
                    // ref arg
                    String fileId = (String) ((Map<String, Object>) __args__).get("fileId");
                    // ref arg
                    String pSign = (String) ((Map<String, Object>) __args__).get("pSign");
            
                    // create target object
                    com.tencent.rtmp.TXPlayInfoParams __obj__ = new com.tencent.rtmp.TXPlayInfoParams(appId.intValue(), fileId, pSign);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXTrackInfo__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXTrackInfo> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXTrackInfo __obj__ = new com.tencent.rtmp.TXTrackInfo();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXLivePlayer_TXLiteAVTexture__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture __obj__ = new com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXVodPlayer__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXVodPlayer> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.TXVodPlayer __obj__ = new com.tencent.rtmp.TXVodPlayer(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXPlayerAuthBuilder__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXPlayerAuthBuilder> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXPlayerAuthBuilder __obj__ = new com.tencent.rtmp.TXPlayerAuthBuilder();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXPlayerDrmBuilder__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXPlayerDrmBuilder> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXPlayerDrmBuilder __obj__ = new com.tencent.rtmp.TXPlayerDrmBuilder();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXPlayerDrmBuilder__String__String", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXPlayerDrmBuilder> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    String licenseUrl = (String) ((Map<String, Object>) __args__).get("licenseUrl");
                    // ref arg
                    String playUrl = (String) ((Map<String, Object>) __args__).get("playUrl");
            
                    // create target object
                    com.tencent.rtmp.TXPlayerDrmBuilder __obj__ = new com.tencent.rtmp.TXPlayerDrmBuilder(licenseUrl, playUrl);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadMediaInfo__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadMediaInfo> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadMediaInfo();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadDataSource__int__String__int__String__String", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadDataSource> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number appId = (Number) ((Map<String, Object>) __args__).get("appId");
                    // ref arg
                    String fileId = (String) ((Map<String, Object>) __args__).get("fileId");
                    // ref arg
                    Number quality = (Number) ((Map<String, Object>) __args__).get("quality");
                    // ref arg
                    String pSign = (String) ((Map<String, Object>) __args__).get("pSign");
                    // ref arg
                    String userName = (String) ((Map<String, Object>) __args__).get("userName");
            
                    // create target object
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(appId.intValue(), fileId, quality.intValue(), pSign, userName);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__int", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadDataSource> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.tencent.rtmp.TXPlayerAuthBuilder authBuilder = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("authBuilder");
                    // ref arg
                    Number quality = (Number) ((Map<String, Object>) __args__).get("quality");
            
                    // create target object
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(authBuilder, quality.intValue());
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__String", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadDataSource> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.tencent.rtmp.TXPlayerAuthBuilder authBuilder = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("authBuilder");
                    // ref arg
                    String templateName = (String) ((Map<String, Object>) __args__).get("templateName");
            
                    // create target object
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(authBuilder, templateName);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXLiveConstants__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXLiveConstants> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXLiveConstants __obj__ = new com.tencent.rtmp.TXLiveConstants();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXBitrateItem__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXBitrateItem> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXBitrateItem __obj__ = new com.tencent.rtmp.TXBitrateItem();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXLivePlayConfig__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXLivePlayConfig> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXLivePlayConfig __obj__ = new com.tencent.rtmp.TXLivePlayConfig();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXPlayerGlobalSetting__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXPlayerGlobalSetting> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXPlayerGlobalSetting __obj__ = new com.tencent.rtmp.TXPlayerGlobalSetting();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXVodPlayConfig__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXVodPlayConfig> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXVodPlayConfig __obj__ = new com.tencent.rtmp.TXVodPlayConfig();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXVodConstants__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXVodConstants> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXVodConstants __obj__ = new com.tencent.rtmp.TXVodConstants();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXImageSprite__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXImageSprite> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.TXImageSprite __obj__ = new com.tencent.rtmp.TXImageSprite(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tmediacodec_hook_THookTextureView__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tmediacodec.hook.THookTextureView> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.tmediacodec.hook.THookTextureView __obj__ = new com.tencent.tmediacodec.hook.THookTextureView(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
        }};
    }
}
