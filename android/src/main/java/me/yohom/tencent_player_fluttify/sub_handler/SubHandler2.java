//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.tencent_player_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.common.StandardMethodCodec;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.tencent_player_fluttify.TencentPlayerFluttifyPlugin.Handler;
import me.yohom.foundation_fluttify.core.FluttifyMessageCodec;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler2 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("com.tencent.rtmp.TXPlayerAuthBuilder::getUs_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.TXPlayerAuthBuilder __this__ = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = __this__.getUs();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerAuthBuilder::isHttps_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.TXPlayerAuthBuilder __this__ = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Boolean __result__ = null;
                    try {
                        __result__ = __this__.isHttps();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerAuthBuilder::setAppId_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number appId = (Number) ((Map<String, Object>) __args__).get("appId");
            
                    // ref
                    com.tencent.rtmp.TXPlayerAuthBuilder __this__ = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setAppId(appId.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerAuthBuilder::setFileId_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String fileId = (String) ((Map<String, Object>) __args__).get("fileId");
            
                    // ref
                    com.tencent.rtmp.TXPlayerAuthBuilder __this__ = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setFileId(fileId);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerAuthBuilder::setTimeout_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String timeout = (String) ((Map<String, Object>) __args__).get("timeout");
            
                    // ref
                    com.tencent.rtmp.TXPlayerAuthBuilder __this__ = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setTimeout(timeout);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerAuthBuilder::setUs_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String us = (String) ((Map<String, Object>) __args__).get("us");
            
                    // ref
                    com.tencent.rtmp.TXPlayerAuthBuilder __this__ = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setUs(us);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerAuthBuilder::setExper_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number exper = (Number) ((Map<String, Object>) __args__).get("exper");
            
                    // ref
                    com.tencent.rtmp.TXPlayerAuthBuilder __this__ = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setExper(exper.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerAuthBuilder::setSign_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String sign = (String) ((Map<String, Object>) __args__).get("sign");
            
                    // ref
                    com.tencent.rtmp.TXPlayerAuthBuilder __this__ = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setSign(sign);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerAuthBuilder::setHttps_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    boolean https = (boolean) ((Map<String, Object>) __args__).get("https");
            
                    // ref
                    com.tencent.rtmp.TXPlayerAuthBuilder __this__ = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setHttps(https);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::getDataSource_batch", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadDataSource> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __result__ = null;
                    try {
                        __result__ = __this__.getDataSource();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::getDuration_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Integer __result__ = null;
                    try {
                        __result__ = __this__.getDuration();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::getPlayableDuration_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Integer __result__ = null;
                    try {
                        __result__ = __this__.getPlayableDuration();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::getSize_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Integer __result__ = null;
                    try {
                        __result__ = __this__.getSize();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::getDownloadSize_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Integer __result__ = null;
                    try {
                        __result__ = __this__.getDownloadSize();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::getProgress_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Float __result__ = null;
                    try {
                        __result__ = __this__.getProgress();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::getPlayPath_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = __this__.getPlayPath();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::getTaskId_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Integer __result__ = null;
                    try {
                        __result__ = __this__.getTaskId();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::getUrl_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = __this__.getUrl();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::getUserName_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = __this__.getUserName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::getDownloadState_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Integer __result__ = null;
                    try {
                        __result__ = __this__.getDownloadState();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadMediaInfo::isDownloadFinished_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __this__ = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Boolean __result__ = null;
                    try {
                        __result__ = __this__.isDownloadFinished();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::getFileId_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = __this__.getFileId();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::getPSign_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = __this__.getPSign();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::setQuality_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number quality = (Number) ((Map<String, Object>) __args__).get("quality");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setQuality(quality.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::setToken_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String token = (String) ((Map<String, Object>) __args__).get("token");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setToken(token);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::getAuthBuilder_batch", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXPlayerAuthBuilder> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    com.tencent.rtmp.TXPlayerAuthBuilder __result__ = null;
                    try {
                        __result__ = __this__.getAuthBuilder();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::getQuality_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Integer __result__ = null;
                    try {
                        __result__ = __this__.getQuality();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::getTemplateName_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = __this__.getTemplateName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::getToken_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = __this__.getToken();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::getAppId_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Integer __result__ = null;
                    try {
                        __result__ = __this__.getAppId();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::getUserName_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = __this__.getUserName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::getOverlayKey_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = __this__.getOverlayKey();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadDataSource::getOverlayIv_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __this__ = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = __this__.getOverlayIv();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodPreloadManager::getInstance_batch", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodPreloadManager> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // ref
            
            
                    // invoke native method
                    com.tencent.rtmp.downloader.TXVodPreloadManager __result__ = null;
                    try {
                        __result__ = com.tencent.rtmp.downloader.TXVodPreloadManager.getInstance(context);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodPreloadManager::stopPreload_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number taskID = (Number) ((Map<String, Object>) __args__).get("taskID");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodPreloadManager __this__ = (com.tencent.rtmp.downloader.TXVodPreloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.stopPreload(taskID.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::getInstance_batch", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadManager> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.tencent.rtmp.downloader.TXVodDownloadManager __result__ = null;
                    try {
                        __result__ = com.tencent.rtmp.downloader.TXVodDownloadManager.getInstance();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::setDownloadPath_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String downloadPath = (String) ((Map<String, Object>) __args__).get("downloadPath");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadManager __this__ = (com.tencent.rtmp.downloader.TXVodDownloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setDownloadPath(downloadPath);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::setHeaders_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    java.util.Map<String,String> headers = (java.util.Map<String,String>) ((Map<String, Object>) __args__).get("headers");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadManager __this__ = (com.tencent.rtmp.downloader.TXVodDownloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setHeaders(headers);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::startDownloadUrl__String_batch", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadMediaInfo> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String url = (String) ((Map<String, Object>) __args__).get("url");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadManager __this__ = (com.tencent.rtmp.downloader.TXVodDownloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __result__ = null;
                    try {
                        __result__ = __this__.startDownloadUrl(url);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::startDownloadUrl__String__String_batch", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadMediaInfo> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String url = (String) ((Map<String, Object>) __args__).get("url");
                    // ref arg
                    String userName = (String) ((Map<String, Object>) __args__).get("userName");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadManager __this__ = (com.tencent.rtmp.downloader.TXVodDownloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __result__ = null;
                    try {
                        __result__ = __this__.startDownloadUrl(url, userName);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::startDownload_batch", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadMediaInfo> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource dataSource = (com.tencent.rtmp.downloader.TXVodDownloadDataSource) ((Map<String, Object>) __args__).get("dataSource");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadManager __this__ = (com.tencent.rtmp.downloader.TXVodDownloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __result__ = null;
                    try {
                        __result__ = __this__.startDownload(dataSource);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::stopDownload_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo dinfo = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("dinfo");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadManager __this__ = (com.tencent.rtmp.downloader.TXVodDownloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.stopDownload(dinfo);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::deleteDownloadFile_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String playPath = (String) ((Map<String, Object>) __args__).get("playPath");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadManager __this__ = (com.tencent.rtmp.downloader.TXVodDownloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Boolean __result__ = null;
                    try {
                        __result__ = __this__.deleteDownloadFile(playPath);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::deleteDownloadMediaInfo_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo downloadMediaInfo = (com.tencent.rtmp.downloader.TXVodDownloadMediaInfo) ((Map<String, Object>) __args__).get("downloadMediaInfo");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadManager __this__ = (com.tencent.rtmp.downloader.TXVodDownloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Boolean __result__ = null;
                    try {
                        __result__ = __this__.deleteDownloadMediaInfo(downloadMediaInfo);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::getDownloadMediaInfoList_batch", (__argsBatch__, __methodResult__) -> {
                List<java.util.List<com.tencent.rtmp.downloader.TXVodDownloadMediaInfo>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadManager __this__ = (com.tencent.rtmp.downloader.TXVodDownloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    java.util.List<com.tencent.rtmp.downloader.TXVodDownloadMediaInfo> __result__ = null;
                    try {
                        __result__ = __this__.getDownloadMediaInfoList();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::getDownloadMediaInfo__int__String__int_batch", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadMediaInfo> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number appId = (Number) ((Map<String, Object>) __args__).get("appId");
                    // ref arg
                    String fileId = (String) ((Map<String, Object>) __args__).get("fileId");
                    // ref arg
                    Number qualityId = (Number) ((Map<String, Object>) __args__).get("qualityId");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadManager __this__ = (com.tencent.rtmp.downloader.TXVodDownloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __result__ = null;
                    try {
                        __result__ = __this__.getDownloadMediaInfo(appId.intValue(), fileId, qualityId.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.downloader.TXVodDownloadManager::getDownloadMediaInfo__String_batch", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadMediaInfo> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String url = (String) ((Map<String, Object>) __args__).get("url");
            
                    // ref
                    com.tencent.rtmp.downloader.TXVodDownloadManager __this__ = (com.tencent.rtmp.downloader.TXVodDownloadManager) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __result__ = null;
                    try {
                        __result__ = __this__.getDownloadMediaInfo(url);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLiveBaseListener::onLog_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number level = (Number) ((Map<String, Object>) __args__).get("level");
                    // ref arg
                    String module = (String) ((Map<String, Object>) __args__).get("module");
                    // ref arg
                    String log = (String) ((Map<String, Object>) __args__).get("log");
            
                    // ref
                    com.tencent.rtmp.TXLiveBaseListener __this__ = (com.tencent.rtmp.TXLiveBaseListener) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.onLog(level.intValue(), module, log);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLiveBaseListener::onUpdateNetworkTime_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number errCode = (Number) ((Map<String, Object>) __args__).get("errCode");
                    // ref arg
                    String errMsg = (String) ((Map<String, Object>) __args__).get("errMsg");
            
                    // ref
                    com.tencent.rtmp.TXLiveBaseListener __this__ = (com.tencent.rtmp.TXLiveBaseListener) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.onUpdateNetworkTime(errCode.intValue(), errMsg);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLiveBaseListener::onLicenceLoaded_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number result = (Number) ((Map<String, Object>) __args__).get("result");
                    // ref arg
                    String reason = (String) ((Map<String, Object>) __args__).get("reason");
            
                    // ref
                    com.tencent.rtmp.TXLiveBaseListener __this__ = (com.tencent.rtmp.TXLiveBaseListener) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.onLicenceLoaded(result.intValue(), reason);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXBitrateItem::compareTo_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    com.tencent.rtmp.TXBitrateItem o = (com.tencent.rtmp.TXBitrateItem) ((Map<String, Object>) __args__).get("o");
            
                    // ref
                    com.tencent.rtmp.TXBitrateItem __this__ = (com.tencent.rtmp.TXBitrateItem) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Integer __result__ = null;
                    try {
                        __result__ = __this__.compareTo(o);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setAutoAdjustCacheTime_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    boolean bAuto = (boolean) ((Map<String, Object>) __args__).get("bAuto");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setAutoAdjustCacheTime(bAuto);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setCacheTime_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number time = (Number) ((Map<String, Object>) __args__).get("time");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setCacheTime(time.floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setMaxAutoAdjustCacheTime_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number time = (Number) ((Map<String, Object>) __args__).get("time");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setMaxAutoAdjustCacheTime(time.floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setMinAutoAdjustCacheTime_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number time = (Number) ((Map<String, Object>) __args__).get("time");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setMinAutoAdjustCacheTime(time.floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setVideoBlockThreshold_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number threshold = (Number) ((Map<String, Object>) __args__).get("threshold");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setVideoBlockThreshold(threshold.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setConnectRetryCount_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number count = (Number) ((Map<String, Object>) __args__).get("count");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setConnectRetryCount(count.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setConnectRetryInterval_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number interval = (Number) ((Map<String, Object>) __args__).get("interval");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setConnectRetryInterval(interval.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setEnableMessage_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setEnableMessage(enable);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::enableAEC_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.enableAEC(enable);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setEnableMetaData_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setEnableMetaData(enable);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setFlvSessionKey_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String flvSessionKey = (String) ((Map<String, Object>) __args__).get("flvSessionKey");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setFlvSessionKey(flvSessionKey);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setEnableNearestIP_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setEnableNearestIP(enable);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setRtmpChannelType_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number type = (Number) ((Map<String, Object>) __args__).get("type");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setRtmpChannelType(type.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setCacheFolderPath_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String folderPath = (String) ((Map<String, Object>) __args__).get("folderPath");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setCacheFolderPath(folderPath);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setMaxCacheItems_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number maxCacheItems = (Number) ((Map<String, Object>) __args__).get("maxCacheItems");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setMaxCacheItems(maxCacheItems.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXLivePlayConfig::setHeaders_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    java.util.Map<String,String> headers = (java.util.Map<String,String>) ((Map<String, Object>) __args__).get("headers");
            
                    // ref
                    com.tencent.rtmp.TXLivePlayConfig __this__ = (com.tencent.rtmp.TXLivePlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setHeaders(headers);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerGlobalSetting::setCacheFolderPath_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String path = (String) ((Map<String, Object>) __args__).get("path");
            
                    // ref
            
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        com.tencent.rtmp.TXPlayerGlobalSetting.setCacheFolderPath(path);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerGlobalSetting::setMaxCacheSize_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number sizeMB = (Number) ((Map<String, Object>) __args__).get("sizeMB");
            
                    // ref
            
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        com.tencent.rtmp.TXPlayerGlobalSetting.setMaxCacheSize(sizeMB.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerGlobalSetting::getCacheFolderPath_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String __result__ = null;
                    try {
                        __result__ = com.tencent.rtmp.TXPlayerGlobalSetting.getCacheFolderPath();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXPlayerGlobalSetting::getMaxCacheSize_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    Integer __result__ = null;
                    try {
                        __result__ = com.tencent.rtmp.TXPlayerGlobalSetting.getMaxCacheSize();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setConnectRetryCount_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number count = (Number) ((Map<String, Object>) __args__).get("count");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setConnectRetryCount(count.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setConnectRetryInterval_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number interval = (Number) ((Map<String, Object>) __args__).get("interval");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setConnectRetryInterval(interval.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setTimeout_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number timeout = (Number) ((Map<String, Object>) __args__).get("timeout");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setTimeout(timeout.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setCacheFolderPath_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String folderPath = (String) ((Map<String, Object>) __args__).get("folderPath");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setCacheFolderPath(folderPath);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setMaxCacheItems_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number maxCacheItems = (Number) ((Map<String, Object>) __args__).get("maxCacheItems");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setMaxCacheItems(maxCacheItems.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setPlayerType_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number playerType = (Number) ((Map<String, Object>) __args__).get("playerType");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setPlayerType(playerType.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setHeaders_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    java.util.Map<String,String> headers = (java.util.Map<String,String>) ((Map<String, Object>) __args__).get("headers");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setHeaders(headers);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setEnableAccurateSeek_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    boolean accurateSeek = (boolean) ((Map<String, Object>) __args__).get("accurateSeek");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setEnableAccurateSeek(accurateSeek);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setAutoRotate_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    boolean autoRotate = (boolean) ((Map<String, Object>) __args__).get("autoRotate");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setAutoRotate(autoRotate);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setSmoothSwitchBitrate_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    boolean smoothSwitchBitrate = (boolean) ((Map<String, Object>) __args__).get("smoothSwitchBitrate");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setSmoothSwitchBitrate(smoothSwitchBitrate);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setCacheMp4ExtName_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String cacheMp4ExtName = (String) ((Map<String, Object>) __args__).get("cacheMp4ExtName");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setCacheMp4ExtName(cacheMp4ExtName);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setProgressInterval_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number intervalMs = (Number) ((Map<String, Object>) __args__).get("intervalMs");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setProgressInterval(intervalMs.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setMaxBufferSize_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number maxBufferSize = (Number) ((Map<String, Object>) __args__).get("maxBufferSize");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setMaxBufferSize(maxBufferSize.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setMaxPreloadSize_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number maxPreloadSize = (Number) ((Map<String, Object>) __args__).get("maxPreloadSize");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setMaxPreloadSize(maxPreloadSize.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setFirstStartPlayBufferTime_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number milliseconds = (Number) ((Map<String, Object>) __args__).get("milliseconds");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setFirstStartPlayBufferTime(milliseconds.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setNextStartPlayBufferTime_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number milliseconds = (Number) ((Map<String, Object>) __args__).get("milliseconds");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setNextStartPlayBufferTime(milliseconds.intValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setOverlayKey_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String overlayKey = (String) ((Map<String, Object>) __args__).get("overlayKey");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setOverlayKey(overlayKey);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setOverlayIv_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String overlayIv = (String) ((Map<String, Object>) __args__).get("overlayIv");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setOverlayIv(overlayIv);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setExtInfo_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    java.util.Map<String,java.lang.Object> map = (java.util.Map<String,java.lang.Object>) ((Map<String, Object>) __args__).get("map");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setExtInfo(map);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::getPreferredResolution_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Long __result__ = null;
                    try {
                        __result__ = __this__.getPreferredResolution();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXVodPlayConfig::setPreferredResolution_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number preferredResolution = (Number) ((Map<String, Object>) __args__).get("preferredResolution");
            
                    // ref
                    com.tencent.rtmp.TXVodPlayConfig __this__ = (com.tencent.rtmp.TXVodPlayConfig) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setPreferredResolution(preferredResolution.longValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXImageSprite::setVTTUrlAndImageUrls_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    String vttUrl = (String) ((Map<String, Object>) __args__).get("vttUrl");
                    // ref arg
                    java.util.List<String> images = (java.util.List<String>) ((Map<String, Object>) __args__).get("images");
            
                    // ref
                    com.tencent.rtmp.TXImageSprite __this__ = (com.tencent.rtmp.TXImageSprite) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.setVTTUrlAndImageUrls(vttUrl, images);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXImageSprite::getThumbnail_batch", (__argsBatch__, __methodResult__) -> {
                List<android.graphics.Bitmap> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Number time = (Number) ((Map<String, Object>) __args__).get("time");
            
                    // ref
                    com.tencent.rtmp.TXImageSprite __this__ = (com.tencent.rtmp.TXImageSprite) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    android.graphics.Bitmap __result__ = null;
                    try {
                        __result__ = __this__.getThumbnail(time.floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.tencent.rtmp.TXImageSprite::release_batch", (__argsBatch__, __methodResult__) -> {
                List<Void> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    com.tencent.rtmp.TXImageSprite __this__ = (com.tencent.rtmp.TXImageSprite) ((Map<String, Object>) __args__).get("__this__");
            
                    // invoke native method
                    Void __result__ = null;
                    try {
                        __this__.release();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    __resultList__.add(__result__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // anonymous class
            put("com.tencent.rtmp.TXLivePlayer.ITXAudioRawDataListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.TXLivePlayer.ITXAudioRawDataListener __result__ = new com.tencent.rtmp.TXLivePlayer.ITXAudioRawDataListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.TXLivePlayer$ITXAudioRawDataListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onPcmDataAvailable(byte[] var1, long var2) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onPcmDataAvailable(" + var1 + var2 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onPcmDataAvailable::onPcmDataAvailable",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onAudioInfoChanged(int var1, int var2, int var3) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onAudioInfoChanged(" + var1 + var2 + var3 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onAudioInfoChanged::onAudioInfoChanged",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.ITXVodPlayListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.ITXVodPlayListener __result__ = new com.tencent.rtmp.ITXVodPlayListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.ITXVodPlayListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onPlayEvent(com.tencent.rtmp.TXVodPlayer var1, int var2, android.os.Bundle var3) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onPlayEvent(" + var1 + var2 + var3 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onPlayEvent::onPlayEvent",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onNetStatus(com.tencent.rtmp.TXVodPlayer var1, android.os.Bundle var2) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onNetStatus(" + var1 + var2 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onNetStatus::onNetStatus",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.TXLivePlayer.ITXLivePlayVideoRenderListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.TXLivePlayer.ITXLivePlayVideoRenderListener __result__ = new com.tencent.rtmp.TXLivePlayer.ITXLivePlayVideoRenderListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.TXLivePlayer$ITXLivePlayVideoRenderListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onRenderVideoFrame(com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onRenderVideoFrame(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onRenderVideoFrame::onRenderVideoFrame",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.ITXLivePlayListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.ITXLivePlayListener __result__ = new com.tencent.rtmp.ITXLivePlayListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.ITXLivePlayListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onPlayEvent(int var1, android.os.Bundle var2) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onPlayEvent(" + var1 + var2 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onPlayEvent::onPlayEvent",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onNetStatus(android.os.Bundle var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onNetStatus(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onNetStatus::onNetStatus",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.downloader.ITXVodPreloadListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.downloader.ITXVodPreloadListener __result__ = new com.tencent.rtmp.downloader.ITXVodPreloadListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.downloader.ITXVodPreloadListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onComplete(int var1, String var2) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onComplete(" + var1 + var2 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onComplete::onComplete",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onError(int var1, String var2, int var3, String var4) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onError(" + var1 + var2 + var3 + var4 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onError::onError",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                        put("var4", var4);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.downloader.ITXVodDownloadListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.downloader.ITXVodDownloadListener __result__ = new com.tencent.rtmp.downloader.ITXVodDownloadListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.downloader.ITXVodDownloadListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onDownloadStart(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onDownloadStart(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onDownloadStart::onDownloadStart",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onDownloadProgress(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onDownloadProgress(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onDownloadProgress::onDownloadProgress",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onDownloadStop(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onDownloadStop(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onDownloadStop::onDownloadStop",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onDownloadFinish(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onDownloadFinish(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onDownloadFinish::onDownloadFinish",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onDownloadError(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1, int var2, String var3) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onDownloadError(" + var1 + var2 + var3 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onDownloadError::onDownloadError",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public int hlsKeyVerify(com.tencent.rtmp.downloader.TXVodDownloadMediaInfo var1, String var2, byte[] var3) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: hlsKeyVerify(" + var1 + var2 + var3 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::hlsKeyVerify::hlsKeyVerify",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                    }}
                                );
                            }
                        });
            
                        // method result
                        return 0;
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.ITXLivePushListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.ITXLivePushListener __result__ = new com.tencent.rtmp.ITXLivePushListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.ITXLivePushListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onPushEvent(int var1, android.os.Bundle var2) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onPushEvent(" + var1 + var2 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onPushEvent::onPushEvent",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
                    @Override
                    public void onNetStatus(android.os.Bundle var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onNetStatus(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onNetStatus::onNetStatus",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.TXLivePlayer.ITXSnapshotListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.TXLivePlayer.ITXSnapshotListener __result__ = new com.tencent.rtmp.TXLivePlayer.ITXSnapshotListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.TXLivePlayer$ITXSnapshotListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onSnapshot(android.graphics.Bitmap var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onSnapshot(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onSnapshot::onSnapshot",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.TXLivePlayer.ITXAudioVolumeEvaluationListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.TXLivePlayer.ITXAudioVolumeEvaluationListener __result__ = new com.tencent.rtmp.TXLivePlayer.ITXAudioVolumeEvaluationListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.TXLivePlayer$ITXAudioVolumeEvaluationListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onAudioVolumeEvaluationNotify(int var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onAudioVolumeEvaluationNotify(" + var1 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onAudioVolumeEvaluationNotify::onAudioVolumeEvaluationNotify",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            // anonymous class
            put("com.tencent.rtmp.TXLivePlayer.ITXVideoRawDataListener::createAnonymous__", (__args__, __methodResult__) -> {
                // invoke native method
                com.tencent.rtmp.TXLivePlayer.ITXVideoRawDataListener __result__ = new com.tencent.rtmp.TXLivePlayer.ITXVideoRawDataListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.tencent.rtmp.TXLivePlayer$ITXVideoRawDataListener::Callback@" + getClass().getName() + ":" + System.identityHashCode(this), new StandardMethodCodec(new FluttifyMessageCodec()));
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                    // call dart method
                    @Override
                    public void onVideoRawDataAvailable(byte[] var1, int var2, int var3, int var4) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onVideoRawDataAvailable(" + var1 + var2 + var3 + var4 + ")");
                        }
            
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::onVideoRawDataAvailable::onVideoRawDataAvailable",
                                    new HashMap<String, Object>() {{
                                        put("var1", var1);
                                        put("var2", var2);
                                        put("var3", var3);
                                        put("var4", var4);
                                    }}
                                );
                            }
                        });
            
                        // method result
            
                    }
            
            };
            
                __methodResult__.success(__result__);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLog", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLog);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_ui_TXDashBoard", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.ui.TXDashBoard);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_ui_TXCloudVideoView", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.ui.TXCloudVideoView);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_ui_TXLogView", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.ui.TXLogView);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLivePlayer", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLivePlayer);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_video_TXScreenCapture_TXScreenCaptureAssistantActivity", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.video.TXScreenCapture.TXScreenCaptureAssistantActivity);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_video_TXScreenCapture", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.video.TXScreenCapture);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLiveBase", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLiveBase);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXPlayInfoParams", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXPlayInfoParams);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLivePlayer_TXLiteAVTexture", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXVodPlayer", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXVodPlayer);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXPlayerAuthBuilder", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXPlayerAuthBuilder);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_downloader_TXVodDownloadMediaInfo", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.downloader.TXVodDownloadMediaInfo);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_downloader_TXVodDownloadDataSource", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.downloader.TXVodDownloadDataSource);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_downloader_TXVodPreloadManager", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.downloader.TXVodPreloadManager);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_downloader_TXVodDownloadManager", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.downloader.TXVodDownloadManager);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLiveBaseListener", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLiveBaseListener);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLiveConstants", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLiveConstants);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXBitrateItem", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXBitrateItem);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXLivePlayConfig", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXLivePlayConfig);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXPlayerGlobalSetting", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXPlayerGlobalSetting);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXVodPlayConfig", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXVodPlayConfig);
            });
            put("RefClass::isKindOfcom_tencent_rtmp_TXImageSprite", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof com.tencent.rtmp.TXImageSprite);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXLog__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXLog__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXLog __obj__ = new com.tencent.rtmp.TXLog();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_ui_TXDashBoard__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_ui_TXDashBoard__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.ui.TXDashBoard __obj__ = new com.tencent.rtmp.ui.TXDashBoard(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_ui_TXCloudVideoView__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_ui_TXCloudVideoView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.ui.TXCloudVideoView __obj__ = new com.tencent.rtmp.ui.TXCloudVideoView(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_ui_TXCloudVideoView__android_view_SurfaceView", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_ui_TXCloudVideoView__android_view_SurfaceView");
                }
            
                // args
                // ref arg
                android.view.SurfaceView view = (android.view.SurfaceView) ((Map<String, Object>) __args__).get("view");
            
                // create target object
                com.tencent.rtmp.ui.TXCloudVideoView __obj__ = new com.tencent.rtmp.ui.TXCloudVideoView(view);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_ui_TXLogView__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_ui_TXLogView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.ui.TXLogView __obj__ = new com.tencent.rtmp.ui.TXLogView(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXLivePlayer__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXLivePlayer__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.TXLivePlayer __obj__ = new com.tencent.rtmp.TXLivePlayer(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_video_TXScreenCapture_TXScreenCaptureAssistantActivity__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_video_TXScreenCapture_TXScreenCaptureAssistantActivity__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.video.TXScreenCapture.TXScreenCaptureAssistantActivity __obj__ = new com.tencent.rtmp.video.TXScreenCapture.TXScreenCaptureAssistantActivity();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_video_TXScreenCapture__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_video_TXScreenCapture__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.video.TXScreenCapture __obj__ = new com.tencent.rtmp.video.TXScreenCapture();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXPlayInfoParams__int__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXPlayInfoParams__int__String__String");
                }
            
                // args
                // ref arg
                Number appId = (Number) ((Map<String, Object>) __args__).get("appId");
                // ref arg
                String fileId = (String) ((Map<String, Object>) __args__).get("fileId");
                // ref arg
                String pSign = (String) ((Map<String, Object>) __args__).get("pSign");
            
                // create target object
                com.tencent.rtmp.TXPlayInfoParams __obj__ = new com.tencent.rtmp.TXPlayInfoParams(appId.intValue(), fileId, pSign);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXLivePlayer_TXLiteAVTexture__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXLivePlayer_TXLiteAVTexture__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture __obj__ = new com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXVodPlayer__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXVodPlayer__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.TXVodPlayer __obj__ = new com.tencent.rtmp.TXVodPlayer(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXPlayerAuthBuilder__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXPlayerAuthBuilder__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXPlayerAuthBuilder __obj__ = new com.tencent.rtmp.TXPlayerAuthBuilder();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadMediaInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_downloader_TXVodDownloadMediaInfo__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadMediaInfo();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadDataSource__int__String__int__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_downloader_TXVodDownloadDataSource__int__String__int__String__String");
                }
            
                // args
                // ref arg
                Number appId = (Number) ((Map<String, Object>) __args__).get("appId");
                // ref arg
                String fileId = (String) ((Map<String, Object>) __args__).get("fileId");
                // ref arg
                Number quality = (Number) ((Map<String, Object>) __args__).get("quality");
                // ref arg
                String pSign = (String) ((Map<String, Object>) __args__).get("pSign");
                // ref arg
                String userName = (String) ((Map<String, Object>) __args__).get("userName");
            
                // create target object
                com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(appId.intValue(), fileId, quality.intValue(), pSign, userName);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__int");
                }
            
                // args
                // ref arg
                com.tencent.rtmp.TXPlayerAuthBuilder authBuilder = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("authBuilder");
                // ref arg
                Number quality = (Number) ((Map<String, Object>) __args__).get("quality");
            
                // create target object
                com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(authBuilder, quality.intValue());
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__String");
                }
            
                // args
                // ref arg
                com.tencent.rtmp.TXPlayerAuthBuilder authBuilder = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("authBuilder");
                // ref arg
                String templateName = (String) ((Map<String, Object>) __args__).get("templateName");
            
                // create target object
                com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(authBuilder, templateName);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadManager__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_downloader_TXVodDownloadManager__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.downloader.TXVodDownloadManager __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadManager();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXLiveConstants__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXLiveConstants__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXLiveConstants __obj__ = new com.tencent.rtmp.TXLiveConstants();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXBitrateItem__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXBitrateItem__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXBitrateItem __obj__ = new com.tencent.rtmp.TXBitrateItem();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXLivePlayConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXLivePlayConfig__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXLivePlayConfig __obj__ = new com.tencent.rtmp.TXLivePlayConfig();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXPlayerGlobalSetting__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXPlayerGlobalSetting__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXPlayerGlobalSetting __obj__ = new com.tencent.rtmp.TXPlayerGlobalSetting();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXVodPlayConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXVodPlayConfig__");
                }
            
                // args
            
            
                // create target object
                com.tencent.rtmp.TXVodPlayConfig __obj__ = new com.tencent.rtmp.TXVodPlayConfig();
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_rtmp_TXImageSprite__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_rtmp_TXImageSprite__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.rtmp.TXImageSprite __obj__ = new com.tencent.rtmp.TXImageSprite(context);
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXLog__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXLog> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXLog __obj__ = new com.tencent.rtmp.TXLog();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_ui_TXDashBoard__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.ui.TXDashBoard> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.ui.TXDashBoard __obj__ = new com.tencent.rtmp.ui.TXDashBoard(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_ui_TXCloudVideoView__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.ui.TXCloudVideoView> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.ui.TXCloudVideoView __obj__ = new com.tencent.rtmp.ui.TXCloudVideoView(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_ui_TXCloudVideoView__android_view_SurfaceView", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.ui.TXCloudVideoView> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.view.SurfaceView view = (android.view.SurfaceView) ((Map<String, Object>) __args__).get("view");
            
                    // create target object
                    com.tencent.rtmp.ui.TXCloudVideoView __obj__ = new com.tencent.rtmp.ui.TXCloudVideoView(view);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_ui_TXLogView__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.ui.TXLogView> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.ui.TXLogView __obj__ = new com.tencent.rtmp.ui.TXLogView(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXLivePlayer__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXLivePlayer> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.TXLivePlayer __obj__ = new com.tencent.rtmp.TXLivePlayer(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_video_TXScreenCapture_TXScreenCaptureAssistantActivity__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.video.TXScreenCapture.TXScreenCaptureAssistantActivity> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.video.TXScreenCapture.TXScreenCaptureAssistantActivity __obj__ = new com.tencent.rtmp.video.TXScreenCapture.TXScreenCaptureAssistantActivity();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_video_TXScreenCapture__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.video.TXScreenCapture> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.video.TXScreenCapture __obj__ = new com.tencent.rtmp.video.TXScreenCapture();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXPlayInfoParams__int__String__String", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXPlayInfoParams> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number appId = (Number) ((Map<String, Object>) __args__).get("appId");
                    // ref arg
                    String fileId = (String) ((Map<String, Object>) __args__).get("fileId");
                    // ref arg
                    String pSign = (String) ((Map<String, Object>) __args__).get("pSign");
            
                    // create target object
                    com.tencent.rtmp.TXPlayInfoParams __obj__ = new com.tencent.rtmp.TXPlayInfoParams(appId.intValue(), fileId, pSign);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXLivePlayer_TXLiteAVTexture__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture __obj__ = new com.tencent.rtmp.TXLivePlayer.TXLiteAVTexture();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXVodPlayer__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXVodPlayer> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.TXVodPlayer __obj__ = new com.tencent.rtmp.TXVodPlayer(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXPlayerAuthBuilder__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXPlayerAuthBuilder> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXPlayerAuthBuilder __obj__ = new com.tencent.rtmp.TXPlayerAuthBuilder();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadMediaInfo__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadMediaInfo> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.downloader.TXVodDownloadMediaInfo __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadMediaInfo();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadDataSource__int__String__int__String__String", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadDataSource> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number appId = (Number) ((Map<String, Object>) __args__).get("appId");
                    // ref arg
                    String fileId = (String) ((Map<String, Object>) __args__).get("fileId");
                    // ref arg
                    Number quality = (Number) ((Map<String, Object>) __args__).get("quality");
                    // ref arg
                    String pSign = (String) ((Map<String, Object>) __args__).get("pSign");
                    // ref arg
                    String userName = (String) ((Map<String, Object>) __args__).get("userName");
            
                    // create target object
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(appId.intValue(), fileId, quality.intValue(), pSign, userName);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__int", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadDataSource> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.tencent.rtmp.TXPlayerAuthBuilder authBuilder = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("authBuilder");
                    // ref arg
                    Number quality = (Number) ((Map<String, Object>) __args__).get("quality");
            
                    // create target object
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(authBuilder, quality.intValue());
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__String", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadDataSource> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.tencent.rtmp.TXPlayerAuthBuilder authBuilder = (com.tencent.rtmp.TXPlayerAuthBuilder) ((Map<String, Object>) __args__).get("authBuilder");
                    // ref arg
                    String templateName = (String) ((Map<String, Object>) __args__).get("templateName");
            
                    // create target object
                    com.tencent.rtmp.downloader.TXVodDownloadDataSource __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadDataSource(authBuilder, templateName);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadManager__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.downloader.TXVodDownloadManager> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.downloader.TXVodDownloadManager __obj__ = new com.tencent.rtmp.downloader.TXVodDownloadManager();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXLiveConstants__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXLiveConstants> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXLiveConstants __obj__ = new com.tencent.rtmp.TXLiveConstants();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXBitrateItem__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXBitrateItem> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXBitrateItem __obj__ = new com.tencent.rtmp.TXBitrateItem();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXLivePlayConfig__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXLivePlayConfig> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXLivePlayConfig __obj__ = new com.tencent.rtmp.TXLivePlayConfig();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXPlayerGlobalSetting__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXPlayerGlobalSetting> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXPlayerGlobalSetting __obj__ = new com.tencent.rtmp.TXPlayerGlobalSetting();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXVodPlayConfig__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXVodPlayConfig> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.rtmp.TXVodPlayConfig __obj__ = new com.tencent.rtmp.TXVodPlayConfig();
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_rtmp_TXImageSprite__android_content_Context", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.rtmp.TXImageSprite> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                    // create target object
                    com.tencent.rtmp.TXImageSprite __obj__ = new com.tencent.rtmp.TXImageSprite(context);
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
        }};
    }
}
