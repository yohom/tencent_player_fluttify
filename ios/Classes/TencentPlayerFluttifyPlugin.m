//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "TencentPlayerFluttifyPlugin.h"
#import <objc/runtime.h>
#import "SubHandler/SubHandler0.h"
#import "SubHandler/SubHandler1.h"
#import "SubHandler/SubHandler2.h"
#import "SubHandler/SubHandler3.h"
#import "SubHandler/SubHandler4.h"
#import "SubHandler/Custom/SubHandlerCustom.h"
#import "FluttifyMessageCodec.h"
#import <TXLiteAVSDK_Player/TXLiteAVSDK.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSString*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@interface TencentPlayerFluttifyPlugin (_Delegate) <V2TXLivePlayerObserver, TXVodDownloadDelegate, TXLiveBaseDelegate, TXLiveRecordListener, TXVodPlayListener, TXVodPreloadManagerDelegate, V2TXLivePlayer, TXAudioCustomProcessDelegate, V2TXLivePremier, V2TXLivePremierObserver, TXLivePlayListener, TXAudioRawDataDelegate, TXVideoCustomProcessDelegate, TXLiveAudioSessionDelegate> @end

@implementation TencentPlayerFluttifyPlugin {
  NSMutableDictionary<NSString*, Handler>* _handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{}.mutableCopy;

    [_handlerMap addEntriesFromDictionary: [self getSubHandler0]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler1]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler2]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler3]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler4]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandlerCustom]];
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"me.yohom/tencent_player_fluttify"
            binaryMessenger:[registrar messenger]
                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];

  [registrar addMethodCallDelegate:[[TencentPlayerFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, [methodCall arguments], methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们
- (void)onError : (id<V2TXLivePlayer>)player code: (V2TXLiveCode)code message: (NSString*)msg extraInfo: (NSDictionary*)extraInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onError_code_message_extraInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // enum callback arg
  NSNumber* argcode = @((NSInteger) code);
  // ref callback arg
  NSString* argmsg = msg;
  // ref callback arg
  NSDictionary* argextraInfo = extraInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onError_code_message_extraInfo" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"code": argcode == nil ? [NSNull null] : argcode, @"msg": argmsg == nil ? [NSNull null] : argmsg, @"extraInfo": argextraInfo == nil ? [NSNull null] : argextraInfo}];
  });
  
}

- (void)onWarning : (id<V2TXLivePlayer>)player code: (V2TXLiveCode)code message: (NSString*)msg extraInfo: (NSDictionary*)extraInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onWarning_code_message_extraInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // enum callback arg
  NSNumber* argcode = @((NSInteger) code);
  // ref callback arg
  NSString* argmsg = msg;
  // ref callback arg
  NSDictionary* argextraInfo = extraInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onWarning_code_message_extraInfo" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"code": argcode == nil ? [NSNull null] : argcode, @"msg": argmsg == nil ? [NSNull null] : argmsg, @"extraInfo": argextraInfo == nil ? [NSNull null] : argextraInfo}];
  });
  
}

- (void)onVideoResolutionChanged : (id<V2TXLivePlayer>)player width: (NSInteger)width height: (NSInteger)height
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onVideoResolutionChanged_width_height");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // primitive callback arg
  NSNumber* argwidth = @(width);
  // primitive callback arg
  NSNumber* argheight = @(height);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onVideoResolutionChanged_width_height" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"width": argwidth == nil ? [NSNull null] : argwidth, @"height": argheight == nil ? [NSNull null] : argheight}];
  });
  
}

- (void)onConnected : (id<V2TXLivePlayer>)player extraInfo: (NSDictionary*)extraInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onConnected_extraInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // ref callback arg
  NSDictionary* argextraInfo = extraInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onConnected_extraInfo" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"extraInfo": argextraInfo == nil ? [NSNull null] : argextraInfo}];
  });
  
}

- (void)onVideoPlaying : (id<V2TXLivePlayer>)player firstPlay: (BOOL)firstPlay extraInfo: (NSDictionary*)extraInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onVideoPlaying_firstPlay_extraInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // primitive callback arg
  NSNumber* argfirstPlay = @(firstPlay);
  // ref callback arg
  NSDictionary* argextraInfo = extraInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onVideoPlaying_firstPlay_extraInfo" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"firstPlay": argfirstPlay == nil ? [NSNull null] : argfirstPlay, @"extraInfo": argextraInfo == nil ? [NSNull null] : argextraInfo}];
  });
  
}

- (void)onAudioPlaying : (id<V2TXLivePlayer>)player firstPlay: (BOOL)firstPlay extraInfo: (NSDictionary*)extraInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onAudioPlaying_firstPlay_extraInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // primitive callback arg
  NSNumber* argfirstPlay = @(firstPlay);
  // ref callback arg
  NSDictionary* argextraInfo = extraInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onAudioPlaying_firstPlay_extraInfo" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"firstPlay": argfirstPlay == nil ? [NSNull null] : argfirstPlay, @"extraInfo": argextraInfo == nil ? [NSNull null] : argextraInfo}];
  });
  
}

- (void)onVideoLoading : (id<V2TXLivePlayer>)player extraInfo: (NSDictionary*)extraInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onVideoLoading_extraInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // ref callback arg
  NSDictionary* argextraInfo = extraInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onVideoLoading_extraInfo" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"extraInfo": argextraInfo == nil ? [NSNull null] : argextraInfo}];
  });
  
}

- (void)onAudioLoading : (id<V2TXLivePlayer>)player extraInfo: (NSDictionary*)extraInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onAudioLoading_extraInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // ref callback arg
  NSDictionary* argextraInfo = extraInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onAudioLoading_extraInfo" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"extraInfo": argextraInfo == nil ? [NSNull null] : argextraInfo}];
  });
  
}

- (void)onPlayoutVolumeUpdate : (id<V2TXLivePlayer>)player volume: (NSInteger)volume
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onPlayoutVolumeUpdate_volume");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // primitive callback arg
  NSNumber* argvolume = @(volume);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onPlayoutVolumeUpdate_volume" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"volume": argvolume == nil ? [NSNull null] : argvolume}];
  });
  
}

- (void)onStatisticsUpdate : (id<V2TXLivePlayer>)player statistics: (V2TXLivePlayerStatistics*)statistics
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onStatisticsUpdate_statistics");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // ref callback arg
  V2TXLivePlayerStatistics* argstatistics = statistics;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onStatisticsUpdate_statistics" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"statistics": argstatistics == nil ? [NSNull null] : argstatistics}];
  });
  
}

- (void)onSnapshotComplete : (id<V2TXLivePlayer>)player image: (UIImage*)image
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onSnapshotComplete_image");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // ref callback arg
  UIImage* argimage = image;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onSnapshotComplete_image" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"image": argimage == nil ? [NSNull null] : argimage}];
  });
  
}

- (void)onRenderVideoFrame : (id<V2TXLivePlayer>)player frame: (V2TXLiveVideoFrame*)videoFrame
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onRenderVideoFrame_frame");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // ref callback arg
  V2TXLiveVideoFrame* argvideoFrame = videoFrame;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onRenderVideoFrame_frame" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"videoFrame": argvideoFrame == nil ? [NSNull null] : argvideoFrame}];
  });
  
}

- (void)onReceiveSeiMessage : (id<V2TXLivePlayer>)player payloadType: (int)payloadType data: (NSData*)data
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayerObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayerObserver::onReceiveSeiMessage_payloadType_data");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayer> argplayer = player;
  // primitive callback arg
  NSNumber* argpayloadType = @(payloadType);
  // ref callback arg
  NSData* argdata = data;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayerObserver::onReceiveSeiMessage_payloadType_data" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"payloadType": argpayloadType == nil ? [NSNull null] : argpayloadType, @"data": argdata == nil ? [NSNull null] : argdata}];
  });
  
}

- (void)onDownloadStart : (TXVodDownloadMediaInfo*)mediaInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVodDownloadDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodDownloadDelegate::onDownloadStart");
  }

  // convert to jsonable arg
  // ref callback arg
  TXVodDownloadMediaInfo* argmediaInfo = mediaInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVodDownloadDelegate::onDownloadStart" arguments:@{@"mediaInfo": argmediaInfo == nil ? [NSNull null] : argmediaInfo}];
  });
  
}

- (void)onDownloadProgress : (TXVodDownloadMediaInfo*)mediaInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVodDownloadDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodDownloadDelegate::onDownloadProgress");
  }

  // convert to jsonable arg
  // ref callback arg
  TXVodDownloadMediaInfo* argmediaInfo = mediaInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVodDownloadDelegate::onDownloadProgress" arguments:@{@"mediaInfo": argmediaInfo == nil ? [NSNull null] : argmediaInfo}];
  });
  
}

- (void)onDownloadStop : (TXVodDownloadMediaInfo*)mediaInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVodDownloadDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodDownloadDelegate::onDownloadStop");
  }

  // convert to jsonable arg
  // ref callback arg
  TXVodDownloadMediaInfo* argmediaInfo = mediaInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVodDownloadDelegate::onDownloadStop" arguments:@{@"mediaInfo": argmediaInfo == nil ? [NSNull null] : argmediaInfo}];
  });
  
}

- (void)onDownloadFinish : (TXVodDownloadMediaInfo*)mediaInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVodDownloadDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodDownloadDelegate::onDownloadFinish");
  }

  // convert to jsonable arg
  // ref callback arg
  TXVodDownloadMediaInfo* argmediaInfo = mediaInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVodDownloadDelegate::onDownloadFinish" arguments:@{@"mediaInfo": argmediaInfo == nil ? [NSNull null] : argmediaInfo}];
  });
  
}

- (void)onDownloadError : (TXVodDownloadMediaInfo*)mediaInfo errorCode: (TXDownloadError)code errorMsg: (NSString*)msg
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVodDownloadDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodDownloadDelegate::onDownloadError_errorCode_errorMsg");
  }

  // convert to jsonable arg
  // ref callback arg
  TXVodDownloadMediaInfo* argmediaInfo = mediaInfo;
  // enum callback arg
  NSNumber* argcode = @((NSInteger) code);
  // ref callback arg
  NSString* argmsg = msg;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVodDownloadDelegate::onDownloadError_errorCode_errorMsg" arguments:@{@"mediaInfo": argmediaInfo == nil ? [NSNull null] : argmediaInfo, @"code": argcode == nil ? [NSNull null] : argcode, @"msg": argmsg == nil ? [NSNull null] : argmsg}];
  });
  
}

- (int)hlsKeyVerify : (TXVodDownloadMediaInfo*)mediaInfo url: (NSString*)url data: (NSData*)data
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVodDownloadDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodDownloadDelegate::hlsKeyVerify_url_data");
  }

  // convert to jsonable arg
  // ref callback arg
  TXVodDownloadMediaInfo* argmediaInfo = mediaInfo;
  // ref callback arg
  NSString* argurl = url;
  // ref callback arg
  NSData* argdata = data;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVodDownloadDelegate::hlsKeyVerify_url_data"
                arguments:@{@"mediaInfo": argmediaInfo == nil ? [NSNull null] : argmediaInfo, @"url": argurl == nil ? [NSNull null] : argurl, @"data": argdata == nil ? [NSNull null] : argdata}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  int result = 0; return result;
}

- (void)onLog : (NSString*)log LogLevel: (int)level WhichModule: (NSString*)module
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXLiveBaseDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXLiveBaseDelegate::onLog_LogLevel_WhichModule");
  }

  // convert to jsonable arg
  // ref callback arg
  NSString* arglog = log;
  // primitive callback arg
  NSNumber* arglevel = @(level);
  // ref callback arg
  NSString* argmodule = module;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXLiveBaseDelegate::onLog_LogLevel_WhichModule" arguments:@{@"log": arglog == nil ? [NSNull null] : arglog, @"level": arglevel == nil ? [NSNull null] : arglevel, @"module": argmodule == nil ? [NSNull null] : argmodule}];
  });
  
}

- (void)onUpdateNetworkTime : (int)errCode message: (NSString*)errMsg
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXLiveBaseDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXLiveBaseDelegate::onUpdateNetworkTime_message");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argerrCode = @(errCode);
  // ref callback arg
  NSString* argerrMsg = errMsg;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXLiveBaseDelegate::onUpdateNetworkTime_message" arguments:@{@"errCode": argerrCode == nil ? [NSNull null] : argerrCode, @"errMsg": argerrMsg == nil ? [NSNull null] : argerrMsg}];
  });
  
}

- (void)onLicenceLoaded : (int)result Reason: (NSString*)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXLiveBaseDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXLiveBaseDelegate::onLicenceLoaded_Reason");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argresult = @(result);
  // ref callback arg
  NSString* argreason = reason;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXLiveBaseDelegate::onLicenceLoaded_Reason" arguments:@{@"result": argresult == nil ? [NSNull null] : argresult, @"reason": argreason == nil ? [NSNull null] : argreason}];
  });
  
}

- (void)onRecordProgress : (NSInteger)milliSecond
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXLiveRecordListener::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXLiveRecordListener::onRecordProgress");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argmilliSecond = @(milliSecond);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXLiveRecordListener::onRecordProgress" arguments:@{@"milliSecond": argmilliSecond == nil ? [NSNull null] : argmilliSecond}];
  });
  
}

- (void)onRecordComplete : (TXRecordResult*)result
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXLiveRecordListener::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXLiveRecordListener::onRecordComplete");
  }

  // convert to jsonable arg
  // ref callback arg
  TXRecordResult* argresult = result;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXLiveRecordListener::onRecordComplete" arguments:@{@"result": argresult == nil ? [NSNull null] : argresult}];
  });
  
}

- (void)onRecordEvent : (NSDictionary*)evt
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXLiveRecordListener::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXLiveRecordListener::onRecordEvent");
  }

  // convert to jsonable arg
  // ref callback arg
  NSDictionary* argevt = evt;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXLiveRecordListener::onRecordEvent" arguments:@{@"evt": argevt == nil ? [NSNull null] : argevt}];
  });
  
}

- (void)onPlayEvent : (TXVodPlayer*)player event: (int)EvtID withParam: (NSDictionary*)param
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVodPlayListener::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodPlayListener::onPlayEvent_event_withParam");
  }

  // convert to jsonable arg
  // ref callback arg
  TXVodPlayer* argplayer = player;
  // primitive callback arg
  NSNumber* argEvtID = @(EvtID);
  // ref callback arg
  NSDictionary* argparam = param;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVodPlayListener::onPlayEvent_event_withParam" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"EvtID": argEvtID == nil ? [NSNull null] : argEvtID, @"param": argparam == nil ? [NSNull null] : argparam}];
  });
  
}

- (void)onNetStatus : (TXVodPlayer*)player withParam: (NSDictionary*)param
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVodPlayListener::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodPlayListener::onNetStatus_withParam");
  }

  // convert to jsonable arg
  // ref callback arg
  TXVodPlayer* argplayer = player;
  // ref callback arg
  NSDictionary* argparam = param;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVodPlayListener::onNetStatus_withParam" arguments:@{@"player": argplayer == nil ? [NSNull null] : argplayer, @"param": argparam == nil ? [NSNull null] : argparam}];
  });
  
}

- (void)onComplete : (int)taskID url: (NSString*)url
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVodPreloadManagerDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodPreloadManagerDelegate::onComplete_url");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argtaskID = @(taskID);
  // ref callback arg
  NSString* argurl = url;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVodPreloadManagerDelegate::onComplete_url" arguments:@{@"taskID": argtaskID == nil ? [NSNull null] : argtaskID, @"url": argurl == nil ? [NSNull null] : argurl}];
  });
  
}

- (void)onError : (int)taskID url: (NSString*)url error: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVodPreloadManagerDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodPreloadManagerDelegate::onError_url_error");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argtaskID = @(taskID);
  // ref callback arg
  NSString* argurl = url;
  // ref callback arg
  NSError* argerror = error;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVodPreloadManagerDelegate::onError_url_error" arguments:@{@"taskID": argtaskID == nil ? [NSNull null] : argtaskID, @"url": argurl == nil ? [NSNull null] : argurl, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (void)setObserver : (id<V2TXLivePlayerObserver>)observer
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::setObserver");
  }

  // convert to jsonable arg
  // ref callback arg
  id<V2TXLivePlayerObserver> argobserver = observer;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::setObserver" arguments:@{@"observer": argobserver == nil ? [NSNull null] : argobserver}];
  });
  
}

- (V2TXLiveCode)setRenderView : (UIView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::setRenderView");
  }

  // convert to jsonable arg
  // ref callback arg
  UIView* argview = view;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::setRenderView"
                arguments:@{@"view": argview == nil ? [NSNull null] : argview}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)setRenderRotation : (V2TXLiveRotation)rotation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::setRenderRotation");
  }

  // convert to jsonable arg
  // enum callback arg
  NSNumber* argrotation = @((NSInteger) rotation);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::setRenderRotation"
                arguments:@{@"rotation": argrotation == nil ? [NSNull null] : argrotation}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)setRenderFillMode : (V2TXLiveFillMode)mode
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::setRenderFillMode");
  }

  // convert to jsonable arg
  // enum callback arg
  NSNumber* argmode = @((NSInteger) mode);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::setRenderFillMode"
                arguments:@{@"mode": argmode == nil ? [NSNull null] : argmode}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)startPlay : (NSString*)url
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::startPlay");
  }

  // convert to jsonable arg
  // ref callback arg
  NSString* argurl = url;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::startPlay"
                arguments:@{@"url": argurl == nil ? [NSNull null] : argurl}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)stopPlay 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::stopPlay");
  }

  // convert to jsonable arg
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::stopPlay"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (int)isPlaying 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::isPlaying");
  }

  // convert to jsonable arg
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::isPlaying"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  int result = 0; return result;
}

- (V2TXLiveCode)pauseAudio 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::pauseAudio");
  }

  // convert to jsonable arg
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::pauseAudio"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)resumeAudio 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::resumeAudio");
  }

  // convert to jsonable arg
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::resumeAudio"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)pauseVideo 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::pauseVideo");
  }

  // convert to jsonable arg
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::pauseVideo"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)resumeVideo 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::resumeVideo");
  }

  // convert to jsonable arg
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::resumeVideo"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)setPlayoutVolume : (NSUInteger)volume
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::setPlayoutVolume");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argvolume = @(volume);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::setPlayoutVolume"
                arguments:@{@"volume": argvolume == nil ? [NSNull null] : argvolume}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)setCacheParams : (CGFloat)minTime maxTime: (CGFloat)maxTime
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::setCacheParams_maxTime");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argminTime = @(minTime);
  // primitive callback arg
  NSNumber* argmaxTime = @(maxTime);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::setCacheParams_maxTime"
                arguments:@{@"minTime": argminTime == nil ? [NSNull null] : argminTime, @"maxTime": argmaxTime == nil ? [NSNull null] : argmaxTime}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)enableVolumeEvaluation : (NSUInteger)intervalMs
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::enableVolumeEvaluation");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argintervalMs = @(intervalMs);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::enableVolumeEvaluation"
                arguments:@{@"intervalMs": argintervalMs == nil ? [NSNull null] : argintervalMs}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)snapshot 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::snapshot");
  }

  // convert to jsonable arg
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::snapshot"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)enableObserveVideoFrame : (BOOL)enable pixelFormat: (V2TXLivePixelFormat)pixelFormat bufferType: (V2TXLiveBufferType)bufferType
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::enableObserveVideoFrame_pixelFormat_bufferType");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argenable = @(enable);
  // enum callback arg
  NSNumber* argpixelFormat = @((NSInteger) pixelFormat);
  // enum callback arg
  NSNumber* argbufferType = @((NSInteger) bufferType);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::enableObserveVideoFrame_pixelFormat_bufferType"
                arguments:@{@"enable": argenable == nil ? [NSNull null] : argenable, @"pixelFormat": argpixelFormat == nil ? [NSNull null] : argpixelFormat, @"bufferType": argbufferType == nil ? [NSNull null] : argbufferType}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (V2TXLiveCode)enableReceiveSeiMessage : (BOOL)enable payloadType: (int)payloadType
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::enableReceiveSeiMessage_payloadType");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argenable = @(enable);
  // primitive callback arg
  NSNumber* argpayloadType = @(payloadType);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::enableReceiveSeiMessage_payloadType"
                arguments:@{@"enable": argenable == nil ? [NSNull null] : argenable, @"payloadType": argpayloadType == nil ? [NSNull null] : argpayloadType}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (void)showDebugView : (BOOL)isShow
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::showDebugView");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argisShow = @(isShow);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::showDebugView" arguments:@{@"isShow": argisShow == nil ? [NSNull null] : argisShow}];
  });
  
}

- (V2TXLiveCode)setProperty : (NSString*)key value: (NSObject*)value
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePlayer::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePlayer::setProperty_value");
  }

  // convert to jsonable arg
  // ref callback arg
  NSString* argkey = key;
  // ref callback arg
  NSObject* argvalue = value;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePlayer::setProperty_value"
                arguments:@{@"key": argkey == nil ? [NSNull null] : argkey, @"value": argvalue == nil ? [NSNull null] : argvalue}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (void)onRecordRawPcmData : (NSData*)data timeStamp: (unsigned long long)timeStamp sampleRate: (int)sampleRate channels: (int)channels withBgm: (BOOL)withBgm
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXAudioCustomProcessDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXAudioCustomProcessDelegate::onRecordRawPcmData_timeStamp_sampleRate_channels_withBgm");
  }

  // convert to jsonable arg
  // ref callback arg
  NSData* argdata = data;
  // primitive callback arg
  NSNumber* argtimeStamp = @(timeStamp);
  // primitive callback arg
  NSNumber* argsampleRate = @(sampleRate);
  // primitive callback arg
  NSNumber* argchannels = @(channels);
  // primitive callback arg
  NSNumber* argwithBgm = @(withBgm);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXAudioCustomProcessDelegate::onRecordRawPcmData_timeStamp_sampleRate_channels_withBgm" arguments:@{@"data": argdata == nil ? [NSNull null] : argdata, @"timeStamp": argtimeStamp == nil ? [NSNull null] : argtimeStamp, @"sampleRate": argsampleRate == nil ? [NSNull null] : argsampleRate, @"channels": argchannels == nil ? [NSNull null] : argchannels, @"withBgm": argwithBgm == nil ? [NSNull null] : argwithBgm}];
  });
  
}

- (void)onRecordPcmData : (NSData*)data timeStamp: (unsigned long long)timeStamp sampleRate: (int)sampleRate channels: (int)channels
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXAudioCustomProcessDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXAudioCustomProcessDelegate::onRecordPcmData_timeStamp_sampleRate_channels");
  }

  // convert to jsonable arg
  // ref callback arg
  NSData* argdata = data;
  // primitive callback arg
  NSNumber* argtimeStamp = @(timeStamp);
  // primitive callback arg
  NSNumber* argsampleRate = @(sampleRate);
  // primitive callback arg
  NSNumber* argchannels = @(channels);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXAudioCustomProcessDelegate::onRecordPcmData_timeStamp_sampleRate_channels" arguments:@{@"data": argdata == nil ? [NSNull null] : argdata, @"timeStamp": argtimeStamp == nil ? [NSNull null] : argtimeStamp, @"sampleRate": argsampleRate == nil ? [NSNull null] : argsampleRate, @"channels": argchannels == nil ? [NSNull null] : argchannels}];
  });
  
}

- (NSString*)getSDKVersionStr 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePremier::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePremier::getSDKVersionStr");
  }

  // convert to jsonable arg
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePremier::getSDKVersionStr"
                arguments:@{}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return (NSString*) nil;
}

- (V2TXLiveCode)setLogConfig : (V2TXLiveLogConfig*)config
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePremier::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePremier::setLogConfig");
  }

  // convert to jsonable arg
  // ref callback arg
  V2TXLiveLogConfig* argconfig = config;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePremier::setLogConfig"
                arguments:@{@"config": argconfig == nil ? [NSNull null] : argconfig}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (void)setLicence : (NSString*)url key: (NSString*)key
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePremier::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePremier::setLicence_key");
  }

  // convert to jsonable arg
  // ref callback arg
  NSString* argurl = url;
  // ref callback arg
  NSString* argkey = key;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePremier::setLicence_key" arguments:@{@"url": argurl == nil ? [NSNull null] : argurl, @"key": argkey == nil ? [NSNull null] : argkey}];
  });
  
}

- (V2TXLiveCode)setSocks5Proxy : (NSString*)host port: (NSInteger)port username: (NSString*)username password: (NSString*)password
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePremier::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePremier::setSocks5Proxy_port_username_password");
  }

  // convert to jsonable arg
  // ref callback arg
  NSString* arghost = host;
  // primitive callback arg
  NSNumber* argport = @(port);
  // ref callback arg
  NSString* argusername = username;
  // ref callback arg
  NSString* argpassword = password;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePremier::setSocks5Proxy_port_username_password"
                arguments:@{@"host": arghost == nil ? [NSNull null] : arghost, @"port": argport == nil ? [NSNull null] : argport, @"username": argusername == nil ? [NSNull null] : argusername, @"password": argpassword == nil ? [NSNull null] : argpassword}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  V2TXLiveCode result = 0; return result;
}

- (void)onLog : (V2TXLiveLogLevel)level log: (NSString*)log
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"V2TXLivePremierObserver::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePremierObserver::onLog_log");
  }

  // convert to jsonable arg
  // enum callback arg
  NSNumber* arglevel = @((NSInteger) level);
  // ref callback arg
  NSString* arglog = log;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePremierObserver::onLog_log" arguments:@{@"level": arglevel == nil ? [NSNull null] : arglevel, @"log": arglog == nil ? [NSNull null] : arglog}];
  });
  
}

- (void)onPlayEvent : (int)EvtID withParam: (NSDictionary*)param
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXLivePlayListener::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXLivePlayListener::onPlayEvent_withParam");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argEvtID = @(EvtID);
  // ref callback arg
  NSDictionary* argparam = param;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXLivePlayListener::onPlayEvent_withParam" arguments:@{@"EvtID": argEvtID == nil ? [NSNull null] : argEvtID, @"param": argparam == nil ? [NSNull null] : argparam}];
  });
  
}

- (void)onNetStatus : (NSDictionary*)param
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXLivePlayListener::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXLivePlayListener::onNetStatus");
  }

  // convert to jsonable arg
  // ref callback arg
  NSDictionary* argparam = param;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXLivePlayListener::onNetStatus" arguments:@{@"param": argparam == nil ? [NSNull null] : argparam}];
  });
  
}

- (void)onAudioInfoChanged : (int)sampleRate channels: (int)channels
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXAudioRawDataDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXAudioRawDataDelegate::onAudioInfoChanged_channels");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argsampleRate = @(sampleRate);
  // primitive callback arg
  NSNumber* argchannels = @(channels);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXAudioRawDataDelegate::onAudioInfoChanged_channels" arguments:@{@"sampleRate": argsampleRate == nil ? [NSNull null] : argsampleRate, @"channels": argchannels == nil ? [NSNull null] : argchannels}];
  });
  
}

- (void)onPcmDataAvailable : (NSData*)data pts: (unsigned long long)timestamp
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXAudioRawDataDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXAudioRawDataDelegate::onPcmDataAvailable_pts");
  }

  // convert to jsonable arg
  // ref callback arg
  NSData* argdata = data;
  // primitive callback arg
  NSNumber* argtimestamp = @(timestamp);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXAudioRawDataDelegate::onPcmDataAvailable_pts" arguments:@{@"data": argdata == nil ? [NSNull null] : argdata, @"timestamp": argtimestamp == nil ? [NSNull null] : argtimestamp}];
  });
  
}

- (GLuint)onPreProcessTexture : (GLuint)texture width: (CGFloat)width height: (CGFloat)height
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVideoCustomProcessDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVideoCustomProcessDelegate::onPreProcessTexture_width_height");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argtexture = @(texture);
  // primitive callback arg
  NSNumber* argwidth = @(width);
  // primitive callback arg
  NSNumber* argheight = @(height);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVideoCustomProcessDelegate::onPreProcessTexture_width_height"
                arguments:@{@"texture": argtexture == nil ? [NSNull null] : argtexture, @"width": argwidth == nil ? [NSNull null] : argwidth, @"height": argheight == nil ? [NSNull null] : argheight}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  GLuint result = 0; return result;
}

- (void)onTextureDestoryed 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVideoCustomProcessDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVideoCustomProcessDelegate::onTextureDestoryed");
  }

  // convert to jsonable arg
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVideoCustomProcessDelegate::onTextureDestoryed" arguments:@{}];
  });
  
}

- (void)onDetectFacePoints : (NSArray*)points
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVideoCustomProcessDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVideoCustomProcessDelegate::onDetectFacePoints");
  }

  // convert to jsonable arg
  // ref callback arg
  NSArray* argpoints = points;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVideoCustomProcessDelegate::onDetectFacePoints" arguments:@{@"points": argpoints == nil ? [NSNull null] : argpoints}];
  });
  
}

- (BOOL)onPlayerPixelBuffer : (CVPixelBufferRef)pixelBuffer
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"TXVideoCustomProcessDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVideoCustomProcessDelegate::onPlayerPixelBuffer");
  }

  // convert to jsonable arg
  // value pointer callback arg
  NSValue* argpixelBuffer = [NSValue valueWithPointer:pixelBuffer];
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXVideoCustomProcessDelegate::onPlayerPixelBuffer"
                arguments:@{@"pixelBuffer": argpixelBuffer == nil ? [NSNull null] : argpixelBuffer}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return NO;
}


@end