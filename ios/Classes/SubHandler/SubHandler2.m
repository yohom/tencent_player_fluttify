//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler2.h"
#import "FluttifyMessageCodec.h"
#import <TXLiteAVSDK_Player/TXLiteAVSDK.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSString*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation TencentPlayerFluttifyPlugin (SubHandler2)
- (NSDictionary<NSString*, Handler>*) getSubHandler2 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"TXRecordResult::get_retCode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                TXRecordResult* ref = (TXRecordResult*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                TXRecordResultCode result = ref.retCode;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"TXRecordResult::get_descMsg_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                TXRecordResult* ref = (TXRecordResult*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.descMsg;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"TXRecordResult::get_videoPath_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                TXRecordResult* ref = (TXRecordResult*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.videoPath;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"TXRecordResult::get_coverImage_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                TXRecordResult* ref = (TXRecordResult*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                UIImage* result = ref.coverImage;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoEncoderParam::get_videoResolution_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoEncoderParam* ref = (V2TXLiveVideoEncoderParam*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                V2TXLiveVideoResolution result = ref.videoResolution;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoEncoderParam::get_videoResolutionMode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoEncoderParam* ref = (V2TXLiveVideoEncoderParam*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                V2TXLiveVideoResolutionMode result = ref.videoResolutionMode;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoEncoderParam::get_videoFps_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoEncoderParam* ref = (V2TXLiveVideoEncoderParam*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                int result = ref.videoFps;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoEncoderParam::get_videoBitrate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoEncoderParam* ref = (V2TXLiveVideoEncoderParam*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                int result = ref.videoBitrate;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoEncoderParam::get_minVideoBitrate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoEncoderParam* ref = (V2TXLiveVideoEncoderParam*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                int result = ref.minVideoBitrate;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoFrame::get_pixelFormat_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                V2TXLivePixelFormat result = ref.pixelFormat;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoFrame::get_bufferType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                V2TXLiveBufferType result = ref.bufferType;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoFrame::get_data_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSData* result = ref.data;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoFrame::get_pixelBuffer_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                CVPixelBufferRef result = ref.pixelBuffer;
        
                // return a (value)*
                NSValue* __result__ = [NSValue valueWithPointer:result];
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoFrame::get_width_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.width;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoFrame::get_height_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.height;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoFrame::get_rotation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                V2TXLiveRotation result = ref.rotation;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveVideoFrame::get_textureId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                GLuint result = ref.textureId;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveAudioFrame::get_data_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveAudioFrame* ref = (V2TXLiveAudioFrame*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSData* result = ref.data;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveAudioFrame::get_sampleRate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveAudioFrame* ref = (V2TXLiveAudioFrame*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                int result = ref.sampleRate;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveAudioFrame::get_channel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveAudioFrame* ref = (V2TXLiveAudioFrame*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                int result = ref.channel;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePusherStatistics::get_appCpu_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.appCpu;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePusherStatistics::get_systemCpu_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.systemCpu;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePusherStatistics::get_width_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.width;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePusherStatistics::get_height_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.height;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePusherStatistics::get_fps_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.fps;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePusherStatistics::get_videoBitrate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.videoBitrate;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePusherStatistics::get_audioBitrate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.audioBitrate;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePlayerStatistics::get_appCpu_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.appCpu;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePlayerStatistics::get_systemCpu_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.systemCpu;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePlayerStatistics::get_width_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.width;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePlayerStatistics::get_height_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.height;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePlayerStatistics::get_fps_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.fps;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePlayerStatistics::get_videoBitrate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.videoBitrate;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLivePlayerStatistics::get_audioBitrate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.audioBitrate;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveMixStream::get_userId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.userId;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveMixStream::get_streamId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.streamId;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveMixStream::get_x_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSInteger result = ref.x;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveMixStream::get_y_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSInteger result = ref.y;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveMixStream::get_width_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSInteger result = ref.width;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveMixStream::get_height_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSInteger result = ref.height;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveMixStream::get_zOrder_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.zOrder;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveMixStream::get_inputType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                V2TXLiveMixInputType result = ref.inputType;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_videoWidth_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.videoWidth;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_videoHeight_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.videoHeight;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_videoBitrate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.videoBitrate;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_videoFramerate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.videoFramerate;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_videoGOP_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.videoGOP;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_backgroundColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.backgroundColor;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_backgroundImage_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.backgroundImage;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_audioSampleRate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.audioSampleRate;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_audioBitrate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.audioBitrate;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_audioChannels_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSUInteger result = ref.audioChannels;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_mixStreams_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSArray<V2TXLiveMixStream*>* result = ref.mixStreams;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveTranscodingConfig::get_outputStreamId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.outputStreamId;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveLogConfig::get_logLevel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveLogConfig* ref = (V2TXLiveLogConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                V2TXLiveLogLevel result = ref.logLevel;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveLogConfig::get_enableObserver_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveLogConfig* ref = (V2TXLiveLogConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                BOOL result = ref.enableObserver;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveLogConfig::get_enableConsole_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveLogConfig* ref = (V2TXLiveLogConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                BOOL result = ref.enableConsole;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveLogConfig::get_enableLogFile_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveLogConfig* ref = (V2TXLiveLogConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                BOOL result = ref.enableLogFile;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"V2TXLiveLogConfig::get_logPath_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                V2TXLiveLogConfig* ref = (V2TXLiveLogConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.logPath;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"TXVodDownloadDataSource::set_auth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadDataSource::set_auth");
            }
        
            // args
            // ref arg
            TXPlayerAuthParams* auth = (TXPlayerAuthParams*) (args[@"auth"] == [NSNull null] ? nil : args[@"auth"]);
        
            // ref
            TXVodDownloadDataSource* ref = (TXVodDownloadDataSource*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.auth = auth;
            methodResult(@"success");
        },
        
        @"TXVodDownloadDataSource::set_quality": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadDataSource::set_quality");
            }
        
            // args
            // enum arg
            TXVodQuality quality = (TXVodQuality) [args[@"quality"] integerValue];
        
            // ref
            TXVodDownloadDataSource* ref = (TXVodDownloadDataSource*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.quality = quality;
            methodResult(@"success");
        },
        
        @"TXVodDownloadDataSource::set_token": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadDataSource::set_token");
            }
        
            // args
            // jsonable arg
            NSString* token = (NSString*) args[@"token"];
        
            // ref
            TXVodDownloadDataSource* ref = (TXVodDownloadDataSource*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.token = token;
            methodResult(@"success");
        },
        
        @"TXVodDownloadDataSource::set_templateName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadDataSource::set_templateName");
            }
        
            // args
            // jsonable arg
            NSString* templateName = (NSString*) args[@"templateName"];
        
            // ref
            TXVodDownloadDataSource* ref = (TXVodDownloadDataSource*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.templateName = templateName;
            methodResult(@"success");
        },
        
        @"TXVodDownloadDataSource::set_fileId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadDataSource::set_fileId");
            }
        
            // args
            // jsonable arg
            NSString* fileId = (NSString*) args[@"fileId"];
        
            // ref
            TXVodDownloadDataSource* ref = (TXVodDownloadDataSource*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.fileId = fileId;
            methodResult(@"success");
        },
        
        @"TXVodDownloadDataSource::set_pSign": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadDataSource::set_pSign");
            }
        
            // args
            // jsonable arg
            NSString* pSign = (NSString*) args[@"pSign"];
        
            // ref
            TXVodDownloadDataSource* ref = (TXVodDownloadDataSource*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.pSign = pSign;
            methodResult(@"success");
        },
        
        @"TXVodDownloadDataSource::set_appId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadDataSource::set_appId");
            }
        
            // args
            // jsonable arg
            int appId = [args[@"appId"] intValue];
        
            // ref
            TXVodDownloadDataSource* ref = (TXVodDownloadDataSource*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appId = appId;
            methodResult(@"success");
        },
        
        @"TXVodDownloadDataSource::set_userName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadDataSource::set_userName");
            }
        
            // args
            // jsonable arg
            NSString* userName = (NSString*) args[@"userName"];
        
            // ref
            TXVodDownloadDataSource* ref = (TXVodDownloadDataSource*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.userName = userName;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_dataSource": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_dataSource");
            }
        
            // args
            // ref arg
            TXVodDownloadDataSource* dataSource = (TXVodDownloadDataSource*) (args[@"dataSource"] == [NSNull null] ? nil : args[@"dataSource"]);
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.dataSource = dataSource;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_url": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_url");
            }
        
            // args
            // jsonable arg
            NSString* url = (NSString*) args[@"url"];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.url = url;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_userName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_userName");
            }
        
            // args
            // jsonable arg
            NSString* userName = (NSString*) args[@"userName"];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.userName = userName;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_duration");
            }
        
            // args
            // jsonable arg
            int duration = [args[@"duration"] intValue];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_playableDuration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_playableDuration");
            }
        
            // args
            // jsonable arg
            int playableDuration = [args[@"playableDuration"] intValue];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.playableDuration = playableDuration;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_size");
            }
        
            // args
            // jsonable arg
            int size = [args[@"size"] intValue];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.size = size;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_downloadSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_downloadSize");
            }
        
            // args
            // jsonable arg
            int downloadSize = [args[@"downloadSize"] intValue];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.downloadSize = downloadSize;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_segments": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_segments");
            }
        
            // args
            // jsonable arg
            int segments = [args[@"segments"] intValue];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.segments = segments;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_downloadSegments": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_downloadSegments");
            }
        
            // args
            // jsonable arg
            int downloadSegments = [args[@"downloadSegments"] intValue];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.downloadSegments = downloadSegments;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_progress": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_progress");
            }
        
            // args
            // jsonable arg
            float progress = [args[@"progress"] floatValue];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.progress = progress;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_playPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_playPath");
            }
        
            // args
            // jsonable arg
            NSString* playPath = (NSString*) args[@"playPath"];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.playPath = playPath;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_speed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_speed");
            }
        
            // args
            // jsonable arg
            int speed = [args[@"speed"] intValue];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.speed = speed;
            methodResult(@"success");
        },
        
        @"TXVodDownloadMediaInfo::set_downloadState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadMediaInfo::set_downloadState");
            }
        
            // args
            // enum arg
            TXVodDownloadMediaInfoState downloadState = (TXVodDownloadMediaInfoState) [args[@"downloadState"] integerValue];
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.downloadState = downloadState;
            methodResult(@"success");
        },
        
        @"TXVodDownloadManager::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadManager::set_delegate");
            }
        
            // args
        
        
            // ref
            TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.delegate = weakSelf;
            methodResult(@"success");
        },
        
        @"TXVodDownloadManager::set_headers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodDownloadManager::set_headers");
            }
        
            // args
            // jsonable arg
            NSDictionary* headers = (NSDictionary*) args[@"headers"];
        
            // ref
            TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.headers = headers;
            methodResult(@"success");
        },
        
        @"TXLiveBase::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLiveBase::set_delegate");
            }
        
            // args
        
        
            // ref
            TXLiveBase* ref = (TXLiveBase*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.delegate = weakSelf;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_connectRetryCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_connectRetryCount");
            }
        
            // args
            // jsonable arg
            int connectRetryCount = [args[@"connectRetryCount"] intValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.connectRetryCount = connectRetryCount;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_connectRetryInterval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_connectRetryInterval");
            }
        
            // args
            // jsonable arg
            int connectRetryInterval = [args[@"connectRetryInterval"] intValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.connectRetryInterval = connectRetryInterval;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_timeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_timeout");
            }
        
            // args
            // jsonable arg
            NSTimeInterval timeout = [args[@"timeout"] doubleValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.timeout = timeout;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_keepLastFrameWhenStop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_keepLastFrameWhenStop");
            }
        
            // args
            // jsonable arg
            BOOL keepLastFrameWhenStop = [args[@"keepLastFrameWhenStop"] boolValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.keepLastFrameWhenStop = keepLastFrameWhenStop;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_firstStartPlayBufferTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_firstStartPlayBufferTime");
            }
        
            // args
            // jsonable arg
            int firstStartPlayBufferTime = [args[@"firstStartPlayBufferTime"] intValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.firstStartPlayBufferTime = firstStartPlayBufferTime;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_nextStartPlayBufferTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_nextStartPlayBufferTime");
            }
        
            // args
            // jsonable arg
            int nextStartPlayBufferTime = [args[@"nextStartPlayBufferTime"] intValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.nextStartPlayBufferTime = nextStartPlayBufferTime;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_cacheFolderPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_cacheFolderPath");
            }
        
            // args
            // jsonable arg
            NSString* cacheFolderPath = (NSString*) args[@"cacheFolderPath"];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cacheFolderPath = cacheFolderPath;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_maxCacheItems": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_maxCacheItems");
            }
        
            // args
            // jsonable arg
            int maxCacheItems = [args[@"maxCacheItems"] intValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.maxCacheItems = maxCacheItems;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_playerType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_playerType");
            }
        
            // args
            // enum arg
            TX_Enum_PlayerType playerType = (TX_Enum_PlayerType) [args[@"playerType"] integerValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.playerType = playerType;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_headers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_headers");
            }
        
            // args
            // jsonable arg
            NSDictionary* headers = (NSDictionary*) args[@"headers"];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.headers = headers;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_enableAccurateSeek": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_enableAccurateSeek");
            }
        
            // args
            // jsonable arg
            BOOL enableAccurateSeek = [args[@"enableAccurateSeek"] boolValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.enableAccurateSeek = enableAccurateSeek;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_autoRotate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_autoRotate");
            }
        
            // args
            // jsonable arg
            BOOL autoRotate = [args[@"autoRotate"] boolValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.autoRotate = autoRotate;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_smoothSwitchBitrate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_smoothSwitchBitrate");
            }
        
            // args
            // jsonable arg
            BOOL smoothSwitchBitrate = [args[@"smoothSwitchBitrate"] boolValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.smoothSwitchBitrate = smoothSwitchBitrate;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_progressInterval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_progressInterval");
            }
        
            // args
            // jsonable arg
            NSTimeInterval progressInterval = [args[@"progressInterval"] doubleValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.progressInterval = progressInterval;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_maxBufferSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_maxBufferSize");
            }
        
            // args
            // jsonable arg
            int maxBufferSize = [args[@"maxBufferSize"] intValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.maxBufferSize = maxBufferSize;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_maxPreloadSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_maxPreloadSize");
            }
        
            // args
            // jsonable arg
            int maxPreloadSize = [args[@"maxPreloadSize"] intValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.maxPreloadSize = maxPreloadSize;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_overlayKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_overlayKey");
            }
        
            // args
            // jsonable arg
            NSString* overlayKey = (NSString*) args[@"overlayKey"];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.overlayKey = overlayKey;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_overlayIv": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_overlayIv");
            }
        
            // args
            // jsonable arg
            NSString* overlayIv = (NSString*) args[@"overlayIv"];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.overlayIv = overlayIv;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_enableRenderProcess": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_enableRenderProcess");
            }
        
            // args
            // jsonable arg
            BOOL enableRenderProcess = [args[@"enableRenderProcess"] boolValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.enableRenderProcess = enableRenderProcess;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_preferredResolution": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_preferredResolution");
            }
        
            // args
            // jsonable arg
            long preferredResolution = [args[@"preferredResolution"] longValue];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.preferredResolution = preferredResolution;
            methodResult(@"success");
        },
        
        @"TXVodPlayConfig::set_extInfoMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayConfig::set_extInfoMap");
            }
        
            // args
            // jsonable arg
            NSDictionary* extInfoMap = (NSDictionary*) args[@"extInfoMap"];
        
            // ref
            TXVodPlayConfig* ref = (TXVodPlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.extInfoMap = extInfoMap;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_cacheTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_cacheTime");
            }
        
            // args
            // jsonable arg
            float cacheTime = [args[@"cacheTime"] floatValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cacheTime = cacheTime;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_bAutoAdjustCacheTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_bAutoAdjustCacheTime");
            }
        
            // args
            // jsonable arg
            BOOL bAutoAdjustCacheTime = [args[@"bAutoAdjustCacheTime"] boolValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.bAutoAdjustCacheTime = bAutoAdjustCacheTime;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_maxAutoAdjustCacheTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_maxAutoAdjustCacheTime");
            }
        
            // args
            // jsonable arg
            float maxAutoAdjustCacheTime = [args[@"maxAutoAdjustCacheTime"] floatValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.maxAutoAdjustCacheTime = maxAutoAdjustCacheTime;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_minAutoAdjustCacheTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_minAutoAdjustCacheTime");
            }
        
            // args
            // jsonable arg
            float minAutoAdjustCacheTime = [args[@"minAutoAdjustCacheTime"] floatValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.minAutoAdjustCacheTime = minAutoAdjustCacheTime;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_videoBlockThreshold": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_videoBlockThreshold");
            }
        
            // args
            // jsonable arg
            int videoBlockThreshold = [args[@"videoBlockThreshold"] intValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoBlockThreshold = videoBlockThreshold;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_connectRetryCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_connectRetryCount");
            }
        
            // args
            // jsonable arg
            int connectRetryCount = [args[@"connectRetryCount"] intValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.connectRetryCount = connectRetryCount;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_connectRetryInterval": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_connectRetryInterval");
            }
        
            // args
            // jsonable arg
            int connectRetryInterval = [args[@"connectRetryInterval"] intValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.connectRetryInterval = connectRetryInterval;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_enableAEC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_enableAEC");
            }
        
            // args
            // jsonable arg
            BOOL enableAEC = [args[@"enableAEC"] boolValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.enableAEC = enableAEC;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_enableMessage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_enableMessage");
            }
        
            // args
            // jsonable arg
            BOOL enableMessage = [args[@"enableMessage"] boolValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.enableMessage = enableMessage;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_enableMetaData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_enableMetaData");
            }
        
            // args
            // jsonable arg
            BOOL enableMetaData = [args[@"enableMetaData"] boolValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.enableMetaData = enableMetaData;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_flvSessionKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_flvSessionKey");
            }
        
            // args
            // jsonable arg
            NSString* flvSessionKey = (NSString*) args[@"flvSessionKey"];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.flvSessionKey = flvSessionKey;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_enableNearestIP": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_enableNearestIP");
            }
        
            // args
            // jsonable arg
            BOOL enableNearestIP = [args[@"enableNearestIP"] boolValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.enableNearestIP = enableNearestIP;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_rtmpChannelType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_rtmpChannelType");
            }
        
            // args
            // jsonable arg
            int rtmpChannelType = [args[@"rtmpChannelType"] intValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.rtmpChannelType = rtmpChannelType;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_cacheFolderPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_cacheFolderPath");
            }
        
            // args
            // jsonable arg
            NSString* cacheFolderPath = (NSString*) args[@"cacheFolderPath"];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cacheFolderPath = cacheFolderPath;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_maxCacheItems": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_maxCacheItems");
            }
        
            // args
            // jsonable arg
            int maxCacheItems = [args[@"maxCacheItems"] intValue];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.maxCacheItems = maxCacheItems;
            methodResult(@"success");
        },
        
        @"TXLivePlayConfig::set_headers": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayConfig::set_headers");
            }
        
            // args
            // jsonable arg
            NSDictionary* headers = (NSDictionary*) args[@"headers"];
        
            // ref
            TXLivePlayConfig* ref = (TXLivePlayConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.headers = headers;
            methodResult(@"success");
        },
        
        @"TXVodPlayer::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayer::set_delegate");
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.delegate = weakSelf;
            methodResult(@"success");
        },
        
        @"TXVodPlayer::set_vodDelegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayer::set_vodDelegate");
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.vodDelegate = weakSelf;
            methodResult(@"success");
        },
        
        @"TXVodPlayer::set_videoProcessDelegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayer::set_videoProcessDelegate");
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoProcessDelegate = weakSelf;
            methodResult(@"success");
        },
        
        @"TXVodPlayer::set_enableHWAcceleration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayer::set_enableHWAcceleration");
            }
        
            // args
            // jsonable arg
            BOOL enableHWAcceleration = [args[@"enableHWAcceleration"] boolValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.enableHWAcceleration = enableHWAcceleration;
            methodResult(@"success");
        },
        
        @"TXVodPlayer::set_config": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayer::set_config");
            }
        
            // args
            // ref arg
            TXVodPlayConfig* config = (TXVodPlayConfig*) (args[@"config"] == [NSNull null] ? nil : args[@"config"]);
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.config = config;
            methodResult(@"success");
        },
        
        @"TXVodPlayer::set_isAutoPlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayer::set_isAutoPlay");
            }
        
            // args
            // jsonable arg
            BOOL isAutoPlay = [args[@"isAutoPlay"] boolValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.isAutoPlay = isAutoPlay;
            methodResult(@"success");
        },
        
        @"TXVodPlayer::set_token": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayer::set_token");
            }
        
            // args
            // jsonable arg
            NSString* token = (NSString*) args[@"token"];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.token = token;
            methodResult(@"success");
        },
        
        @"TXVodPlayer::set_loop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXVodPlayer::set_loop");
            }
        
            // args
            // jsonable arg
            BOOL loop = [args[@"loop"] boolValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.loop = loop;
            methodResult(@"success");
        },
        
        @"TXBitrateItem::set_index": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXBitrateItem::set_index");
            }
        
            // args
            // jsonable arg
            NSInteger index = [args[@"index"] longValue];
        
            // ref
            TXBitrateItem* ref = (TXBitrateItem*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.index = index;
            methodResult(@"success");
        },
        
        @"TXBitrateItem::set_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXBitrateItem::set_width");
            }
        
            // args
            // jsonable arg
            NSInteger width = [args[@"width"] longValue];
        
            // ref
            TXBitrateItem* ref = (TXBitrateItem*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.width = width;
            methodResult(@"success");
        },
        
        @"TXBitrateItem::set_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXBitrateItem::set_height");
            }
        
            // args
            // jsonable arg
            NSInteger height = [args[@"height"] longValue];
        
            // ref
            TXBitrateItem* ref = (TXBitrateItem*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.height = height;
            methodResult(@"success");
        },
        
        @"TXBitrateItem::set_bitrate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXBitrateItem::set_bitrate");
            }
        
            // args
            // jsonable arg
            NSInteger bitrate = [args[@"bitrate"] longValue];
        
            // ref
            TXBitrateItem* ref = (TXBitrateItem*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.bitrate = bitrate;
            methodResult(@"success");
        },
        
        @"TXPlayerAuthParams::set_appId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXPlayerAuthParams::set_appId");
            }
        
            // args
            // jsonable arg
            int appId = [args[@"appId"] intValue];
        
            // ref
            TXPlayerAuthParams* ref = (TXPlayerAuthParams*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appId = appId;
            methodResult(@"success");
        },
        
        @"TXPlayerAuthParams::set_fileId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXPlayerAuthParams::set_fileId");
            }
        
            // args
            // jsonable arg
            NSString* fileId = (NSString*) args[@"fileId"];
        
            // ref
            TXPlayerAuthParams* ref = (TXPlayerAuthParams*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.fileId = fileId;
            methodResult(@"success");
        },
        
        @"TXPlayerAuthParams::set_timeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXPlayerAuthParams::set_timeout");
            }
        
            // args
            // jsonable arg
            NSString* timeout = (NSString*) args[@"timeout"];
        
            // ref
            TXPlayerAuthParams* ref = (TXPlayerAuthParams*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.timeout = timeout;
            methodResult(@"success");
        },
        
        @"TXPlayerAuthParams::set_exper": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXPlayerAuthParams::set_exper");
            }
        
            // args
            // jsonable arg
            int exper = [args[@"exper"] intValue];
        
            // ref
            TXPlayerAuthParams* ref = (TXPlayerAuthParams*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.exper = exper;
            methodResult(@"success");
        },
        
        @"TXPlayerAuthParams::set_us": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXPlayerAuthParams::set_us");
            }
        
            // args
            // jsonable arg
            NSString* us = (NSString*) args[@"us"];
        
            // ref
            TXPlayerAuthParams* ref = (TXPlayerAuthParams*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.us = us;
            methodResult(@"success");
        },
        
        @"TXPlayerAuthParams::set_sign": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXPlayerAuthParams::set_sign");
            }
        
            // args
            // jsonable arg
            NSString* sign = (NSString*) args[@"sign"];
        
            // ref
            TXPlayerAuthParams* ref = (TXPlayerAuthParams*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.sign = sign;
            methodResult(@"success");
        },
        
        @"TXPlayerAuthParams::set_https": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXPlayerAuthParams::set_https");
            }
        
            // args
            // jsonable arg
            BOOL https = [args[@"https"] boolValue];
        
            // ref
            TXPlayerAuthParams* ref = (TXPlayerAuthParams*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.https = https;
            methodResult(@"success");
        },
        
        @"TXLivePlayer::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayer::set_delegate");
            }
        
            // args
        
        
            // ref
            TXLivePlayer* ref = (TXLivePlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.delegate = weakSelf;
            methodResult(@"success");
        },
        
        @"TXLivePlayer::set_videoProcessDelegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayer::set_videoProcessDelegate");
            }
        
            // args
        
        
            // ref
            TXLivePlayer* ref = (TXLivePlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoProcessDelegate = weakSelf;
            methodResult(@"success");
        },
        
        @"TXLivePlayer::set_audioRawDataDelegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayer::set_audioRawDataDelegate");
            }
        
            // args
        
        
            // ref
            TXLivePlayer* ref = (TXLivePlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.audioRawDataDelegate = weakSelf;
            methodResult(@"success");
        },
        
        @"TXLivePlayer::set_enableHWAcceleration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayer::set_enableHWAcceleration");
            }
        
            // args
            // jsonable arg
            BOOL enableHWAcceleration = [args[@"enableHWAcceleration"] boolValue];
        
            // ref
            TXLivePlayer* ref = (TXLivePlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.enableHWAcceleration = enableHWAcceleration;
            methodResult(@"success");
        },
        
        @"TXLivePlayer::set_config": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayer::set_config");
            }
        
            // args
            // ref arg
            TXLivePlayConfig* config = (TXLivePlayConfig*) (args[@"config"] == [NSNull null] ? nil : args[@"config"]);
        
            // ref
            TXLivePlayer* ref = (TXLivePlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.config = config;
            methodResult(@"success");
        },
        
        @"TXLivePlayer::set_recordDelegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayer::set_recordDelegate");
            }
        
            // args
        
        
            // ref
            TXLivePlayer* ref = (TXLivePlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.recordDelegate = weakSelf;
            methodResult(@"success");
        },
        
        @"TXLivePlayer::set_isAutoPlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXLivePlayer::set_isAutoPlay");
            }
        
            // args
            // jsonable arg
            BOOL isAutoPlay = [args[@"isAutoPlay"] boolValue];
        
            // ref
            TXLivePlayer* ref = (TXLivePlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.isAutoPlay = isAutoPlay;
            methodResult(@"success");
        },
        
        @"TXRecordResult::set_retCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXRecordResult::set_retCode");
            }
        
            // args
            // enum arg
            TXRecordResultCode retCode = (TXRecordResultCode) [args[@"retCode"] integerValue];
        
            // ref
            TXRecordResult* ref = (TXRecordResult*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.retCode = retCode;
            methodResult(@"success");
        },
        
        @"TXRecordResult::set_descMsg": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXRecordResult::set_descMsg");
            }
        
            // args
            // jsonable arg
            NSString* descMsg = (NSString*) args[@"descMsg"];
        
            // ref
            TXRecordResult* ref = (TXRecordResult*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.descMsg = descMsg;
            methodResult(@"success");
        },
        
        @"TXRecordResult::set_videoPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXRecordResult::set_videoPath");
            }
        
            // args
            // jsonable arg
            NSString* videoPath = (NSString*) args[@"videoPath"];
        
            // ref
            TXRecordResult* ref = (TXRecordResult*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoPath = videoPath;
            methodResult(@"success");
        },
        
        @"TXRecordResult::set_coverImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"TXRecordResult::set_coverImage");
            }
        
            // args
            // ref arg
            UIImage* coverImage = (UIImage*) (args[@"coverImage"] == [NSNull null] ? nil : args[@"coverImage"]);
        
            // ref
            TXRecordResult* ref = (TXRecordResult*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.coverImage = coverImage;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoEncoderParam::set_videoResolution": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoEncoderParam::set_videoResolution");
            }
        
            // args
            // enum arg
            V2TXLiveVideoResolution videoResolution = (V2TXLiveVideoResolution) [args[@"videoResolution"] integerValue];
        
            // ref
            V2TXLiveVideoEncoderParam* ref = (V2TXLiveVideoEncoderParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoResolution = videoResolution;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoEncoderParam::set_videoResolutionMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoEncoderParam::set_videoResolutionMode");
            }
        
            // args
            // enum arg
            V2TXLiveVideoResolutionMode videoResolutionMode = (V2TXLiveVideoResolutionMode) [args[@"videoResolutionMode"] integerValue];
        
            // ref
            V2TXLiveVideoEncoderParam* ref = (V2TXLiveVideoEncoderParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoResolutionMode = videoResolutionMode;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoEncoderParam::set_videoFps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoEncoderParam::set_videoFps");
            }
        
            // args
            // jsonable arg
            int videoFps = [args[@"videoFps"] intValue];
        
            // ref
            V2TXLiveVideoEncoderParam* ref = (V2TXLiveVideoEncoderParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoFps = videoFps;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoEncoderParam::set_videoBitrate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoEncoderParam::set_videoBitrate");
            }
        
            // args
            // jsonable arg
            int videoBitrate = [args[@"videoBitrate"] intValue];
        
            // ref
            V2TXLiveVideoEncoderParam* ref = (V2TXLiveVideoEncoderParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoBitrate = videoBitrate;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoEncoderParam::set_minVideoBitrate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoEncoderParam::set_minVideoBitrate");
            }
        
            // args
            // jsonable arg
            int minVideoBitrate = [args[@"minVideoBitrate"] intValue];
        
            // ref
            V2TXLiveVideoEncoderParam* ref = (V2TXLiveVideoEncoderParam*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.minVideoBitrate = minVideoBitrate;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoFrame::set_pixelFormat": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoFrame::set_pixelFormat");
            }
        
            // args
            // enum arg
            V2TXLivePixelFormat pixelFormat = (V2TXLivePixelFormat) [args[@"pixelFormat"] integerValue];
        
            // ref
            V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.pixelFormat = pixelFormat;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoFrame::set_bufferType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoFrame::set_bufferType");
            }
        
            // args
            // enum arg
            V2TXLiveBufferType bufferType = (V2TXLiveBufferType) [args[@"bufferType"] integerValue];
        
            // ref
            V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.bufferType = bufferType;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoFrame::set_data": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoFrame::set_data");
            }
        
            // args
            // ref arg
            NSData* data = (NSData*) (args[@"data"] == [NSNull null] ? nil : args[@"data"]);
        
            // ref
            V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.data = data;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoFrame::set_pixelBuffer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoFrame::set_pixelBuffer");
            }
        
            // args
            // ref arg
            NSValue* pixelBuffer = (NSValue*) (args[@"pixelBuffer"] == [NSNull null] ? nil : args[@"pixelBuffer"]);
        
            // ref
            V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.pixelBuffer = [pixelBuffer pointerValue];
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoFrame::set_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoFrame::set_width");
            }
        
            // args
            // jsonable arg
            NSUInteger width = [args[@"width"] unsignedIntegerValue];
        
            // ref
            V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.width = width;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoFrame::set_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoFrame::set_height");
            }
        
            // args
            // jsonable arg
            NSUInteger height = [args[@"height"] unsignedIntegerValue];
        
            // ref
            V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.height = height;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoFrame::set_rotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoFrame::set_rotation");
            }
        
            // args
            // enum arg
            V2TXLiveRotation rotation = (V2TXLiveRotation) [args[@"rotation"] integerValue];
        
            // ref
            V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.rotation = rotation;
            methodResult(@"success");
        },
        
        @"V2TXLiveVideoFrame::set_textureId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveVideoFrame::set_textureId");
            }
        
            // args
            // jsonable arg
            GLuint textureId = [args[@"textureId"] unsignedIntegerValue];
        
            // ref
            V2TXLiveVideoFrame* ref = (V2TXLiveVideoFrame*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.textureId = textureId;
            methodResult(@"success");
        },
        
        @"V2TXLiveAudioFrame::set_data": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveAudioFrame::set_data");
            }
        
            // args
            // ref arg
            NSData* data = (NSData*) (args[@"data"] == [NSNull null] ? nil : args[@"data"]);
        
            // ref
            V2TXLiveAudioFrame* ref = (V2TXLiveAudioFrame*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.data = data;
            methodResult(@"success");
        },
        
        @"V2TXLiveAudioFrame::set_sampleRate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveAudioFrame::set_sampleRate");
            }
        
            // args
            // jsonable arg
            int sampleRate = [args[@"sampleRate"] intValue];
        
            // ref
            V2TXLiveAudioFrame* ref = (V2TXLiveAudioFrame*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.sampleRate = sampleRate;
            methodResult(@"success");
        },
        
        @"V2TXLiveAudioFrame::set_channel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveAudioFrame::set_channel");
            }
        
            // args
            // jsonable arg
            int channel = [args[@"channel"] intValue];
        
            // ref
            V2TXLiveAudioFrame* ref = (V2TXLiveAudioFrame*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.channel = channel;
            methodResult(@"success");
        },
        
        @"V2TXLivePusherStatistics::set_appCpu": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePusherStatistics::set_appCpu");
            }
        
            // args
            // jsonable arg
            NSUInteger appCpu = [args[@"appCpu"] unsignedIntegerValue];
        
            // ref
            V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appCpu = appCpu;
            methodResult(@"success");
        },
        
        @"V2TXLivePusherStatistics::set_systemCpu": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePusherStatistics::set_systemCpu");
            }
        
            // args
            // jsonable arg
            NSUInteger systemCpu = [args[@"systemCpu"] unsignedIntegerValue];
        
            // ref
            V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.systemCpu = systemCpu;
            methodResult(@"success");
        },
        
        @"V2TXLivePusherStatistics::set_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePusherStatistics::set_width");
            }
        
            // args
            // jsonable arg
            NSUInteger width = [args[@"width"] unsignedIntegerValue];
        
            // ref
            V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.width = width;
            methodResult(@"success");
        },
        
        @"V2TXLivePusherStatistics::set_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePusherStatistics::set_height");
            }
        
            // args
            // jsonable arg
            NSUInteger height = [args[@"height"] unsignedIntegerValue];
        
            // ref
            V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.height = height;
            methodResult(@"success");
        },
        
        @"V2TXLivePusherStatistics::set_fps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePusherStatistics::set_fps");
            }
        
            // args
            // jsonable arg
            NSUInteger fps = [args[@"fps"] unsignedIntegerValue];
        
            // ref
            V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.fps = fps;
            methodResult(@"success");
        },
        
        @"V2TXLivePusherStatistics::set_videoBitrate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePusherStatistics::set_videoBitrate");
            }
        
            // args
            // jsonable arg
            NSUInteger videoBitrate = [args[@"videoBitrate"] unsignedIntegerValue];
        
            // ref
            V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoBitrate = videoBitrate;
            methodResult(@"success");
        },
        
        @"V2TXLivePusherStatistics::set_audioBitrate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePusherStatistics::set_audioBitrate");
            }
        
            // args
            // jsonable arg
            NSUInteger audioBitrate = [args[@"audioBitrate"] unsignedIntegerValue];
        
            // ref
            V2TXLivePusherStatistics* ref = (V2TXLivePusherStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.audioBitrate = audioBitrate;
            methodResult(@"success");
        },
        
        @"V2TXLivePlayerStatistics::set_appCpu": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePlayerStatistics::set_appCpu");
            }
        
            // args
            // jsonable arg
            NSUInteger appCpu = [args[@"appCpu"] unsignedIntegerValue];
        
            // ref
            V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appCpu = appCpu;
            methodResult(@"success");
        },
        
        @"V2TXLivePlayerStatistics::set_systemCpu": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePlayerStatistics::set_systemCpu");
            }
        
            // args
            // jsonable arg
            NSUInteger systemCpu = [args[@"systemCpu"] unsignedIntegerValue];
        
            // ref
            V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.systemCpu = systemCpu;
            methodResult(@"success");
        },
        
        @"V2TXLivePlayerStatistics::set_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePlayerStatistics::set_width");
            }
        
            // args
            // jsonable arg
            NSUInteger width = [args[@"width"] unsignedIntegerValue];
        
            // ref
            V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.width = width;
            methodResult(@"success");
        },
        
        @"V2TXLivePlayerStatistics::set_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePlayerStatistics::set_height");
            }
        
            // args
            // jsonable arg
            NSUInteger height = [args[@"height"] unsignedIntegerValue];
        
            // ref
            V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.height = height;
            methodResult(@"success");
        },
        
        @"V2TXLivePlayerStatistics::set_fps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePlayerStatistics::set_fps");
            }
        
            // args
            // jsonable arg
            NSUInteger fps = [args[@"fps"] unsignedIntegerValue];
        
            // ref
            V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.fps = fps;
            methodResult(@"success");
        },
        
        @"V2TXLivePlayerStatistics::set_videoBitrate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePlayerStatistics::set_videoBitrate");
            }
        
            // args
            // jsonable arg
            NSUInteger videoBitrate = [args[@"videoBitrate"] unsignedIntegerValue];
        
            // ref
            V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoBitrate = videoBitrate;
            methodResult(@"success");
        },
        
        @"V2TXLivePlayerStatistics::set_audioBitrate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLivePlayerStatistics::set_audioBitrate");
            }
        
            // args
            // jsonable arg
            NSUInteger audioBitrate = [args[@"audioBitrate"] unsignedIntegerValue];
        
            // ref
            V2TXLivePlayerStatistics* ref = (V2TXLivePlayerStatistics*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.audioBitrate = audioBitrate;
            methodResult(@"success");
        },
        
        @"V2TXLiveMixStream::set_userId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveMixStream::set_userId");
            }
        
            // args
            // jsonable arg
            NSString* userId = (NSString*) args[@"userId"];
        
            // ref
            V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.userId = userId;
            methodResult(@"success");
        },
        
        @"V2TXLiveMixStream::set_streamId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveMixStream::set_streamId");
            }
        
            // args
            // jsonable arg
            NSString* streamId = (NSString*) args[@"streamId"];
        
            // ref
            V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.streamId = streamId;
            methodResult(@"success");
        },
        
        @"V2TXLiveMixStream::set_x": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveMixStream::set_x");
            }
        
            // args
            // jsonable arg
            NSInteger x = [args[@"x"] longValue];
        
            // ref
            V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.x = x;
            methodResult(@"success");
        },
        
        @"V2TXLiveMixStream::set_y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveMixStream::set_y");
            }
        
            // args
            // jsonable arg
            NSInteger y = [args[@"y"] longValue];
        
            // ref
            V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.y = y;
            methodResult(@"success");
        },
        
        @"V2TXLiveMixStream::set_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveMixStream::set_width");
            }
        
            // args
            // jsonable arg
            NSInteger width = [args[@"width"] longValue];
        
            // ref
            V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.width = width;
            methodResult(@"success");
        },
        
        @"V2TXLiveMixStream::set_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveMixStream::set_height");
            }
        
            // args
            // jsonable arg
            NSInteger height = [args[@"height"] longValue];
        
            // ref
            V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.height = height;
            methodResult(@"success");
        },
        
        @"V2TXLiveMixStream::set_zOrder": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveMixStream::set_zOrder");
            }
        
            // args
            // jsonable arg
            NSUInteger zOrder = [args[@"zOrder"] unsignedIntegerValue];
        
            // ref
            V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.zOrder = zOrder;
            methodResult(@"success");
        },
        
        @"V2TXLiveMixStream::set_inputType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveMixStream::set_inputType");
            }
        
            // args
            // enum arg
            V2TXLiveMixInputType inputType = (V2TXLiveMixInputType) [args[@"inputType"] integerValue];
        
            // ref
            V2TXLiveMixStream* ref = (V2TXLiveMixStream*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.inputType = inputType;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_videoWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_videoWidth");
            }
        
            // args
            // jsonable arg
            NSUInteger videoWidth = [args[@"videoWidth"] unsignedIntegerValue];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoWidth = videoWidth;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_videoHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_videoHeight");
            }
        
            // args
            // jsonable arg
            NSUInteger videoHeight = [args[@"videoHeight"] unsignedIntegerValue];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoHeight = videoHeight;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_videoBitrate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_videoBitrate");
            }
        
            // args
            // jsonable arg
            NSUInteger videoBitrate = [args[@"videoBitrate"] unsignedIntegerValue];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoBitrate = videoBitrate;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_videoFramerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_videoFramerate");
            }
        
            // args
            // jsonable arg
            NSUInteger videoFramerate = [args[@"videoFramerate"] unsignedIntegerValue];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoFramerate = videoFramerate;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_videoGOP": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_videoGOP");
            }
        
            // args
            // jsonable arg
            NSUInteger videoGOP = [args[@"videoGOP"] unsignedIntegerValue];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.videoGOP = videoGOP;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_backgroundColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_backgroundColor");
            }
        
            // args
            // jsonable arg
            NSUInteger backgroundColor = [args[@"backgroundColor"] unsignedIntegerValue];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.backgroundColor = backgroundColor;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_backgroundImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_backgroundImage");
            }
        
            // args
            // jsonable arg
            NSString* backgroundImage = (NSString*) args[@"backgroundImage"];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.backgroundImage = backgroundImage;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_audioSampleRate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_audioSampleRate");
            }
        
            // args
            // jsonable arg
            NSUInteger audioSampleRate = [args[@"audioSampleRate"] unsignedIntegerValue];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.audioSampleRate = audioSampleRate;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_audioBitrate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_audioBitrate");
            }
        
            // args
            // jsonable arg
            NSUInteger audioBitrate = [args[@"audioBitrate"] unsignedIntegerValue];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.audioBitrate = audioBitrate;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_audioChannels": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_audioChannels");
            }
        
            // args
            // jsonable arg
            NSUInteger audioChannels = [args[@"audioChannels"] unsignedIntegerValue];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.audioChannels = audioChannels;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_mixStreams": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_mixStreams");
            }
        
            // args
            // list arg
            NSArray<V2TXLiveMixStream*>* mixStreams = (NSArray<V2TXLiveMixStream*>*) args[@"mixStreams"];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.mixStreams = mixStreams;
            methodResult(@"success");
        },
        
        @"V2TXLiveTranscodingConfig::set_outputStreamId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"V2TXLiveTranscodingConfig::set_outputStreamId");
            }
        
            // args
            // jsonable arg
            NSString* outputStreamId = (NSString*) args[@"outputStreamId"];
        
            // ref
            V2TXLiveTranscodingConfig* ref = (V2TXLiveTranscodingConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.outputStreamId = outputStreamId;
            methodResult(@"success");
        },
        
    };
}

@end
