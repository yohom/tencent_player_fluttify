//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler0.h"
#import "FluttifyMessageCodec.h"
#import <TXLiteAVSDK_Player/TXLiteAVSDK.h>
#import "TXVodDownloadDelegate_Anonymous.h"
#import "TXVodPlayListener_Anonymous.h"
#import "TXVodPreloadManagerDelegate_Anonymous.h"
#import "TXAudioCustomProcessDelegate_Anonymous.h"
#import "TXAudioRawDataDelegate_Anonymous.h"
#import "TXVideoCustomProcessDelegate_Anonymous.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSString*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation TencentPlayerFluttifyPlugin (SubHandler0)
- (NSDictionary<NSString*, Handler>*) getSubHandler0 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"TXAudioEffectManager::enableVoiceEarMonitor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::enableVoiceEarMonitor(%@)", args);
            }
        
            // args
            // jsonable arg
            BOOL enable = [args[@"enable"] boolValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref enableVoiceEarMonitor : enable];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::setVoiceEarMonitorVolume": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setVoiceEarMonitorVolume(%@)", args);
            }
        
            // args
            // jsonable arg
            NSInteger volume = [args[@"volume"] longValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setVoiceEarMonitorVolume : volume];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::setVoiceReverbType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setVoiceReverbType(%@)", args);
            }
        
            // args
            // enum arg
            TXVoiceReverbType reverbType = (TXVoiceReverbType) [args[@"reverbType"] integerValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setVoiceReverbType : reverbType];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::setVoiceChangerType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setVoiceChangerType(%@)", args);
            }
        
            // args
            // enum arg
            TXVoiceChangeType changerType = (TXVoiceChangeType) [args[@"changerType"] integerValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setVoiceChangerType : changerType];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::setVoiceVolume": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setVoiceVolume(%@)", args);
            }
        
            // args
            // jsonable arg
            NSInteger volume = [args[@"volume"] longValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setVoiceVolume : volume];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::setVoicePitch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setVoicePitch(%@)", args);
            }
        
            // args
            // jsonable arg
            double pitch = [args[@"pitch"] doubleValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setVoicePitch : pitch];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::startPlayMusic_onStart_onProgress_onComplete": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::startPlayMusic_onStart_onProgress_onComplete(%@)", args);
            }
        
            // args
            // ref arg
            TXAudioMusicParam* musicParam = (TXAudioMusicParam*) (args[@"musicParam"] == [NSNull null] ? nil : args[@"musicParam"]);
        
        
        
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref startPlayMusic : musicParam onStart: ^(NSInteger errCode) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"TXAudioMusicStartBlock::Callback@%@:%@", NSStringFromClass([ref class]), @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // primitive callback arg
                NSNumber* argerrCode = @(errCode);
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"TXAudioMusicStartBlock" arguments:@{@"errCode": argerrCode == nil ? [NSNull null] : argerrCode}];
                });
        
            } onProgress: ^(NSInteger progressMs, NSInteger durationMs) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"TXAudioMusicProgressBlock::Callback@%@:%@", NSStringFromClass([ref class]), @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // primitive callback arg
                NSNumber* argprogressMs = @(progressMs);
                // primitive callback arg
                NSNumber* argdurationMs = @(durationMs);
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"TXAudioMusicProgressBlock_" arguments:@{@"progressMs": argprogressMs == nil ? [NSNull null] : argprogressMs, @"durationMs": argdurationMs == nil ? [NSNull null] : argdurationMs}];
                });
        
            } onComplete: ^(NSInteger errCode) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"TXAudioMusicCompleteBlock::Callback@%@:%@", NSStringFromClass([ref class]), @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // primitive callback arg
                NSNumber* argerrCode = @(errCode);
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"TXAudioMusicCompleteBlock" arguments:@{@"errCode": argerrCode == nil ? [NSNull null] : argerrCode}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::stopPlayMusic": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::stopPlayMusic(%@)", args);
            }
        
            // args
            // jsonable arg
            int32_t id = [args[@"id"] intValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref stopPlayMusic : id];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::pausePlayMusic": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::pausePlayMusic(%@)", args);
            }
        
            // args
            // jsonable arg
            int32_t id = [args[@"id"] intValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref pausePlayMusic : id];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::resumePlayMusic": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::resumePlayMusic(%@)", args);
            }
        
            // args
            // jsonable arg
            int32_t id = [args[@"id"] intValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref resumePlayMusic : id];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::setAllMusicVolume": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setAllMusicVolume(%@)", args);
            }
        
            // args
            // jsonable arg
            NSInteger volume = [args[@"volume"] longValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setAllMusicVolume : volume];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::setMusicPublishVolume_volume": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setMusicPublishVolume_volume(%@)", args);
            }
        
            // args
            // jsonable arg
            int32_t id = [args[@"id"] intValue];
            // jsonable arg
            NSInteger volume = [args[@"volume"] longValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setMusicPublishVolume : id volume: volume];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::setMusicPlayoutVolume_volume": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setMusicPlayoutVolume_volume(%@)", args);
            }
        
            // args
            // jsonable arg
            int32_t id = [args[@"id"] intValue];
            // jsonable arg
            NSInteger volume = [args[@"volume"] longValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setMusicPlayoutVolume : id volume: volume];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::setMusicPitch_pitch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setMusicPitch_pitch(%@)", args);
            }
        
            // args
            // jsonable arg
            int32_t id = [args[@"id"] intValue];
            // jsonable arg
            double pitch = [args[@"pitch"] doubleValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setMusicPitch : id pitch: pitch];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::setMusicSpeedRate_speedRate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setMusicSpeedRate_speedRate(%@)", args);
            }
        
            // args
            // jsonable arg
            int32_t id = [args[@"id"] intValue];
            // jsonable arg
            double speedRate = [args[@"speedRate"] doubleValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setMusicSpeedRate : id speedRate: speedRate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::getMusicCurrentPosInMS": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::getMusicCurrentPosInMS(%@)", args);
            }
        
            // args
            // jsonable arg
            int32_t id = [args[@"id"] intValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSInteger result = [ref getMusicCurrentPosInMS: id];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::getMusicDurationInMS": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::getMusicDurationInMS(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* path = (NSString*) args[@"path"];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSInteger result = [ref getMusicDurationInMS: path];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::seekMusicToPosInMS_pts": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::seekMusicToPosInMS_pts(%@)", args);
            }
        
            // args
            // jsonable arg
            int32_t id = [args[@"id"] intValue];
            // jsonable arg
            NSInteger pts = [args[@"pts"] longValue];
        
            // ref
            TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref seekMusicToPosInMS : id pts: pts];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodDownloadMediaInfo::isDownloadFinished": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadMediaInfo::isDownloadFinished(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            BOOL result = [ref isDownloadFinished];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::shareInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::shareInstance(%@)", args);
            }
        
            // args
        
        
            // ref
        
        
            // invoke native method
            TXVodDownloadManager* result = [TXVodDownloadManager shareInstance];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::setDownloadPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::setDownloadPath(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* path = (NSString*) args[@"path"];
        
            // ref
            TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setDownloadPath : path];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::startDownload": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::startDownload(%@)", args);
            }
        
            // args
            // ref arg
            TXVodDownloadDataSource* source = (TXVodDownloadDataSource*) (args[@"source"] == [NSNull null] ? nil : args[@"source"]);
        
            // ref
            TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            TXVodDownloadMediaInfo* result = [ref startDownload: source];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::startDownload_url": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::startDownload_url(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* username = (NSString*) args[@"username"];
            // jsonable arg
            NSString* url = (NSString*) args[@"url"];
        
            // ref
            TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            TXVodDownloadMediaInfo* result = [ref startDownload: username url: url];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::stopDownload": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::stopDownload(%@)", args);
            }
        
            // args
            // ref arg
            TXVodDownloadMediaInfo* media = (TXVodDownloadMediaInfo*) (args[@"media"] == [NSNull null] ? nil : args[@"media"]);
        
            // ref
            TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref stopDownload : media];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::deleteDownloadFile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::deleteDownloadFile(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* playPath = (NSString*) args[@"playPath"];
        
            // ref
            TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            BOOL result = [ref deleteDownloadFile: playPath];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::deleteDownloadMediaInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::deleteDownloadMediaInfo(%@)", args);
            }
        
            // args
            // ref arg
            TXVodDownloadMediaInfo* downloadMediaInfo = (TXVodDownloadMediaInfo*) (args[@"downloadMediaInfo"] == [NSNull null] ? nil : args[@"downloadMediaInfo"]);
        
            // ref
            TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref deleteDownloadMediaInfo : downloadMediaInfo];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::getDownloadMediaInfoList": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::getDownloadMediaInfoList(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSArray<TXVodDownloadMediaInfo*>* result = [ref getDownloadMediaInfoList];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::getDownloadMediaInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::getDownloadMediaInfo(%@)", args);
            }
        
            // args
            // ref arg
            TXVodDownloadMediaInfo* media = (TXVodDownloadMediaInfo*) (args[@"media"] == [NSNull null] ? nil : args[@"media"]);
        
            // ref
            TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            TXVodDownloadMediaInfo* result = [ref getDownloadMediaInfo: media];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::getOverlayKeyIv_userName_fileId_qualityId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::getOverlayKeyIv_userName_fileId_qualityId(%@)", args);
            }
        
            // args
            // jsonable arg
            int appId = [args[@"appId"] intValue];
            // jsonable arg
            NSString* userName = (NSString*) args[@"userName"];
            // jsonable arg
            NSString* fileId = (NSString*) args[@"fileId"];
            // jsonable arg
            int qualityId = [args[@"qualityId"] intValue];
        
            // ref
            TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSString* result = [ref getOverlayKeyIv: appId userName: userName fileId: fileId qualityId: qualityId];
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::genRandomHexStringForHls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::genRandomHexStringForHls(%@)", args);
            }
        
            // args
        
        
            // ref
        
        
            // invoke native method
            NSString* result = [TXVodDownloadManager genRandomHexStringForHls];
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"TXVodDownloadManager::encryptHexStringHls": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::encryptHexStringHls(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* originHexStr = (NSString*) args[@"originHexStr"];
        
            // ref
        
        
            // invoke native method
            NSString* result = [TXVodDownloadManager encryptHexStringHls: originHexStr];
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"TXVodPreloadManager::sharedManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPreloadManager::sharedManager(%@)", args);
            }
        
            // args
        
        
            // ref
        
        
            // invoke native method
            TXVodPreloadManager* result = [TXVodPreloadManager sharedManager];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"TXVodPreloadManager::startPreload_preloadSize_preferredResolution_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPreloadManager::startPreload_preloadSize_preferredResolution_delegate(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* requestURL = (NSString*) args[@"requestURL"];
            // jsonable arg
            int preloadSizeMB = [args[@"preloadSizeMB"] intValue];
            // jsonable arg
            long preferredResolution = [args[@"preferredResolution"] longValue];
            // ref arg
            id<TXVodPreloadManagerDelegate> delegate = (id<TXVodPreloadManagerDelegate>) (args[@"delegate"] == [NSNull null] ? nil : args[@"delegate"]);
        
            // ref
            TXVodPreloadManager* ref = (TXVodPreloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref startPreload: requestURL preloadSize: preloadSizeMB preferredResolution: preferredResolution delegate: delegate];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPreloadManager::stopPreload": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPreloadManager::stopPreload(%@)", args);
            }
        
            // args
            // jsonable arg
            int taskID = [args[@"taskID"] intValue];
        
            // ref
            TXVodPreloadManager* ref = (TXVodPreloadManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref stopPreload : taskID];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::setupVideoWidget_insertIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setupVideoWidget_insertIndex(%@)", args);
            }
        
            // args
            // ref arg
            UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
            // jsonable arg
            unsigned int idx = [args[@"idx"] unsignedIntValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setupVideoWidget : view insertIndex: idx];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::removeVideoWidget": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::removeVideoWidget(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref removeVideoWidget ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::setStartTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setStartTime(%@)", args);
            }
        
            // args
            // jsonable arg
            CGFloat startTime = [args[@"startTime"] floatValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setStartTime : startTime];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::startPlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::startPlay(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* url = (NSString*) args[@"url"];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref startPlay: url];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::startPlayDrm": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::startPlayDrm(%@)", args);
            }
        
            // args
            // ref arg
            TXPlayerDrmBuilder* drmBuilder = (TXPlayerDrmBuilder*) (args[@"drmBuilder"] == [NSNull null] ? nil : args[@"drmBuilder"]);
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref startPlayDrm: drmBuilder];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::startPlayWithParams": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::startPlayWithParams(%@)", args);
            }
        
            // args
            // ref arg
            TXPlayerAuthParams* params = (TXPlayerAuthParams*) (args[@"params"] == [NSNull null] ? nil : args[@"params"]);
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref startPlayWithParams: params];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::stopPlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::stopPlay(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref stopPlay];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::isPlaying": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::isPlaying(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            bool result = [ref isPlaying];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::pause": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::pause(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref pause ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::resume": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::resume(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref resume ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::seek": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::seek(%@)", args);
            }
        
            // args
            // jsonable arg
            float time = [args[@"time"] floatValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref seek: time];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::currentPlaybackTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::currentPlaybackTime(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            float result = [ref currentPlaybackTime];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::duration(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            float result = [ref duration];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::playableDuration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::playableDuration(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            float result = [ref playableDuration];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::width(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref width];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::height(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref height];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::setRenderRotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setRenderRotation(%@)", args);
            }
        
            // args
            // enum arg
            TX_Enum_Type_HomeOrientation rotation = (TX_Enum_Type_HomeOrientation) [args[@"rotation"] integerValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setRenderRotation : rotation];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::setRenderMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setRenderMode(%@)", args);
            }
        
            // args
            // enum arg
            TX_Enum_Type_RenderMode renderMode = (TX_Enum_Type_RenderMode) [args[@"renderMode"] integerValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setRenderMode : renderMode];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::setMute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setMute(%@)", args);
            }
        
            // args
            // jsonable arg
            BOOL bEnable = [args[@"bEnable"] boolValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setMute : bEnable];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::setAudioPlayoutVolume": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setAudioPlayoutVolume(%@)", args);
            }
        
            // args
            // jsonable arg
            int volume = [args[@"volume"] intValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setAudioPlayoutVolume : volume];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::snapshot": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::snapshot(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref snapshot : ^(UIImage* __arg_0__) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"void|UIImage*#__arg_0__::Callback@%@:%@", NSStringFromClass([ref class]), @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                UIImage* arg__arg_0__ = __arg_0__;
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"void|UIImage*#__arg_0__" arguments:@{@"__arg_0__": arg__arg_0__ == nil ? [NSNull null] : arg__arg_0__}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::setRate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setRate(%@)", args);
            }
        
            // args
            // jsonable arg
            float rate = [args[@"rate"] floatValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setRate : rate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::supportedBitrates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::supportedBitrates(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSArray<TXBitrateItem*>* result = [ref supportedBitrates];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"TXVodPlayer::bitrateIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::bitrateIndex(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSInteger result = [ref bitrateIndex];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXVodPlayer::setBitrateIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setBitrateIndex(%@)", args);
            }
        
            // args
            // jsonable arg
            NSInteger index = [args[@"index"] longValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setBitrateIndex : index];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::setMirror": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setMirror(%@)", args);
            }
        
            // args
            // jsonable arg
            BOOL isMirror = [args[@"isMirror"] boolValue];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setMirror : isMirror];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::attachTRTC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::attachTRTC(%@)", args);
            }
        
            // args
            // ref arg
            NSObject* trtcCloud = (NSObject*) (args[@"trtcCloud"] == [NSNull null] ? nil : args[@"trtcCloud"]);
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref attachTRTC : trtcCloud];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::detachTRTC": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::detachTRTC(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref detachTRTC ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::publishVideo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::publishVideo(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref publishVideo ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::publishAudio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::publishAudio(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref publishAudio ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::unpublishVideo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::unpublishVideo(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref unpublishVideo ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::unpublishAudio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::unpublishAudio(%@)", args);
            }
        
            // args
        
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref unpublishAudio ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXVodPlayer::getEncryptedPlayKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::getEncryptedPlayKey(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* key = (NSString*) args[@"key"];
        
            // ref
        
        
            // invoke native method
            NSString* result = [TXVodPlayer getEncryptedPlayKey: key];
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"TXVodPlayer::setExtentOptionInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setExtentOptionInfo(%@)", args);
            }
        
            // args
            // jsonable arg
            NSDictionary<NSString*,NSString*>* extInfo = (NSDictionary<NSString*,NSString*>*) args[@"extInfo"];
        
            // ref
            TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setExtentOptionInfo : extInfo];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXDeviceManager::isFrontCamera": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::isFrontCamera(%@)", args);
            }
        
            // args
        
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            BOOL result = [ref isFrontCamera];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXDeviceManager::switchCamera": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::switchCamera(%@)", args);
            }
        
            // args
            // jsonable arg
            BOOL frontCamera = [args[@"frontCamera"] boolValue];
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSInteger result = [ref switchCamera: frontCamera];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXDeviceManager::isCameraZoomSupported": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::isCameraZoomSupported(%@)", args);
            }
        
            // args
        
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            BOOL result = [ref isCameraZoomSupported];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXDeviceManager::getCameraZoomMaxRatio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::getCameraZoomMaxRatio(%@)", args);
            }
        
            // args
        
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            CGFloat result = [ref getCameraZoomMaxRatio];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXDeviceManager::setCameraZoomRatio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::setCameraZoomRatio(%@)", args);
            }
        
            // args
            // jsonable arg
            CGFloat zoomRatio = [args[@"zoomRatio"] floatValue];
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSInteger result = [ref setCameraZoomRatio: zoomRatio];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXDeviceManager::isAutoFocusEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::isAutoFocusEnabled(%@)", args);
            }
        
            // args
        
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            BOOL result = [ref isAutoFocusEnabled];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXDeviceManager::enableCameraAutoFocus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::enableCameraAutoFocus(%@)", args);
            }
        
            // args
            // jsonable arg
            BOOL enabled = [args[@"enabled"] boolValue];
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSInteger result = [ref enableCameraAutoFocus: enabled];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXDeviceManager::setCameraFocusPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::setCameraFocusPosition(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* positionValue = (NSValue*) args[@"position"];
            CGPoint position;
            if (positionValue != nil && (NSNull*) positionValue != [NSNull null]) {
              [positionValue getValue:&position];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"position不能为null"]);
              return;
            }
        
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSInteger result = [ref setCameraFocusPosition: position];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXDeviceManager::isCameraTorchSupported": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::isCameraTorchSupported(%@)", args);
            }
        
            // args
        
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            BOOL result = [ref isCameraTorchSupported];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXDeviceManager::enableCameraTorch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::enableCameraTorch(%@)", args);
            }
        
            // args
            // jsonable arg
            BOOL enabled = [args[@"enabled"] boolValue];
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSInteger result = [ref enableCameraTorch: enabled];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXDeviceManager::setAudioRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::setAudioRoute(%@)", args);
            }
        
            // args
            // enum arg
            TXAudioRoute route = (TXAudioRoute) [args[@"route"] integerValue];
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSInteger result = [ref setAudioRoute: route];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXDeviceManager::setSystemVolumeType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::setSystemVolumeType(%@)", args);
            }
        
            // args
            // enum arg
            TXSystemVolumeType type = (TXSystemVolumeType) [args[@"type"] integerValue];
        
            // ref
            TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSInteger result = [ref setSystemVolumeType: type];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setBeautyStyle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setBeautyStyle(%@)", args);
            }
        
            // args
            // enum arg
            TXBeautyStyle beautyStyle = (TXBeautyStyle) [args[@"beautyStyle"] integerValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setBeautyStyle : beautyStyle];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setBeautyLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setBeautyLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float beautyLevel = [args[@"beautyLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setBeautyLevel : beautyLevel];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setWhitenessLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setWhitenessLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float whitenessLevel = [args[@"whitenessLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setWhitenessLevel : whitenessLevel];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXBeautyManager::enableSharpnessEnhancement": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::enableSharpnessEnhancement(%@)", args);
            }
        
            // args
            // jsonable arg
            BOOL enable = [args[@"enable"] boolValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref enableSharpnessEnhancement : enable];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setRuddyLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setRuddyLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float ruddyLevel = [args[@"ruddyLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setRuddyLevel : ruddyLevel];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setFilter(%@)", args);
            }
        
            // args
            // ref arg
            UIImage* image = (UIImage*) (args[@"image"] == [NSNull null] ? nil : args[@"image"]);
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setFilter : image];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setFilterStrength": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setFilterStrength(%@)", args);
            }
        
            // args
            // jsonable arg
            float strength = [args[@"strength"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setFilterStrength : strength];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setGreenScreenFile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setGreenScreenFile(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* path = (NSString*) args[@"path"];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setGreenScreenFile: path];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setEyeScaleLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setEyeScaleLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float eyeScaleLevel = [args[@"eyeScaleLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setEyeScaleLevel: eyeScaleLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setFaceSlimLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setFaceSlimLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float faceSlimLevel = [args[@"faceSlimLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setFaceSlimLevel: faceSlimLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setFaceVLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setFaceVLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float faceVLevel = [args[@"faceVLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setFaceVLevel: faceVLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setChinLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setChinLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float chinLevel = [args[@"chinLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setChinLevel: chinLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setFaceShortLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setFaceShortLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float faceShortLevel = [args[@"faceShortLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setFaceShortLevel: faceShortLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setFaceNarrowLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setFaceNarrowLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float faceNarrowLevel = [args[@"faceNarrowLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setFaceNarrowLevel: faceNarrowLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setNoseSlimLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setNoseSlimLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float noseSlimLevel = [args[@"noseSlimLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setNoseSlimLevel: noseSlimLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setEyeLightenLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setEyeLightenLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float eyeLightenLevel = [args[@"eyeLightenLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setEyeLightenLevel: eyeLightenLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setToothWhitenLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setToothWhitenLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float toothWhitenLevel = [args[@"toothWhitenLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setToothWhitenLevel: toothWhitenLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setWrinkleRemoveLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setWrinkleRemoveLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float wrinkleRemoveLevel = [args[@"wrinkleRemoveLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setWrinkleRemoveLevel: wrinkleRemoveLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setPounchRemoveLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setPounchRemoveLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float pounchRemoveLevel = [args[@"pounchRemoveLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setPounchRemoveLevel: pounchRemoveLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setSmileLinesRemoveLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setSmileLinesRemoveLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float smileLinesRemoveLevel = [args[@"smileLinesRemoveLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setSmileLinesRemoveLevel: smileLinesRemoveLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setForeheadLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setForeheadLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float foreheadLevel = [args[@"foreheadLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setForeheadLevel: foreheadLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setEyeDistanceLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setEyeDistanceLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float eyeDistanceLevel = [args[@"eyeDistanceLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setEyeDistanceLevel: eyeDistanceLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setEyeAngleLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setEyeAngleLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float eyeAngleLevel = [args[@"eyeAngleLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setEyeAngleLevel: eyeAngleLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setMouthShapeLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setMouthShapeLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float mouthShapeLevel = [args[@"mouthShapeLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setMouthShapeLevel: mouthShapeLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setNoseWingLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setNoseWingLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float noseWingLevel = [args[@"noseWingLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setNoseWingLevel: noseWingLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setNosePositionLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setNosePositionLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float nosePositionLevel = [args[@"nosePositionLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setNosePositionLevel: nosePositionLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setLipsThicknessLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setLipsThicknessLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float lipsThicknessLevel = [args[@"lipsThicknessLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setLipsThicknessLevel: lipsThicknessLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setFaceBeautyLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setFaceBeautyLevel(%@)", args);
            }
        
            // args
            // jsonable arg
            float faceBeautyLevel = [args[@"faceBeautyLevel"] floatValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            int result = [ref setFaceBeautyLevel: faceBeautyLevel];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setMotionTmpl_inDir": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setMotionTmpl_inDir(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* tmplName = (NSString*) args[@"tmplName"];
            // jsonable arg
            NSString* tmplDir = (NSString*) args[@"tmplDir"];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setMotionTmpl : tmplName inDir: tmplDir];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXBeautyManager::setMotionMute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setMotionMute(%@)", args);
            }
        
            // args
            // jsonable arg
            BOOL motionMute = [args[@"motionMute"] boolValue];
        
            // ref
            TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            [ref setMotionMute : motionMute];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXPlayerGlobalSetting::setCacheFolderPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXPlayerGlobalSetting::setCacheFolderPath(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* cacheFolder = (NSString*) args[@"cacheFolder"];
        
            // ref
        
        
            // invoke native method
            [TXPlayerGlobalSetting setCacheFolderPath: cacheFolder];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXPlayerGlobalSetting::cacheFolderPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXPlayerGlobalSetting::cacheFolderPath(%@)", args);
            }
        
            // args
        
        
            // ref
        
        
            // invoke native method
            NSString* result = [TXPlayerGlobalSetting cacheFolderPath];
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"TXPlayerGlobalSetting::setMaxCacheSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXPlayerGlobalSetting::setMaxCacheSize(%@)", args);
            }
        
            // args
            // jsonable arg
            NSInteger maxCacheSizeMB = [args[@"maxCacheSizeMB"] longValue];
        
            // ref
        
        
            // invoke native method
            [TXPlayerGlobalSetting setMaxCacheSize: maxCacheSizeMB];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"TXPlayerGlobalSetting::maxCacheSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXPlayerGlobalSetting::maxCacheSize(%@)", args);
            }
        
            // args
        
        
            // ref
        
        
            // invoke native method
            NSInteger result = [TXPlayerGlobalSetting maxCacheSize];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"TXAudioEffectManager::enableVoiceEarMonitor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::enableVoiceEarMonitor(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enable = [args[@"enable"] boolValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref enableVoiceEarMonitor : enable];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::setVoiceEarMonitorVolume_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setVoiceEarMonitorVolume(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger volume = [args[@"volume"] longValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setVoiceEarMonitorVolume : volume];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::setVoiceReverbType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setVoiceReverbType(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                TXVoiceReverbType reverbType = (TXVoiceReverbType) [args[@"reverbType"] integerValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setVoiceReverbType : reverbType];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::setVoiceChangerType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setVoiceChangerType(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                TXVoiceChangeType changerType = (TXVoiceChangeType) [args[@"changerType"] integerValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setVoiceChangerType : changerType];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::setVoiceVolume_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setVoiceVolume(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger volume = [args[@"volume"] longValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setVoiceVolume : volume];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::setVoicePitch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setVoicePitch(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double pitch = [args[@"pitch"] doubleValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setVoicePitch : pitch];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::stopPlayMusic_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::stopPlayMusic(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int32_t id = [args[@"id"] intValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref stopPlayMusic : id];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::pausePlayMusic_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::pausePlayMusic(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int32_t id = [args[@"id"] intValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref pausePlayMusic : id];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::resumePlayMusic_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::resumePlayMusic(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int32_t id = [args[@"id"] intValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref resumePlayMusic : id];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::setAllMusicVolume_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setAllMusicVolume(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger volume = [args[@"volume"] longValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setAllMusicVolume : volume];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::setMusicPublishVolume_volume_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setMusicPublishVolume_volume(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int32_t id = [args[@"id"] intValue];
                // jsonable arg
                NSInteger volume = [args[@"volume"] longValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setMusicPublishVolume : id volume: volume];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::setMusicPlayoutVolume_volume_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setMusicPlayoutVolume_volume(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int32_t id = [args[@"id"] intValue];
                // jsonable arg
                NSInteger volume = [args[@"volume"] longValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setMusicPlayoutVolume : id volume: volume];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::setMusicPitch_pitch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setMusicPitch_pitch(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int32_t id = [args[@"id"] intValue];
                // jsonable arg
                double pitch = [args[@"pitch"] doubleValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setMusicPitch : id pitch: pitch];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::setMusicSpeedRate_speedRate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::setMusicSpeedRate_speedRate(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int32_t id = [args[@"id"] intValue];
                // jsonable arg
                double speedRate = [args[@"speedRate"] doubleValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setMusicSpeedRate : id speedRate: speedRate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::getMusicCurrentPosInMS_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::getMusicCurrentPosInMS(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int32_t id = [args[@"id"] intValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSInteger result = [ref getMusicCurrentPosInMS: id];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::getMusicDurationInMS_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::getMusicDurationInMS(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* path = (NSString*) args[@"path"];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSInteger result = [ref getMusicDurationInMS: path];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXAudioEffectManager::seekMusicToPosInMS_pts_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXAudioEffectManager::seekMusicToPosInMS_pts(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int32_t id = [args[@"id"] intValue];
                // jsonable arg
                NSInteger pts = [args[@"pts"] longValue];
        
                // ref
                TXAudioEffectManager* ref = (TXAudioEffectManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref seekMusicToPosInMS : id pts: pts];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadMediaInfo::isDownloadFinished_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadMediaInfo::isDownloadFinished(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodDownloadMediaInfo* ref = (TXVodDownloadMediaInfo*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                BOOL result = [ref isDownloadFinished];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::shareInstance_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::shareInstance(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                TXVodDownloadManager* result = [TXVodDownloadManager shareInstance];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::setDownloadPath_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::setDownloadPath(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* path = (NSString*) args[@"path"];
        
                // ref
                TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setDownloadPath : path];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::startDownload_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::startDownload(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                TXVodDownloadDataSource* source = (TXVodDownloadDataSource*) (args[@"source"] == [NSNull null] ? nil : args[@"source"]);
        
                // ref
                TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                TXVodDownloadMediaInfo* result = [ref startDownload: source];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::startDownload_url_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::startDownload_url(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* username = (NSString*) args[@"username"];
                // jsonable arg
                NSString* url = (NSString*) args[@"url"];
        
                // ref
                TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                TXVodDownloadMediaInfo* result = [ref startDownload: username url: url];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::stopDownload_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::stopDownload(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                TXVodDownloadMediaInfo* media = (TXVodDownloadMediaInfo*) (args[@"media"] == [NSNull null] ? nil : args[@"media"]);
        
                // ref
                TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref stopDownload : media];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::deleteDownloadFile_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::deleteDownloadFile(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* playPath = (NSString*) args[@"playPath"];
        
                // ref
                TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                BOOL result = [ref deleteDownloadFile: playPath];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::deleteDownloadMediaInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::deleteDownloadMediaInfo(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                TXVodDownloadMediaInfo* downloadMediaInfo = (TXVodDownloadMediaInfo*) (args[@"downloadMediaInfo"] == [NSNull null] ? nil : args[@"downloadMediaInfo"]);
        
                // ref
                TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref deleteDownloadMediaInfo : downloadMediaInfo];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::getDownloadMediaInfoList_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::getDownloadMediaInfoList(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSArray<TXVodDownloadMediaInfo*>* result = [ref getDownloadMediaInfoList];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::getDownloadMediaInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::getDownloadMediaInfo(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                TXVodDownloadMediaInfo* media = (TXVodDownloadMediaInfo*) (args[@"media"] == [NSNull null] ? nil : args[@"media"]);
        
                // ref
                TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                TXVodDownloadMediaInfo* result = [ref getDownloadMediaInfo: media];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::getOverlayKeyIv_userName_fileId_qualityId_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::getOverlayKeyIv_userName_fileId_qualityId(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int appId = [args[@"appId"] intValue];
                // jsonable arg
                NSString* userName = (NSString*) args[@"userName"];
                // jsonable arg
                NSString* fileId = (NSString*) args[@"fileId"];
                // jsonable arg
                int qualityId = [args[@"qualityId"] intValue];
        
                // ref
                TXVodDownloadManager* ref = (TXVodDownloadManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSString* result = [ref getOverlayKeyIv: appId userName: userName fileId: fileId qualityId: qualityId];
        
                // result
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::genRandomHexStringForHls_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::genRandomHexStringForHls(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                NSString* result = [TXVodDownloadManager genRandomHexStringForHls];
        
                // result
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodDownloadManager::encryptHexStringHls_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodDownloadManager::encryptHexStringHls(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* originHexStr = (NSString*) args[@"originHexStr"];
        
                // ref
        
        
                // invoke native method
                NSString* result = [TXVodDownloadManager encryptHexStringHls: originHexStr];
        
                // result
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPreloadManager::sharedManager_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPreloadManager::sharedManager(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                TXVodPreloadManager* result = [TXVodPreloadManager sharedManager];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPreloadManager::stopPreload_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPreloadManager::stopPreload(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int taskID = [args[@"taskID"] intValue];
        
                // ref
                TXVodPreloadManager* ref = (TXVodPreloadManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref stopPreload : taskID];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::setupVideoWidget_insertIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setupVideoWidget_insertIndex(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
                // jsonable arg
                unsigned int idx = [args[@"idx"] unsignedIntValue];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setupVideoWidget : view insertIndex: idx];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::removeVideoWidget_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::removeVideoWidget(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref removeVideoWidget ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::setStartTime_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setStartTime(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat startTime = [args[@"startTime"] floatValue];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setStartTime : startTime];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::startPlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::startPlay(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* url = (NSString*) args[@"url"];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                int result = [ref startPlay: url];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::startPlayDrm_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::startPlayDrm(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                TXPlayerDrmBuilder* drmBuilder = (TXPlayerDrmBuilder*) (args[@"drmBuilder"] == [NSNull null] ? nil : args[@"drmBuilder"]);
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                int result = [ref startPlayDrm: drmBuilder];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::startPlayWithParams_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::startPlayWithParams(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                TXPlayerAuthParams* params = (TXPlayerAuthParams*) (args[@"params"] == [NSNull null] ? nil : args[@"params"]);
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                int result = [ref startPlayWithParams: params];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::stopPlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::stopPlay(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                int result = [ref stopPlay];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::isPlaying_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::isPlaying(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                bool result = [ref isPlaying];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::pause_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::pause(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref pause ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::resume_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::resume(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref resume ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::seek_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::seek(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float time = [args[@"time"] floatValue];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                int result = [ref seek: time];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::currentPlaybackTime_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::currentPlaybackTime(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                float result = [ref currentPlaybackTime];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::duration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::duration(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                float result = [ref duration];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::playableDuration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::playableDuration(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                float result = [ref playableDuration];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::width_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::width(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                int result = [ref width];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::height_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::height(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                int result = [ref height];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::setRenderRotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setRenderRotation(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                TX_Enum_Type_HomeOrientation rotation = (TX_Enum_Type_HomeOrientation) [args[@"rotation"] integerValue];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setRenderRotation : rotation];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::setRenderMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setRenderMode(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                TX_Enum_Type_RenderMode renderMode = (TX_Enum_Type_RenderMode) [args[@"renderMode"] integerValue];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setRenderMode : renderMode];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::setMute_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setMute(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL bEnable = [args[@"bEnable"] boolValue];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setMute : bEnable];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::setAudioPlayoutVolume_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setAudioPlayoutVolume(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int volume = [args[@"volume"] intValue];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setAudioPlayoutVolume : volume];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::setRate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setRate(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float rate = [args[@"rate"] floatValue];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setRate : rate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::supportedBitrates_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::supportedBitrates(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSArray<TXBitrateItem*>* result = [ref supportedBitrates];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::bitrateIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::bitrateIndex(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSInteger result = [ref bitrateIndex];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::setBitrateIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setBitrateIndex(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger index = [args[@"index"] longValue];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setBitrateIndex : index];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::setMirror_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setMirror(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isMirror = [args[@"isMirror"] boolValue];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setMirror : isMirror];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::attachTRTC_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::attachTRTC(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                NSObject* trtcCloud = (NSObject*) (args[@"trtcCloud"] == [NSNull null] ? nil : args[@"trtcCloud"]);
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref attachTRTC : trtcCloud];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::detachTRTC_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::detachTRTC(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref detachTRTC ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::publishVideo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::publishVideo(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref publishVideo ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::publishAudio_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::publishAudio(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref publishAudio ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::unpublishVideo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::unpublishVideo(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref unpublishVideo ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::unpublishAudio_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::unpublishAudio(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref unpublishAudio ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::getEncryptedPlayKey_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::getEncryptedPlayKey(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* key = (NSString*) args[@"key"];
        
                // ref
        
        
                // invoke native method
                NSString* result = [TXVodPlayer getEncryptedPlayKey: key];
        
                // result
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXVodPlayer::setExtentOptionInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXVodPlayer::setExtentOptionInfo(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSDictionary<NSString*,NSString*>* extInfo = (NSDictionary<NSString*,NSString*>*) args[@"extInfo"];
        
                // ref
                TXVodPlayer* ref = (TXVodPlayer*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setExtentOptionInfo : extInfo];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::isFrontCamera_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::isFrontCamera(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                BOOL result = [ref isFrontCamera];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::switchCamera_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::switchCamera(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL frontCamera = [args[@"frontCamera"] boolValue];
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSInteger result = [ref switchCamera: frontCamera];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::isCameraZoomSupported_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::isCameraZoomSupported(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                BOOL result = [ref isCameraZoomSupported];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::getCameraZoomMaxRatio_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::getCameraZoomMaxRatio(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                CGFloat result = [ref getCameraZoomMaxRatio];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::setCameraZoomRatio_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::setCameraZoomRatio(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat zoomRatio = [args[@"zoomRatio"] floatValue];
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSInteger result = [ref setCameraZoomRatio: zoomRatio];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::isAutoFocusEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::isAutoFocusEnabled(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                BOOL result = [ref isAutoFocusEnabled];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::enableCameraAutoFocus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::enableCameraAutoFocus(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enabled = [args[@"enabled"] boolValue];
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSInteger result = [ref enableCameraAutoFocus: enabled];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::setCameraFocusPosition_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::setCameraFocusPosition(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* positionValue = (NSValue*) args[@"position"];
                CGPoint position;
                if (positionValue != nil && (NSNull*) positionValue != [NSNull null]) {
                  [positionValue getValue:&position];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"position不能为null"]);
                  return;
                }
        
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSInteger result = [ref setCameraFocusPosition: position];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::isCameraTorchSupported_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::isCameraTorchSupported(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                BOOL result = [ref isCameraTorchSupported];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::enableCameraTorch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::enableCameraTorch(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enabled = [args[@"enabled"] boolValue];
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSInteger result = [ref enableCameraTorch: enabled];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::setAudioRoute_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::setAudioRoute(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                TXAudioRoute route = (TXAudioRoute) [args[@"route"] integerValue];
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSInteger result = [ref setAudioRoute: route];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXDeviceManager::setSystemVolumeType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXDeviceManager::setSystemVolumeType(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                TXSystemVolumeType type = (TXSystemVolumeType) [args[@"type"] integerValue];
        
                // ref
                TXDeviceManager* ref = (TXDeviceManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                NSInteger result = [ref setSystemVolumeType: type];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXBeautyManager::setBeautyStyle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setBeautyStyle(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                TXBeautyStyle beautyStyle = (TXBeautyStyle) [args[@"beautyStyle"] integerValue];
        
                // ref
                TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setBeautyStyle : beautyStyle];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXBeautyManager::setBeautyLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setBeautyLevel(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float beautyLevel = [args[@"beautyLevel"] floatValue];
        
                // ref
                TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setBeautyLevel : beautyLevel];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXBeautyManager::setWhitenessLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setWhitenessLevel(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float whitenessLevel = [args[@"whitenessLevel"] floatValue];
        
                // ref
                TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setWhitenessLevel : whitenessLevel];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXBeautyManager::enableSharpnessEnhancement_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::enableSharpnessEnhancement(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enable = [args[@"enable"] boolValue];
        
                // ref
                TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref enableSharpnessEnhancement : enable];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXBeautyManager::setRuddyLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setRuddyLevel(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float ruddyLevel = [args[@"ruddyLevel"] floatValue];
        
                // ref
                TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setRuddyLevel : ruddyLevel];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXBeautyManager::setFilter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setFilter(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* image = (UIImage*) (args[@"image"] == [NSNull null] ? nil : args[@"image"]);
        
                // ref
                TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setFilter : image];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXBeautyManager::setFilterStrength_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setFilterStrength(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float strength = [args[@"strength"] floatValue];
        
                // ref
                TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                [ref setFilterStrength : strength];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXBeautyManager::setGreenScreenFile_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setGreenScreenFile(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* path = (NSString*) args[@"path"];
        
                // ref
                TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                int result = [ref setGreenScreenFile: path];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"TXBeautyManager::setEyeScaleLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: TXBeautyManager::setEyeScaleLevel(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float eyeScaleLevel = [args[@"eyeScaleLevel"] floatValue];
        
                // ref
                TXBeautyManager* ref = (TXBeautyManager*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                // invoke native method
                int result = [ref setEyeScaleLevel: eyeScaleLevel];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
    };
}

@end
