//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////


#import "V2TXLivePremierObserver_Anonymous.h"
#import <Flutter/Flutter.h>
#import <FluttifyMessageCodec.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSString*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation V2TXLivePremierObserver_Anonymous

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
  }

  return self;
}

- (void)onLicenceLoaded : (int)result Reason: (NSString*)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"V2TXLivePremierObserver::Callback@%@", @(self.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"V2TXLivePremierObserver::onLicenceLoaded_Reason");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argresult = @(result);
  // ref callback arg
  NSString* argreason = reason;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::V2TXLivePremierObserver::onLicenceLoaded_Reason" arguments:@{@"result": argresult == nil ? [NSNull null] : argresult, @"reason": argreason == nil ? [NSNull null] : argreason}];
  });
  
}


@end
