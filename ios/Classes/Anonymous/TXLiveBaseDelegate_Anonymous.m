//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////


#import "TXLiveBaseDelegate_Anonymous.h"
#import <Flutter/Flutter.h>
#import <FluttifyMessageCodec.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSString*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation TXLiveBaseDelegate_Anonymous

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
  }

  return self;
}

- (void)onLog : (NSString*)log LogLevel: (int)level WhichModule: (NSString*)module
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"TXLiveBaseDelegate::Callback@%@", @(self.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXLiveBaseDelegate::onLog_LogLevel_WhichModule");
  }

  // convert to jsonable arg
  // ref callback arg
  NSString* arglog = log;
  // primitive callback arg
  NSNumber* arglevel = @(level);
  // ref callback arg
  NSString* argmodule = module;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXLiveBaseDelegate::onLog_LogLevel_WhichModule" arguments:@{@"log": arglog == nil ? [NSNull null] : arglog, @"level": arglevel == nil ? [NSNull null] : arglevel, @"module": argmodule == nil ? [NSNull null] : argmodule}];
  });
  
}

- (void)onUpdateNetworkTime : (int)errCode message: (NSString*)errMsg
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"TXLiveBaseDelegate::Callback@%@", @(self.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXLiveBaseDelegate::onUpdateNetworkTime_message");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argerrCode = @(errCode);
  // ref callback arg
  NSString* argerrMsg = errMsg;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXLiveBaseDelegate::onUpdateNetworkTime_message" arguments:@{@"errCode": argerrCode == nil ? [NSNull null] : argerrCode, @"errMsg": argerrMsg == nil ? [NSNull null] : argerrMsg}];
  });
  
}

- (void)onLicenceLoaded : (int)result Reason: (NSString*)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"TXLiveBaseDelegate::Callback@%@", @(self.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXLiveBaseDelegate::onLicenceLoaded_Reason");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argresult = @(result);
  // ref callback arg
  NSString* argreason = reason;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::TXLiveBaseDelegate::onLicenceLoaded_Reason" arguments:@{@"result": argresult == nil ? [NSNull null] : argresult, @"reason": argreason == nil ? [NSNull null] : argreason}];
  });
  
}


@end
