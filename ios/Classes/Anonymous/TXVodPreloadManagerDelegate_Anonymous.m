//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "TXVodPreloadManagerDelegate_Anonymous.h"
#import <Flutter/Flutter.h>
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSString*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation TXVodPreloadManagerDelegate_Anonymous

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
  }

  return self;
}

- (void)onComplete : (int)taskID url: (NSString*)url
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"TXVodPreloadManagerDelegate::Callback@%@:%@", NSStringFromClass([self class]), @(self.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodPreloadManagerDelegate::onComplete_url");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argtaskID = @(taskID);
  // ref callback arg
  NSString* argurl = url;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"onComplete:url" arguments:@{@"taskID": argtaskID == nil ? [NSNull null] : argtaskID, @"url": argurl == nil ? [NSNull null] : argurl}];
  });
  
}

- (void)onError : (int)taskID url: (NSString*)url error: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"TXVodPreloadManagerDelegate::Callback@%@:%@", NSStringFromClass([self class]), @(self.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"TXVodPreloadManagerDelegate::onError_url_error");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argtaskID = @(taskID);
  // ref callback arg
  NSString* argurl = url;
  // ref callback arg
  NSError* argerror = error;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"onError:url:error" arguments:@{@"taskID": argtaskID == nil ? [NSNull null] : argtaskID, @"url": argurl == nil ? [NSNull null] : argurl, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}


@end
