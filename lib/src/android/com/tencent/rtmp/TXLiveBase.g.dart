// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class com_tencent_rtmp_TXLiveBase extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.rtmp.TXLiveBase';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<com_tencent_rtmp_TXLiveBase?> getInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::getInstance([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::getInstance', );
  
  
    // handle native call
  
  
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXLiveBase>(__result__);
  }
  
  
  Future<void> setLicence(android_content_Context? context, String? url, String? key) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase@$refId::setLicence([\'url\':$url, \'key\':$key])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setLicence', {"context": context, "url": url, "key": key, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<String?> getLicenceInfo(android_content_Context? context) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase@$refId::getLicenceInfo([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::getLicenceInfo', {"context": context, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setListener(com_tencent_rtmp_TXLiveBaseListener? liveBaseListener) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::setListener([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setListener', {"liveBaseListener": liveBaseListener});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int?> setGlobalEnv(String? envConfig) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::setGlobalEnv([\'envConfig\':$envConfig])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setGlobalEnv', {"envConfig": envConfig});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setLogLevel(int? logLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::setLogLevel([\'logLevel\':$logLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setLogLevel', {"logLevel": logLevel});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setConsoleEnabled(bool? enabled) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::setConsoleEnabled([\'enabled\':$enabled])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setConsoleEnabled', {"enabled": enabled});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setAppVersion(String? verNum) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::setAppVersion([\'verNum\':$verNum])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setAppVersion', {"verNum": verNum});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setLibraryPath(String? path) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::setLibraryPath([\'path\':$path])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setLibraryPath', {"path": path});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool?> isLibraryPathValid(String? path) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::isLibraryPathValid([\'path\':$path])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::isLibraryPathValid', {"path": path});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String?> getSDKVersionStr() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::getSDKVersionStr([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::getSDKVersionStr', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setPituLicencePath(String? path) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::setPituLicencePath([\'path\':$path])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setPituLicencePath', {"path": path});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String?> getPituSDKVersion() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::getPituSDKVersion([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::getPituSDKVersion', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setAppID(String? appID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::setAppID([\'appID\':$appID])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setAppID', {"appID": appID});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setUserId(String? userId) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::setUserId([\'userId\':$userId])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setUserId', {"userId": userId});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int?> updateNetworkTime() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::updateNetworkTime([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::updateNetworkTime', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int?> getNetworkTimestamp() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::getNetworkTimestamp([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::getNetworkTimestamp', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> onUpdateNetworkTime(int? errCode, String? errMsg) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::onUpdateNetworkTime([\'errCode\':$errCode, \'errMsg\':$errMsg])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::onUpdateNetworkTime', {"errCode": errCode, "errMsg": errMsg});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool?> setExtID(String? extKey, String? extValue) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXLiveBase::setExtID([\'extKey\':$extKey, \'extValue\':$extValue])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setExtID', {"extKey": extKey, "extValue": extValue});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_rtmp_TXLiveBase{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_rtmp_TXLiveBase_Batch on List<com_tencent_rtmp_TXLiveBase?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<com_tencent_rtmp_TXLiveBase?>> getInstance_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::getInstance_batch', );
  
  
    return (resultBatch as List).map((__result__) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXLiveBase>(__result__)).cast<com_tencent_rtmp_TXLiveBase?>().toList();
  }
  
  
  Future<List<void>> setLicence_batch(List<android_content_Context?> context, List<String?> url, List<String?> key) async {
    assert(context.length == url.length && url.length == key.length);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setLicence_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"context": context[__i__], "url": url[__i__], "key": key[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<String?>> getLicenceInfo_batch(List<android_content_Context?> context) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::getLicenceInfo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"context": context[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  static Future<List<void>> setListener_batch(List<com_tencent_rtmp_TXLiveBaseListener?> liveBaseListener) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setListener_batch', [for (int __i__ = 0; __i__ < liveBaseListener.length; __i__++) {"liveBaseListener": liveBaseListener[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<int?>> setGlobalEnv_batch(List<String?> envConfig) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setGlobalEnv_batch', [for (int __i__ = 0; __i__ < envConfig.length; __i__++) {"envConfig": envConfig[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  static Future<List<void>> setLogLevel_batch(List<int?> logLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setLogLevel_batch', [for (int __i__ = 0; __i__ < logLevel.length; __i__++) {"logLevel": logLevel[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setConsoleEnabled_batch(List<bool?> enabled) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setConsoleEnabled_batch', [for (int __i__ = 0; __i__ < enabled.length; __i__++) {"enabled": enabled[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setAppVersion_batch(List<String?> verNum) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setAppVersion_batch', [for (int __i__ = 0; __i__ < verNum.length; __i__++) {"verNum": verNum[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setLibraryPath_batch(List<String?> path) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setLibraryPath_batch', [for (int __i__ = 0; __i__ < path.length; __i__++) {"path": path[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<bool?>> isLibraryPathValid_batch(List<String?> path) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::isLibraryPathValid_batch', [for (int __i__ = 0; __i__ < path.length; __i__++) {"path": path[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  
  static Future<List<String?>> getSDKVersionStr_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::getSDKVersionStr_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  static Future<List<void>> setPituLicencePath_batch(List<String?> path) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setPituLicencePath_batch', [for (int __i__ = 0; __i__ < path.length; __i__++) {"path": path[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<String?>> getPituSDKVersion_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::getPituSDKVersion_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  static Future<List<void>> setAppID_batch(List<String?> appID) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setAppID_batch', [for (int __i__ = 0; __i__ < appID.length; __i__++) {"appID": appID[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setUserId_batch(List<String?> userId) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setUserId_batch', [for (int __i__ = 0; __i__ < userId.length; __i__++) {"userId": userId[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<int?>> updateNetworkTime_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::updateNetworkTime_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  static Future<List<int?>> getNetworkTimestamp_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::getNetworkTimestamp_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  static Future<List<void>> onUpdateNetworkTime_batch(List<int?> errCode, List<String?> errMsg) async {
    assert(errCode.length == errMsg.length);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::onUpdateNetworkTime_batch', [for (int __i__ = 0; __i__ < errCode.length; __i__++) {"errCode": errCode[__i__], "errMsg": errMsg[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<bool?>> setExtID_batch(List<String?> extKey, List<String?> extValue) async {
    assert(extKey.length == extValue.length);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXLiveBase::setExtID_batch', [for (int __i__ = 0; __i__ < extKey.length; __i__++) {"extKey": extKey[__i__], "extValue": extValue[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  //endregion
}