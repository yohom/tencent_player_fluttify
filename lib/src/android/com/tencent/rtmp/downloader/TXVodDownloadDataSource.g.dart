// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class com_tencent_rtmp_downloader_TXVodDownloadDataSource extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.rtmp.downloader.TXVodDownloadDataSource';

  @override
  final String tag__ = 'tencent_player_fluttify';

  static final int QUALITY_OD = 0;
  static final int QUALITY_FLU = 1;
  static final int QUALITY_SD = 2;
  static final int QUALITY_HD = 3;
  static final int QUALITY_FHD = 4;
  static final int QUALITY_2K = 5;
  static final int QUALITY_4K = 6;
  static final int QUALITY_UNK = 1000;
  //endregion

  //region creators
  static Future<com_tencent_rtmp_downloader_TXVodDownloadDataSource> create__int__String__int__String__String(int? appId, String? fileId, int? quality, String? pSign, String? userName) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadDataSource__int__String__int__String__String',
      {"appId": appId, "fileId": fileId, "quality": quality, "pSign": pSign, "userName": userName}
    );
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_downloader_TXVodDownloadDataSource>(__result__)!;
  }
  
  static Future<com_tencent_rtmp_downloader_TXVodDownloadDataSource> create__com_tencent_rtmp_TXPlayerAuthBuilder__int(com_tencent_rtmp_TXPlayerAuthBuilder? authBuilder, int? quality) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__int',
      {"authBuilder": authBuilder, "quality": quality}
    );
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_downloader_TXVodDownloadDataSource>(__result__)!;
  }
  
  static Future<com_tencent_rtmp_downloader_TXVodDownloadDataSource> create__com_tencent_rtmp_TXPlayerAuthBuilder__String(com_tencent_rtmp_TXPlayerAuthBuilder? authBuilder, String? templateName) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__String',
      {"authBuilder": authBuilder, "templateName": templateName}
    );
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_downloader_TXVodDownloadDataSource>(__result__)!;
  }
  
  static Future<List<com_tencent_rtmp_downloader_TXVodDownloadDataSource>> create_batch__int__String__int__String__String(List<int?> appId, List<String?> fileId, List<int?> quality, List<String?> pSign, List<String?> userName) async {
    assert(appId.length == fileId.length && fileId.length == quality.length && quality.length == pSign.length && pSign.length == userName.length);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadDataSource__int__String__int__String__String',
      [for (int __i__ = 0; __i__ < appId.length; __i__++) {"appId": appId[__i__], "fileId": fileId[__i__], "quality": quality[__i__], "pSign": pSign[__i__], "userName": userName[__i__]}]
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_downloader_TXVodDownloadDataSource>(it))
        .where((element) => element !=null)
        .cast<com_tencent_rtmp_downloader_TXVodDownloadDataSource>()
        .toList() ?? <com_tencent_rtmp_downloader_TXVodDownloadDataSource>[];
  }
  
  static Future<List<com_tencent_rtmp_downloader_TXVodDownloadDataSource>> create_batch__com_tencent_rtmp_TXPlayerAuthBuilder__int(List<com_tencent_rtmp_TXPlayerAuthBuilder?> authBuilder, List<int?> quality) async {
    assert(authBuilder.length == quality.length);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__int',
      [for (int __i__ = 0; __i__ < authBuilder.length; __i__++) {"authBuilder": authBuilder[__i__], "quality": quality[__i__]}]
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_downloader_TXVodDownloadDataSource>(it))
        .where((element) => element !=null)
        .cast<com_tencent_rtmp_downloader_TXVodDownloadDataSource>()
        .toList() ?? <com_tencent_rtmp_downloader_TXVodDownloadDataSource>[];
  }
  
  static Future<List<com_tencent_rtmp_downloader_TXVodDownloadDataSource>> create_batch__com_tencent_rtmp_TXPlayerAuthBuilder__String(List<com_tencent_rtmp_TXPlayerAuthBuilder?> authBuilder, List<String?> templateName) async {
    assert(authBuilder.length == templateName.length);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcom_tencent_rtmp_downloader_TXVodDownloadDataSource__com_tencent_rtmp_TXPlayerAuthBuilder__String',
      [for (int __i__ = 0; __i__ < authBuilder.length; __i__++) {"authBuilder": authBuilder[__i__], "templateName": templateName[__i__]}]
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_downloader_TXVodDownloadDataSource>(it))
        .where((element) => element !=null)
        .cast<com_tencent_rtmp_downloader_TXVodDownloadDataSource>()
        .toList() ?? <com_tencent_rtmp_downloader_TXVodDownloadDataSource>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<String?> getFileId() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::getFileId([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getFileId', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<String?> getPSign() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::getPSign([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getPSign', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setQuality(int? quality) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::setQuality([\'quality\':$quality])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::setQuality', {"quality": quality, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setToken(String? token) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::setToken([\'token\':$token])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::setToken', {"token": token, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  @deprecated
  Future<com_tencent_rtmp_TXPlayerAuthBuilder?> getAuthBuilder() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::getAuthBuilder([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getAuthBuilder', {"__this__": this});
  
  
    // handle native call
  
  
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerAuthBuilder>(__result__);
  }
  
  
  Future<int?> getQuality() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::getQuality([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getQuality', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  @deprecated
  Future<String?> getTemplateName() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::getTemplateName([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getTemplateName', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<String?> getToken() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::getToken([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getToken', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> getAppId() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::getAppId([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getAppId', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<String?> getUserName() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::getUserName([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getUserName', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<String?> getOverlayKey() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::getOverlayKey([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getOverlayKey', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<String?> getOverlayIv() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodDownloadDataSource@$refId::getOverlayIv([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getOverlayIv', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_rtmp_downloader_TXVodDownloadDataSource{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_rtmp_downloader_TXVodDownloadDataSource_Batch on List<com_tencent_rtmp_downloader_TXVodDownloadDataSource?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<String?>> getFileId_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getFileId_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  Future<List<String?>> getPSign_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getPSign_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  Future<List<void>> setQuality_batch(List<int?> quality) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::setQuality_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"quality": quality[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setToken_batch(List<String?> token) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::setToken_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"token": token[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  @deprecated
  Future<List<com_tencent_rtmp_TXPlayerAuthBuilder?>> getAuthBuilder_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getAuthBuilder_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerAuthBuilder>(__result__)).cast<com_tencent_rtmp_TXPlayerAuthBuilder?>().toList();
  }
  
  
  Future<List<int?>> getQuality_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getQuality_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  @deprecated
  Future<List<String?>> getTemplateName_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getTemplateName_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  Future<List<String?>> getToken_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getToken_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  Future<List<int?>> getAppId_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getAppId_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<String?>> getUserName_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getUserName_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  Future<List<String?>> getOverlayKey_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getOverlayKey_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  Future<List<String?>> getOverlayIv_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodDownloadDataSource::getOverlayIv_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  //endregion
}