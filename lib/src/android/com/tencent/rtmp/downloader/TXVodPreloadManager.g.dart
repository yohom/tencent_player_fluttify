// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class com_tencent_rtmp_downloader_TXVodPreloadManager extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.rtmp.downloader.TXVodPreloadManager';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<com_tencent_rtmp_downloader_TXVodPreloadManager?> getInstance(android_content_Context context) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodPreloadManager::getInstance([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodPreloadManager::getInstance', {"context": context});
  
  
    // handle native call
  
  
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_downloader_TXVodPreloadManager>(__result__);
  }
  
  
  Future<int?> startPreload(String url, int preloadSizeMB, int preferredResolution, com_tencent_rtmp_downloader_ITXVodPreloadListener listener) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodPreloadManager@$refId::startPreload([\'url\':$url, \'preloadSizeMB\':$preloadSizeMB, \'preferredResolution\':$preferredResolution])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodPreloadManager::startPreload', {"url": url, "preloadSizeMB": preloadSizeMB, "preferredResolution": preferredResolution, "listener": listener, "__this__": this});
  
  
    // handle native call
    MethodChannel('com.tencent.rtmp.downloader.TXVodPreloadManager::startPreload::Callback@$refId', kTencentPlayerFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.tencent.rtmp.downloader.ITXVodPreloadListener::onComplete':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onComplete([\'var1\':${args['var1']}, \'var2\':${args['var2']}])');
                }
          
                // handle the native call
                listener.onComplete(args['var1'], args['var2']);
                break;
              case 'Callback::com.tencent.rtmp.downloader.ITXVodPreloadListener::onError':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onError([\'var1\':${args['var1']}, \'var2\':${args['var2']}, \'var3\':${args['var3']}, \'var4\':${args['var4']}])');
                }
          
                // handle the native call
                listener.onError(args['var1'], args['var2'], args['var3'], args['var4']);
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e.toString());
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<void> stopPreload(int taskID) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.downloader.TXVodPreloadManager@$refId::stopPreload([\'taskID\':$taskID])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodPreloadManager::stopPreload', {"taskID": taskID, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_rtmp_downloader_TXVodPreloadManager{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_rtmp_downloader_TXVodPreloadManager_Batch on List<com_tencent_rtmp_downloader_TXVodPreloadManager> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<com_tencent_rtmp_downloader_TXVodPreloadManager?>> getInstance_batch(List<android_content_Context> context) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodPreloadManager::getInstance_batch', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_downloader_TXVodPreloadManager>(__result__)).cast<com_tencent_rtmp_downloader_TXVodPreloadManager?>().toList();
  }
  
  
  Future<List<void>> stopPreload_batch(List<int> taskID) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.downloader.TXVodPreloadManager::stopPreload_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"taskID": taskID[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  //endregion
}