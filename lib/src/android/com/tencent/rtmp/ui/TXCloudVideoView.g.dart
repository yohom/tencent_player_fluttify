// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class com_tencent_rtmp_ui_TXCloudVideoView extends android_widget_FrameLayout  {
  //region constants
  static const String name__ = 'com.tencent.rtmp.ui.TXCloudVideoView';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  static Future<com_tencent_rtmp_ui_TXCloudVideoView> create__android_content_Context(android_content_Context? context) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createcom_tencent_rtmp_ui_TXCloudVideoView__android_content_Context',
      {"context": context}
    );
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_ui_TXCloudVideoView>(__result__)!;
  }
  
  static Future<com_tencent_rtmp_ui_TXCloudVideoView> create__android_view_SurfaceView(android_view_SurfaceView? surfaceView) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createcom_tencent_rtmp_ui_TXCloudVideoView__android_view_SurfaceView',
      {"surfaceView": surfaceView}
    );
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_ui_TXCloudVideoView>(__result__)!;
  }
  
  static Future<List<com_tencent_rtmp_ui_TXCloudVideoView>> create_batch__android_content_Context(List<android_content_Context?> context) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcom_tencent_rtmp_ui_TXCloudVideoView__android_content_Context',
      [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__]}]
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_ui_TXCloudVideoView>(it))
        .where((element) => element !=null)
        .cast<com_tencent_rtmp_ui_TXCloudVideoView>()
        .toList() ?? <com_tencent_rtmp_ui_TXCloudVideoView>[];
  }
  
  static Future<List<com_tencent_rtmp_ui_TXCloudVideoView>> create_batch__android_view_SurfaceView(List<android_view_SurfaceView?> surfaceView) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcom_tencent_rtmp_ui_TXCloudVideoView__android_view_SurfaceView',
      [for (int __i__ = 0; __i__ < surfaceView.length; __i__++) {"surfaceView": surfaceView[__i__]}]
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_ui_TXCloudVideoView>(it))
        .where((element) => element !=null)
        .cast<com_tencent_rtmp_ui_TXCloudVideoView>()
        .toList() ?? <com_tencent_rtmp_ui_TXCloudVideoView>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<void> removeVideoView() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::removeVideoView([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::removeVideoView', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<android_view_SurfaceView?> getSurfaceView() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::getSurfaceView([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::getSurfaceView', {"__this__": this});
  
  
    // handle native call
  
  
    return TencentPlayerFluttifyAndroidAs<android_view_SurfaceView>(__result__);
  }
  
  
  Future<void> setOpenGLContext(Object? glContext) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::setOpenGLContext([\'glContext\':$glContext])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::setOpenGLContext', {"glContext": glContext, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<Object?> getOpenGLContext() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::getOpenGLContext([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::getOpenGLContext', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> onResume() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::onResume([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::onResume', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> onPause() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::onPause([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::onPause', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> onDestroy() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::onDestroy([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::onDestroy', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> clearLastFrame(bool? clear) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::clearLastFrame([\'clear\':$clear])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::clearLastFrame', {"clear": clear, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setUserId(String? userId) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::setUserId([\'userId\':$userId])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::setUserId', {"userId": userId, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<String?> getUserId() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::getUserId([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::getUserId', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool?> onTouchEvent(android_view_MotionEvent? event) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::onTouchEvent([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::onTouchEvent', {"event": event, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setLogMargin(double? leftMarginInDp, double? rightMarginInDp, double? topMarginInDp, double? bottomMarginInDp) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::setLogMargin([\'leftMarginInDp\':$leftMarginInDp, \'rightMarginInDp\':$rightMarginInDp, \'topMarginInDp\':$topMarginInDp, \'bottomMarginInDp\':$bottomMarginInDp])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::setLogMargin', {"leftMarginInDp": leftMarginInDp, "rightMarginInDp": rightMarginInDp, "topMarginInDp": topMarginInDp, "bottomMarginInDp": bottomMarginInDp, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setDashBoardMarginInPx(int? left, int? right, int? top, int? bottom) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::setDashBoardMarginInPx([\'left\':$left, \'right\':$right, \'top\':$top, \'bottom\':$bottom])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::setDashBoardMarginInPx', {"left": left, "right": right, "top": top, "bottom": bottom, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setDashBoardMarginInRatio(double? leftRatio, double? rightRatio, double? topRatio, double? bottomRatio) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::setDashBoardMarginInRatio([\'leftRatio\':$leftRatio, \'rightRatio\':$rightRatio, \'topRatio\':$topRatio, \'bottomRatio\':$bottomRatio])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::setDashBoardMarginInRatio', {"leftRatio": leftRatio, "rightRatio": rightRatio, "topRatio": topRatio, "bottomRatio": bottomRatio, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> disableLog(bool? enable) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::disableLog([\'enable\':$enable])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::disableLog', {"enable": enable, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> showLog(bool? enable) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::showLog([\'enable\':$enable])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::showLog', {"enable": enable, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> clearLog() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.ui.TXCloudVideoView@$refId::clearLog([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::clearLog', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_rtmp_ui_TXCloudVideoView{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_rtmp_ui_TXCloudVideoView_Batch on List<com_tencent_rtmp_ui_TXCloudVideoView?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> removeVideoView_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::removeVideoView_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<android_view_SurfaceView?>> getSurfaceView_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::getSurfaceView_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => TencentPlayerFluttifyAndroidAs<android_view_SurfaceView>(__result__)).cast<android_view_SurfaceView?>().toList();
  }
  
  
  Future<List<void>> setOpenGLContext_batch(List<Object?> glContext) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::setOpenGLContext_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"glContext": glContext[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<Object?>> getOpenGLContext_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::getOpenGLContext_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<Object?>().toList();
  }
  
  
  Future<List<void>> onResume_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::onResume_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> onPause_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::onPause_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> onDestroy_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::onDestroy_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> clearLastFrame_batch(List<bool?> clear) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::clearLastFrame_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"clear": clear[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setUserId_batch(List<String?> userId) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::setUserId_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"userId": userId[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<String?>> getUserId_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::getUserId_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  Future<List<bool?>> onTouchEvent_batch(List<android_view_MotionEvent?> event) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::onTouchEvent_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"event": event[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  
  Future<List<void>> setLogMargin_batch(List<double?> leftMarginInDp, List<double?> rightMarginInDp, List<double?> topMarginInDp, List<double?> bottomMarginInDp) async {
    assert(leftMarginInDp.length == rightMarginInDp.length && rightMarginInDp.length == topMarginInDp.length && topMarginInDp.length == bottomMarginInDp.length);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::setLogMargin_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"leftMarginInDp": leftMarginInDp[__i__], "rightMarginInDp": rightMarginInDp[__i__], "topMarginInDp": topMarginInDp[__i__], "bottomMarginInDp": bottomMarginInDp[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setDashBoardMarginInPx_batch(List<int?> left, List<int?> right, List<int?> top, List<int?> bottom) async {
    assert(left.length == right.length && right.length == top.length && top.length == bottom.length);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::setDashBoardMarginInPx_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"left": left[__i__], "right": right[__i__], "top": top[__i__], "bottom": bottom[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setDashBoardMarginInRatio_batch(List<double?> leftRatio, List<double?> rightRatio, List<double?> topRatio, List<double?> bottomRatio) async {
    assert(leftRatio.length == rightRatio.length && rightRatio.length == topRatio.length && topRatio.length == bottomRatio.length);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::setDashBoardMarginInRatio_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"leftRatio": leftRatio[__i__], "rightRatio": rightRatio[__i__], "topRatio": topRatio[__i__], "bottomRatio": bottomRatio[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> disableLog_batch(List<bool?> enable) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::disableLog_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"enable": enable[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> showLog_batch(List<bool?> enable) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::showLog_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"enable": enable[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> clearLog_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.ui.TXCloudVideoView::clearLog_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  //endregion
}