// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class com_tencent_rtmp_TXPlayerDrmBuilder extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.rtmp.TXPlayerDrmBuilder';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  static Future<com_tencent_rtmp_TXPlayerDrmBuilder> create__() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createcom_tencent_rtmp_TXPlayerDrmBuilder__',
    
    );
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerDrmBuilder>(__result__)!;
  }
  
  static Future<com_tencent_rtmp_TXPlayerDrmBuilder> create__String__String__String(String? provisionUrl, String? licenseUrl, String? playUrl) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createcom_tencent_rtmp_TXPlayerDrmBuilder__String__String__String',
      {"provisionUrl": provisionUrl, "licenseUrl": licenseUrl, "playUrl": playUrl}
    );
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerDrmBuilder>(__result__)!;
  }
  
  static Future<List<com_tencent_rtmp_TXPlayerDrmBuilder>> create_batch__(int length) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcom_tencent_rtmp_TXPlayerDrmBuilder__',
      {'length': length}
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerDrmBuilder>(it))
        .where((element) => element !=null)
        .cast<com_tencent_rtmp_TXPlayerDrmBuilder>()
        .toList() ?? <com_tencent_rtmp_TXPlayerDrmBuilder>[];
  }
  
  static Future<List<com_tencent_rtmp_TXPlayerDrmBuilder>> create_batch__String__String__String(List<String?> provisionUrl, List<String?> licenseUrl, List<String?> playUrl) async {
    assert(provisionUrl.length == licenseUrl.length && licenseUrl.length == playUrl.length);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcom_tencent_rtmp_TXPlayerDrmBuilder__String__String__String',
      [for (int __i__ = 0; __i__ < provisionUrl.length; __i__++) {"provisionUrl": provisionUrl[__i__], "licenseUrl": licenseUrl[__i__], "playUrl": playUrl[__i__]}]
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerDrmBuilder>(it))
        .where((element) => element !=null)
        .cast<com_tencent_rtmp_TXPlayerDrmBuilder>()
        .toList() ?? <com_tencent_rtmp_TXPlayerDrmBuilder>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<com_tencent_rtmp_TXPlayerDrmBuilder?> setProvisionUrl(String? provisionUrl) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXPlayerDrmBuilder@$refId::setProvisionUrl([\'provisionUrl\':$provisionUrl])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::setProvisionUrl', {"provisionUrl": provisionUrl, "__this__": this});
  
  
    // handle native call
  
  
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerDrmBuilder>(__result__);
  }
  
  
  Future<String?> getProvisionUrl() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXPlayerDrmBuilder@$refId::getProvisionUrl([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::getProvisionUrl', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<com_tencent_rtmp_TXPlayerDrmBuilder?> setKeyLicenseUrl(String? keyLicenseUrl) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXPlayerDrmBuilder@$refId::setKeyLicenseUrl([\'keyLicenseUrl\':$keyLicenseUrl])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::setKeyLicenseUrl', {"keyLicenseUrl": keyLicenseUrl, "__this__": this});
  
  
    // handle native call
  
  
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerDrmBuilder>(__result__);
  }
  
  
  Future<String?> getKeyLicenseUrl() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXPlayerDrmBuilder@$refId::getKeyLicenseUrl([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::getKeyLicenseUrl', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<com_tencent_rtmp_TXPlayerDrmBuilder?> setPlayUrl(String? playUrl) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXPlayerDrmBuilder@$refId::setPlayUrl([\'playUrl\':$playUrl])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::setPlayUrl', {"playUrl": playUrl, "__this__": this});
  
  
    // handle native call
  
  
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerDrmBuilder>(__result__);
  }
  
  
  Future<String?> getPlayUrl() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXPlayerDrmBuilder@$refId::getPlayUrl([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::getPlayUrl', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_rtmp_TXPlayerDrmBuilder{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_rtmp_TXPlayerDrmBuilder_Batch on List<com_tencent_rtmp_TXPlayerDrmBuilder?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<com_tencent_rtmp_TXPlayerDrmBuilder?>> setProvisionUrl_batch(List<String?> provisionUrl) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::setProvisionUrl_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"provisionUrl": provisionUrl[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerDrmBuilder>(__result__)).cast<com_tencent_rtmp_TXPlayerDrmBuilder?>().toList();
  }
  
  
  Future<List<String?>> getProvisionUrl_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::getProvisionUrl_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  Future<List<com_tencent_rtmp_TXPlayerDrmBuilder?>> setKeyLicenseUrl_batch(List<String?> keyLicenseUrl) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::setKeyLicenseUrl_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"keyLicenseUrl": keyLicenseUrl[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerDrmBuilder>(__result__)).cast<com_tencent_rtmp_TXPlayerDrmBuilder?>().toList();
  }
  
  
  Future<List<String?>> getKeyLicenseUrl_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::getKeyLicenseUrl_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  Future<List<com_tencent_rtmp_TXPlayerDrmBuilder?>> setPlayUrl_batch(List<String?> playUrl) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::setPlayUrl_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"playUrl": playUrl[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXPlayerDrmBuilder>(__result__)).cast<com_tencent_rtmp_TXPlayerDrmBuilder?>().toList();
  }
  
  
  Future<List<String?>> getPlayUrl_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXPlayerDrmBuilder::getPlayUrl_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  //endregion
}