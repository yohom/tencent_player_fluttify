// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class com_tencent_rtmp_TXTrackInfo extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.rtmp.TXTrackInfo';

  @override
  final String tag__ = 'tencent_player_fluttify';

  static const int TX_VOD_MEDIA_TRACK_TYPE_UNKNOW = 0;
  static const int TX_VOD_MEDIA_TRACK_TYPE_VIDEO = 1;
  static const int TX_VOD_MEDIA_TRACK_TYPE_AUDIO = 2;
  static const int TX_VOD_MEDIA_TRACK_TYPE_SUBTITLE = 3;
  //endregion

  //region creators
  static Future<com_tencent_rtmp_TXTrackInfo> create__() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createcom_tencent_rtmp_TXTrackInfo__',
    
    );
    return TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXTrackInfo>(__result__)!;
  }
  
  static Future<List<com_tencent_rtmp_TXTrackInfo>> create_batch__(int length) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcom_tencent_rtmp_TXTrackInfo__',
      {'length': length}
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyAndroidAs<com_tencent_rtmp_TXTrackInfo>(it))
        .where((element) => element !=null)
        .cast<com_tencent_rtmp_TXTrackInfo>()
        .toList() ?? <com_tencent_rtmp_TXTrackInfo>[];
  }
  
  //endregion

  //region getters
  Future<int?> get_trackType() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_trackType", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_trackIndex() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_trackIndex", {'__this__': this});
    return __result__;
  }
  
  Future<String?> get_name() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_name", {'__this__': this});
    return __result__;
  }
  
  Future<bool?> get_isSelected() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_isSelected", {'__this__': this});
    return __result__;
  }
  
  Future<bool?> get_isExclusive() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_isExclusive", {'__this__': this});
    return __result__;
  }
  
  Future<bool?> get_isInternal() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_isInternal", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_trackType(int? trackType) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_trackType', <String, dynamic>{'__this__': this, "trackType": trackType});
  }
  
  Future<void> set_trackIndex(int? trackIndex) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_trackIndex', <String, dynamic>{'__this__': this, "trackIndex": trackIndex});
  }
  
  Future<void> set_name(String? name) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_name', <String, dynamic>{'__this__': this, "name": name});
  }
  
  Future<void> set_isSelected(bool? isSelected) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_isSelected', <String, dynamic>{'__this__': this, "isSelected": isSelected});
  }
  
  Future<void> set_isExclusive(bool? isExclusive) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_isExclusive', <String, dynamic>{'__this__': this, "isExclusive": isExclusive});
  }
  
  Future<void> set_isInternal(bool? isInternal) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_isInternal', <String, dynamic>{'__this__': this, "isInternal": isInternal});
  }
  
  //endregion

  //region methods
  
  Future<int?> getTrackIndex() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXTrackInfo@$refId::getTrackIndex([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::getTrackIndex', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> getTrackType() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXTrackInfo@$refId::getTrackType([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::getTrackType', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<String?> getName() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.rtmp.TXTrackInfo@$refId::getName([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::getName', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_rtmp_TXTrackInfo{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_rtmp_TXTrackInfo_Batch on List<com_tencent_rtmp_TXTrackInfo?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  Future<List<int?>> get_trackType_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_trackType_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<int?>> get_trackIndex_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_trackIndex_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<String?>> get_name_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_name_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  Future<List<bool?>> get_isSelected_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_isSelected_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  Future<List<bool?>> get_isExclusive_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_isExclusive_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  Future<List<bool?>> get_isInternal_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("com.tencent.rtmp.TXTrackInfo::get_isInternal_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_trackType_batch(List<int?> trackType) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_trackType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "trackType": trackType[__i__]}]);
  
  
  }
  
  Future<void> set_trackIndex_batch(List<int?> trackIndex) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_trackIndex_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "trackIndex": trackIndex[__i__]}]);
  
  
  }
  
  Future<void> set_name_batch(List<String?> name) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_name_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "name": name[__i__]}]);
  
  
  }
  
  Future<void> set_isSelected_batch(List<bool?> isSelected) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_isSelected_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "isSelected": isSelected[__i__]}]);
  
  
  }
  
  Future<void> set_isExclusive_batch(List<bool?> isExclusive) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_isExclusive_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "isExclusive": isExclusive[__i__]}]);
  
  
  }
  
  Future<void> set_isInternal_batch(List<bool?> isInternal) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::set_isInternal_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "isInternal": isInternal[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<int?>> getTrackIndex_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::getTrackIndex_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> getTrackType_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::getTrackType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<String?>> getName_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('com.tencent.rtmp.TXTrackInfo::getName_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  //endregion
}