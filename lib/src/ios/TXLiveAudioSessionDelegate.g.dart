// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class _TXLiveAudioSessionDelegate_SUB extends NSObject with TXLiveAudioSessionDelegate {}

mixin TXLiveAudioSessionDelegate on NSObject {
  

  static TXLiveAudioSessionDelegate subInstance() => _TXLiveAudioSessionDelegate_SUB();

  static Future<TXLiveAudioSessionDelegate> anonymous__() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXLiveAudioSessionDelegate::createAnonymous__');
  
    final __object__ = TencentPlayerFluttifyIOSAs<TXLiveAudioSessionDelegate>(__result__)!;
  
    // handle callback
    MethodChannel('TXLiveAudioSessionDelegate::Callback@${__object__.refId}', kTencentPlayerFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'setActive_error':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.setActive_error?.call([\'active\':${args['active']}, \'outError\':${args['outError']}])');
                }
            
                // handle the native call
                __object__.setActive_error?.call(args['active'], TencentPlayerFluttifyIOSAs<NSError>(args['outError']));
                break;
              case 'setMode_error':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.setMode_error?.call([\'mode\':${args['mode']}, \'outError\':${args['outError']}])');
                }
            
                // handle the native call
                __object__.setMode_error?.call(args['mode'], TencentPlayerFluttifyIOSAs<NSError>(args['outError']));
                break;
              case 'setCategory_error':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.setCategory_error?.call([\'category\':${args['category']}, \'outError\':${args['outError']}])');
                }
            
                // handle the native call
                __object__.setCategory_error?.call(args['category'], TencentPlayerFluttifyIOSAs<NSError>(args['outError']));
                break;
              case 'setPreferredIOBufferDuration_error':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.setPreferredIOBufferDuration_error?.call([\'duration\':${args['duration']}, \'outError\':${args['outError']}])');
                }
            
                // handle the native call
                __object__.setPreferredIOBufferDuration_error?.call(args['duration'], TencentPlayerFluttifyIOSAs<NSError>(args['outError']));
                break;
              case 'setPreferredSampleRate_error':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.setPreferredSampleRate_error?.call([\'sampleRate\':${args['sampleRate']}, \'outError\':${args['outError']}])');
                }
            
                // handle the native call
                __object__.setPreferredSampleRate_error?.call(args['sampleRate'], TencentPlayerFluttifyIOSAs<NSError>(args['outError']));
                break;
              case 'setPreferredOutputNumberOfChannels_error':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.setPreferredOutputNumberOfChannels_error?.call([\'count\':${args['count']}, \'outError\':${args['outError']}])');
                }
            
                // handle the native call
                __object__.setPreferredOutputNumberOfChannels_error?.call(args['count'], TencentPlayerFluttifyIOSAs<NSError>(args['outError']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e.toString());
            rethrow;
          }
        });
  
    return __object__;
  }
  

  @override
  final String tag__ = 'tencent_player_fluttify';

  

  

  Future<bool?> Function(bool? active, NSError? outError)? setActive_error;
  
  Future<bool?> Function(String? mode, NSError? outError)? setMode_error;
  
  Future<bool?> Function(String? category, NSError? outError)? setCategory_error;
  
  Future<bool?> Function(double? duration, NSError? outError)? setPreferredIOBufferDuration_error;
  
  Future<bool?> Function(double? sampleRate, NSError? outError)? setPreferredSampleRate_error;
  
  Future<bool?> Function(int? count, NSError? outError)? setPreferredOutputNumberOfChannels_error;
  
}

