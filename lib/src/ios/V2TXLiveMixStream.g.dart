// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class V2TXLiveMixStream extends NSObject  {
  //region constants
  static const String name__ = 'V2TXLiveMixStream';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  static Future<V2TXLiveMixStream?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createV2TXLiveMixStream',
      {'init': init}
    );
    return TencentPlayerFluttifyIOSAs<V2TXLiveMixStream?>(__result__);
  }
  
  static Future<List<V2TXLiveMixStream>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchV2TXLiveMixStream',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyIOSAs<V2TXLiveMixStream>(it))
        .where((element) => element !=null)
        .cast<V2TXLiveMixStream>()
        .toList() ?? <V2TXLiveMixStream>[];
  }
  
  //endregion

  //region getters
  Future<String?> get_userId() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_userId", {'__this__': this});
    return __result__;
  }
  
  Future<String?> get_streamId() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_streamId", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_x() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_x", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_y() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_y", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_width() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_width", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_height() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_height", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_zOrder() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_zOrder", {'__this__': this});
    return __result__;
  }
  
  Future<V2TXLiveMixInputType?> get_inputType() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_inputType", {'__this__': this});
    return (__result__ as int).toV2TXLiveMixInputType();
  }
  
  //endregion

  //region setters
  Future<void> set_userId(String userId) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_userId', <String, dynamic>{'__this__': this, "userId": userId});
  
  
  }
  
  Future<void> set_streamId(String streamId) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_streamId', <String, dynamic>{'__this__': this, "streamId": streamId});
  
  
  }
  
  Future<void> set_x(int x) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_x', <String, dynamic>{'__this__': this, "x": x});
  
  
  }
  
  Future<void> set_y(int y) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_y', <String, dynamic>{'__this__': this, "y": y});
  
  
  }
  
  Future<void> set_width(int width) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_width', <String, dynamic>{'__this__': this, "width": width});
  
  
  }
  
  Future<void> set_height(int height) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_height', <String, dynamic>{'__this__': this, "height": height});
  
  
  }
  
  Future<void> set_zOrder(int zOrder) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_zOrder', <String, dynamic>{'__this__': this, "zOrder": zOrder});
  
  
  }
  
  Future<void> set_inputType(V2TXLiveMixInputType inputType) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_inputType', <String, dynamic>{'__this__': this, "inputType": inputType.toValue()});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'V2TXLiveMixStream{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension V2TXLiveMixStream_Batch on List<V2TXLiveMixStream> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  Future<List<String?>> get_userId_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_userId_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  Future<List<String?>> get_streamId_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_streamId_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  Future<List<int?>> get_x_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_x_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<int?>> get_y_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_y_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<int?>> get_width_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_width_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<int?>> get_height_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_height_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<int?>> get_zOrder_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_zOrder_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<V2TXLiveMixInputType?>> get_inputType_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveMixStream::get_inputType_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toV2TXLiveMixInputType()).cast<V2TXLiveMixInputType?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_userId_batch(List<String> userId) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_userId_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "userId": userId[__i__]}]);
  
  
  }
  
  Future<void> set_streamId_batch(List<String> streamId) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_streamId_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "streamId": streamId[__i__]}]);
  
  
  }
  
  Future<void> set_x_batch(List<int> x) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_x_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "x": x[__i__]}]);
  
  
  }
  
  Future<void> set_y_batch(List<int> y) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_y_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "y": y[__i__]}]);
  
  
  }
  
  Future<void> set_width_batch(List<int> width) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_width_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "width": width[__i__]}]);
  
  
  }
  
  Future<void> set_height_batch(List<int> height) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_height_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "height": height[__i__]}]);
  
  
  }
  
  Future<void> set_zOrder_batch(List<int> zOrder) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_zOrder_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "zOrder": zOrder[__i__]}]);
  
  
  }
  
  Future<void> set_inputType_batch(List<V2TXLiveMixInputType> inputType) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveMixStream::set_inputType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "inputType": inputType[__i__].toValue()}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}