// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class V2TXLiveVideoEncoderParam extends NSObject  {
  //region constants
  static const String name__ = 'V2TXLiveVideoEncoderParam';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  static Future<V2TXLiveVideoEncoderParam> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createV2TXLiveVideoEncoderParam',
      {'init': init}
    );
    return TencentPlayerFluttifyIOSAs<V2TXLiveVideoEncoderParam>(__result__)!;
  }
  
  static Future<List<V2TXLiveVideoEncoderParam>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchV2TXLiveVideoEncoderParam',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyIOSAs<V2TXLiveVideoEncoderParam>(it))
        .where((element) => element !=null)
        .cast<V2TXLiveVideoEncoderParam>()
        .toList() ?? <V2TXLiveVideoEncoderParam>[];
  }
  
  //endregion

  //region getters
  Future<V2TXLiveVideoResolution?> get_videoResolution() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoEncoderParam::get_videoResolution", {'__this__': this});
    return (__result__ as int).toV2TXLiveVideoResolution();
  }
  
  Future<V2TXLiveVideoResolutionMode?> get_videoResolutionMode() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoEncoderParam::get_videoResolutionMode", {'__this__': this});
    return (__result__ as int).toV2TXLiveVideoResolutionMode();
  }
  
  Future<int?> get_videoFps() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoEncoderParam::get_videoFps", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_videoBitrate() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoEncoderParam::get_videoBitrate", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_minVideoBitrate() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoEncoderParam::get_minVideoBitrate", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_videoResolution(V2TXLiveVideoResolution videoResolution) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::set_videoResolution', <String, dynamic>{'__this__': this, "videoResolution": videoResolution.toValue()});
  
  
  }
  
  Future<void> set_videoResolutionMode(V2TXLiveVideoResolutionMode videoResolutionMode) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::set_videoResolutionMode', <String, dynamic>{'__this__': this, "videoResolutionMode": videoResolutionMode.toValue()});
  
  
  }
  
  Future<void> set_videoFps(int videoFps) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::set_videoFps', <String, dynamic>{'__this__': this, "videoFps": videoFps});
  
  
  }
  
  Future<void> set_videoBitrate(int videoBitrate) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::set_videoBitrate', <String, dynamic>{'__this__': this, "videoBitrate": videoBitrate});
  
  
  }
  
  Future<void> set_minVideoBitrate(int minVideoBitrate) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::set_minVideoBitrate', <String, dynamic>{'__this__': this, "minVideoBitrate": minVideoBitrate});
  
  
  }
  
  //endregion

  //region methods
  
  Future<V2TXLiveVideoEncoderParam?> initWith(V2TXLiveVideoResolution resolution) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: V2TXLiveVideoEncoderParam@$refId::initWith([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::initWith', {"resolution": resolution.toValue(), "__this__": this});
  
  
    // handle native call
  
  
    return TencentPlayerFluttifyIOSAs<V2TXLiveVideoEncoderParam>(__result__);
  }
  
  //endregion

  @override
  String toString() {
    return 'V2TXLiveVideoEncoderParam{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension V2TXLiveVideoEncoderParam_Batch on List<V2TXLiveVideoEncoderParam?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  Future<List<V2TXLiveVideoResolution?>> get_videoResolution_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoEncoderParam::get_videoResolution_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toV2TXLiveVideoResolution()).cast<V2TXLiveVideoResolution?>().toList();
  }
  
  Future<List<V2TXLiveVideoResolutionMode?>> get_videoResolutionMode_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoEncoderParam::get_videoResolutionMode_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toV2TXLiveVideoResolutionMode()).cast<V2TXLiveVideoResolutionMode?>().toList();
  }
  
  Future<List<int?>> get_videoFps_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoEncoderParam::get_videoFps_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<int?>> get_videoBitrate_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoEncoderParam::get_videoBitrate_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<int?>> get_minVideoBitrate_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoEncoderParam::get_minVideoBitrate_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_videoResolution_batch(List<V2TXLiveVideoResolution> videoResolution) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::set_videoResolution_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "videoResolution": videoResolution[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_videoResolutionMode_batch(List<V2TXLiveVideoResolutionMode> videoResolutionMode) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::set_videoResolutionMode_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "videoResolutionMode": videoResolutionMode[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_videoFps_batch(List<int> videoFps) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::set_videoFps_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "videoFps": videoFps[__i__]}]);
  
  
  }
  
  Future<void> set_videoBitrate_batch(List<int> videoBitrate) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::set_videoBitrate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "videoBitrate": videoBitrate[__i__]}]);
  
  
  }
  
  Future<void> set_minVideoBitrate_batch(List<int> minVideoBitrate) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::set_minVideoBitrate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "minVideoBitrate": minVideoBitrate[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<V2TXLiveVideoEncoderParam?>> initWith_batch(List<V2TXLiveVideoResolution> resolution) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoEncoderParam::initWith_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"resolution": resolution[__i__].toValue(), "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => TencentPlayerFluttifyIOSAs<V2TXLiveVideoEncoderParam>(__result__)).cast<V2TXLiveVideoEncoderParam?>().toList();
  }
  
  //endregion
}