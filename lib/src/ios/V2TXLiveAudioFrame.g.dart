// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class V2TXLiveAudioFrame extends NSObject  {
  //region constants
  static const String name__ = 'V2TXLiveAudioFrame';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  static Future<V2TXLiveAudioFrame> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createV2TXLiveAudioFrame',
      {'init': init}
    );
    return TencentPlayerFluttifyIOSAs<V2TXLiveAudioFrame>(__result__)!;
  }
  
  static Future<List<V2TXLiveAudioFrame>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchV2TXLiveAudioFrame',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyIOSAs<V2TXLiveAudioFrame>(it))
        .where((element) => element !=null)
        .cast<V2TXLiveAudioFrame>()
        .toList() ?? <V2TXLiveAudioFrame>[];
  }
  
  //endregion

  //region getters
  Future<NSData?> get_data() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveAudioFrame::get_data", {'__this__': this});
    return TencentPlayerFluttifyIOSAs<NSData>(__result__);
  }
  
  Future<int?> get_sampleRate() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveAudioFrame::get_sampleRate", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_channel() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveAudioFrame::get_channel", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_data(NSData data) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveAudioFrame::set_data', <String, dynamic>{'__this__': this, "data": data});
  
  
  }
  
  Future<void> set_sampleRate(int sampleRate) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveAudioFrame::set_sampleRate', <String, dynamic>{'__this__': this, "sampleRate": sampleRate});
  
  
  }
  
  Future<void> set_channel(int channel) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveAudioFrame::set_channel', <String, dynamic>{'__this__': this, "channel": channel});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'V2TXLiveAudioFrame{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension V2TXLiveAudioFrame_Batch on List<V2TXLiveAudioFrame> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  Future<List<NSData?>> get_data_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveAudioFrame::get_data_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => TencentPlayerFluttifyIOSAs<NSData>(__result__)).cast<NSData?>().toList();
  }
  
  Future<List<int?>> get_sampleRate_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveAudioFrame::get_sampleRate_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<int?>> get_channel_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveAudioFrame::get_channel_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_data_batch(List<NSData> data) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveAudioFrame::set_data_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "data": data[__i__]}]);
  
  
  }
  
  Future<void> set_sampleRate_batch(List<int> sampleRate) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveAudioFrame::set_sampleRate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "sampleRate": sampleRate[__i__]}]);
  
  
  }
  
  Future<void> set_channel_batch(List<int> channel) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveAudioFrame::set_channel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "channel": channel[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}