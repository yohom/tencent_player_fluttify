// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';


// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
// type check
@optionalTypeArgs
Future<bool> TencentPlayerFluttifyIOSIs<T>(dynamic __this__) async {
  final typeName = T.toString();
  if (RegExp(r'^(List<)?(String|int|double)(>)?|(Map<String,(String|int|double)>)$').hasMatch(typeName)) {
    return __this__ is T;
  }
  else if (T == TXImageSprite) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXImageSprite', {'__this__': __this__});
    return result;
  } else if (T == TXVodDownloadDataSource) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXVodDownloadDataSource', {'__this__': __this__});
    return result;
  } else if (T == TXVodDownloadMediaInfo) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXVodDownloadMediaInfo', {'__this__': __this__});
    return result;
  } else if (T == TXVodDownloadManager) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXVodDownloadManager', {'__this__': __this__});
    return result;
  } else if (T == TXLiveBase) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXLiveBase', {'__this__': __this__});
    return result;
  } else if (T == TXVodPlayConfig) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXVodPlayConfig', {'__this__': __this__});
    return result;
  } else if (T == TXVodPreloadManager) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXVodPreloadManager', {'__this__': __this__});
    return result;
  } else if (T == TXLivePlayConfig) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXLivePlayConfig', {'__this__': __this__});
    return result;
  } else if (T == TXVodPlayer) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXVodPlayer', {'__this__': __this__});
    return result;
  } else if (T == V2TXLivePlayer) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfV2TXLivePlayer', {'__this__': __this__});
    return result;
  } else if (T == TXBitrateItem) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXBitrateItem', {'__this__': __this__});
    return result;
  } else if (T == V2TXLivePremier) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfV2TXLivePremier', {'__this__': __this__});
    return result;
  } else if (T == TXPlayerAuthParams) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXPlayerAuthParams', {'__this__': __this__});
    return result;
  } else if (T == TXLivePlayer) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXLivePlayer', {'__this__': __this__});
    return result;
  } else if (T == TXRecordResult) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXRecordResult', {'__this__': __this__});
    return result;
  } else if (T == V2TXLiveVideoEncoderParam) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfV2TXLiveVideoEncoderParam', {'__this__': __this__});
    return result;
  } else if (T == V2TXLiveVideoFrame) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfV2TXLiveVideoFrame', {'__this__': __this__});
    return result;
  } else if (T == V2TXLiveAudioFrame) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfV2TXLiveAudioFrame', {'__this__': __this__});
    return result;
  } else if (T == V2TXLivePusherStatistics) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfV2TXLivePusherStatistics', {'__this__': __this__});
    return result;
  } else if (T == V2TXLivePlayerStatistics) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfV2TXLivePlayerStatistics', {'__this__': __this__});
    return result;
  } else if (T == V2TXLiveMixStream) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfV2TXLiveMixStream', {'__this__': __this__});
    return result;
  } else if (T == V2TXLiveTranscodingConfig) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfV2TXLiveTranscodingConfig', {'__this__': __this__});
    return result;
  } else if (T == V2TXLiveLogConfig) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfV2TXLiveLogConfig', {'__this__': __this__});
    return result;
  } else if (T == TXPlayerGlobalSetting) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfTXPlayerGlobalSetting', {'__this__': __this__});
    return result;
  } else if (T == CGRect) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfCGRect', {'__this__': __this__});
    return result;
  } else if (T == CGPoint) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfCGPoint', {'__this__': __this__});
    return result;
  } else if (T == CGSize) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfCGSize', {'__this__': __this__});
    return result;
  } else if (T == UIEdgeInsets) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfUIEdgeInsets', {'__this__': __this__});
    return result;
  } else if (T == NSError) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfNSError', {'__this__': __this__});
    return result;
  } else if (T == UIView) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfUIView', {'__this__': __this__});
    return result;
  } else if (T == UIViewController) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfUIViewController', {'__this__': __this__});
    return result;
  } else if (T == UIControl) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfUIControl', {'__this__': __this__});
    return result;
  } else if (T == UIImage) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfUIImage', {'__this__': __this__});
    return result;
  } else if (T == UIImageView) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfUIImageView', {'__this__': __this__});
    return result;
  } else if (T == UIColor) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfUIColor', {'__this__': __this__});
    return result;
  } else if (T == NSData) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfNSData', {'__this__': __this__});
    return result;
  } else if (T == NSDate) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfNSDate', {'__this__': __this__});
    return result;
  } else if (T == NSOperation) {
    final result = await kTencentPlayerFluttifyChannel.invokeMethod('RefClass::isKindOfNSOperation', {'__this__': __this__});
    return result;
  }
  else {
    return false;
  }
}

// type cast
// 给一个可选的泛型, 如果没有指定泛型就返回dynamic
@optionalTypeArgs
T? TencentPlayerFluttifyIOSAs<T>(dynamic __this__) {
  final typeName = T.toString();

  if (__this__ == null) {
    return null;
  } else if (RegExp(r'^(List<)?(String|int|double)(>)?|(Map<String,(String|int|double)>)$').hasMatch(typeName)) {
    return __this__ as T;
  }
  else if (T == TXImageSprite) {
    return (TXImageSprite()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXVodDownloadDataSource) {
    return (TXVodDownloadDataSource()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXVodDownloadMediaInfo) {
    return (TXVodDownloadMediaInfo()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXVodDownloadManager) {
    return (TXVodDownloadManager()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXLiveBase) {
    return (TXLiveBase()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXVodPlayConfig) {
    return (TXVodPlayConfig()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXVodPreloadManager) {
    return (TXVodPreloadManager()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXLivePlayConfig) {
    return (TXLivePlayConfig()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXVodPlayer) {
    return (TXVodPlayer()..refId = (__this__ as Ref).refId) as T;
  } else if (T == V2TXLivePlayer) {
    return (V2TXLivePlayer()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXBitrateItem) {
    return (TXBitrateItem()..refId = (__this__ as Ref).refId) as T;
  } else if (T == V2TXLivePremier) {
    return (V2TXLivePremier()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXPlayerAuthParams) {
    return (TXPlayerAuthParams()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXLivePlayer) {
    return (TXLivePlayer()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXRecordResult) {
    return (TXRecordResult()..refId = (__this__ as Ref).refId) as T;
  } else if (T == V2TXLiveVideoEncoderParam) {
    return (V2TXLiveVideoEncoderParam()..refId = (__this__ as Ref).refId) as T;
  } else if (T == V2TXLiveVideoFrame) {
    return (V2TXLiveVideoFrame()..refId = (__this__ as Ref).refId) as T;
  } else if (T == V2TXLiveAudioFrame) {
    return (V2TXLiveAudioFrame()..refId = (__this__ as Ref).refId) as T;
  } else if (T == V2TXLivePusherStatistics) {
    return (V2TXLivePusherStatistics()..refId = (__this__ as Ref).refId) as T;
  } else if (T == V2TXLivePlayerStatistics) {
    return (V2TXLivePlayerStatistics()..refId = (__this__ as Ref).refId) as T;
  } else if (T == V2TXLiveMixStream) {
    return (V2TXLiveMixStream()..refId = (__this__ as Ref).refId) as T;
  } else if (T == V2TXLiveTranscodingConfig) {
    return (V2TXLiveTranscodingConfig()..refId = (__this__ as Ref).refId) as T;
  } else if (T == V2TXLiveLogConfig) {
    return (V2TXLiveLogConfig()..refId = (__this__ as Ref).refId) as T;
  } else if (T == TXPlayerGlobalSetting) {
    return (TXPlayerGlobalSetting()..refId = (__this__ as Ref).refId) as T;
  } else if (T == CGRect) {
    return (CGRect()..refId = (__this__ as Ref).refId) as T;
  } else if (T == CGPoint) {
    return (CGPoint()..refId = (__this__ as Ref).refId) as T;
  } else if (T == CGSize) {
    return (CGSize()..refId = (__this__ as Ref).refId) as T;
  } else if (T == UIEdgeInsets) {
    return (UIEdgeInsets()..refId = (__this__ as Ref).refId) as T;
  } else if (T == NSError) {
    return (NSError()..refId = (__this__ as Ref).refId) as T;
  } else if (T == UIView) {
    return (UIView()..refId = (__this__ as Ref).refId) as T;
  } else if (T == UIViewController) {
    return (UIViewController()..refId = (__this__ as Ref).refId) as T;
  } else if (T == UIControl) {
    return (UIControl()..refId = (__this__ as Ref).refId) as T;
  } else if (T == UIImage) {
    return (UIImage()..refId = (__this__ as Ref).refId) as T;
  } else if (T == UIImageView) {
    return (UIImageView()..refId = (__this__ as Ref).refId) as T;
  } else if (T == UIColor) {
    return (UIColor()..refId = (__this__ as Ref).refId) as T;
  } else if (T == NSData) {
    return (NSData()..refId = (__this__ as Ref).refId) as T;
  } else if (T == NSDate) {
    return (NSDate()..refId = (__this__ as Ref).refId) as T;
  } else if (T == NSOperation) {
    return (NSOperation()..refId = (__this__ as Ref).refId) as T;
  }
  
  else {
    return __this__;
  }
}