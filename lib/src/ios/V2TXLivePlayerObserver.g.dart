// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class _V2TXLivePlayerObserver_SUB extends NSObject with V2TXLivePlayerObserver {}

mixin V2TXLivePlayerObserver on NSObject {
  

  static V2TXLivePlayerObserver subInstance() => _V2TXLivePlayerObserver_SUB();

  

  @override
  final String tag__ = 'tencent_player_fluttify';

  

  

  Future<void> onError_code_message_extraInfo(V2TXLivePlayer? player, V2TXLiveCode? code, String? msg, Map? extraInfo) async {}
  
  Future<void> onWarning_code_message_extraInfo(V2TXLivePlayer? player, V2TXLiveCode? code, String? msg, Map? extraInfo) async {}
  
  Future<void> onVideoResolutionChanged_width_height(V2TXLivePlayer? player, int? width, int? height) async {}
  
  Future<void> onConnected_extraInfo(V2TXLivePlayer? player, Map? extraInfo) async {}
  
  Future<void> onVideoPlaying_firstPlay_extraInfo(V2TXLivePlayer? player, bool? firstPlay, Map? extraInfo) async {}
  
  Future<void> onAudioPlaying_firstPlay_extraInfo(V2TXLivePlayer? player, bool? firstPlay, Map? extraInfo) async {}
  
  Future<void> onVideoLoading_extraInfo(V2TXLivePlayer? player, Map? extraInfo) async {}
  
  Future<void> onAudioLoading_extraInfo(V2TXLivePlayer? player, Map? extraInfo) async {}
  
  Future<void> onPlayoutVolumeUpdate_volume(V2TXLivePlayer? player, int? volume) async {}
  
  Future<void> onStatisticsUpdate_statistics(V2TXLivePlayer? player, V2TXLivePlayerStatistics? statistics) async {}
  
  Future<void> onSnapshotComplete_image(V2TXLivePlayer? player, UIImage? image) async {}
  
  Future<void> onRenderVideoFrame_frame(V2TXLivePlayer? player, V2TXLiveVideoFrame? videoFrame) async {}
  
  Future<void> onReceiveSeiMessage_payloadType_data(V2TXLivePlayer? player, int? payloadType, NSData? data) async {}
  
}

