// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class TXDeviceManager extends NSObject  {
  //region constants
  static const String name__ = 'TXDeviceManager';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  static Future<TXDeviceManager> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createTXDeviceManager',
      {'init': init}
    );
    return TencentPlayerFluttifyIOSAs<TXDeviceManager>(__result__)!;
  }
  
  static Future<List<TXDeviceManager>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchTXDeviceManager',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyIOSAs<TXDeviceManager>(it))
        .where((element) => element !=null)
        .cast<TXDeviceManager>()
        .toList() ?? <TXDeviceManager>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<bool?> isFrontCamera() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::isFrontCamera([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::isFrontCamera', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> switchCamera(bool? frontCamera) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::switchCamera([\'frontCamera\':$frontCamera])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::switchCamera', {"frontCamera": frontCamera, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool?> isCameraZoomSupported() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::isCameraZoomSupported([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::isCameraZoomSupported', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<double?> getCameraZoomMaxRatio() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::getCameraZoomMaxRatio([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::getCameraZoomMaxRatio', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setCameraZoomRatio(double? zoomRatio) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::setCameraZoomRatio([\'zoomRatio\':$zoomRatio])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::setCameraZoomRatio', {"zoomRatio": zoomRatio, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool?> isAutoFocusEnabled() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::isAutoFocusEnabled([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::isAutoFocusEnabled', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> enableCameraAutoFocus(bool? enabled) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::enableCameraAutoFocus([\'enabled\':$enabled])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::enableCameraAutoFocus', {"enabled": enabled, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setCameraFocusPosition(CGPoint? position) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::setCameraFocusPosition([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::setCameraFocusPosition', {"position": position, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool?> isCameraTorchSupported() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::isCameraTorchSupported([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::isCameraTorchSupported', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> enableCameraTorch(bool? enabled) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::enableCameraTorch([\'enabled\':$enabled])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::enableCameraTorch', {"enabled": enabled, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setAudioRoute(TXAudioRoute? route) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::setAudioRoute([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::setAudioRoute', {"route": route?.toValue(), "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  @deprecated
  Future<int?> setSystemVolumeType(TXSystemVolumeType? type) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXDeviceManager@$refId::setSystemVolumeType([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::setSystemVolumeType', {"type": type?.toValue(), "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'TXDeviceManager{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension TXDeviceManager_Batch on List<TXDeviceManager?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<bool?>> isFrontCamera_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::isFrontCamera_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  
  Future<List<int?>> switchCamera_batch(List<bool?> frontCamera) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::switchCamera_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"frontCamera": frontCamera[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<bool?>> isCameraZoomSupported_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::isCameraZoomSupported_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  
  Future<List<double?>> getCameraZoomMaxRatio_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::getCameraZoomMaxRatio_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<double?>().toList();
  }
  
  
  Future<List<int?>> setCameraZoomRatio_batch(List<double?> zoomRatio) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::setCameraZoomRatio_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"zoomRatio": zoomRatio[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<bool?>> isAutoFocusEnabled_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::isAutoFocusEnabled_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  
  Future<List<int?>> enableCameraAutoFocus_batch(List<bool?> enabled) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::enableCameraAutoFocus_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"enabled": enabled[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setCameraFocusPosition_batch(List<CGPoint?> position) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::setCameraFocusPosition_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"position": position[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<bool?>> isCameraTorchSupported_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::isCameraTorchSupported_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  
  Future<List<int?>> enableCameraTorch_batch(List<bool?> enabled) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::enableCameraTorch_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"enabled": enabled[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setAudioRoute_batch(List<TXAudioRoute?> route) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::setAudioRoute_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"route": route[__i__]?.toValue(), "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  @deprecated
  Future<List<int?>> setSystemVolumeType_batch(List<TXSystemVolumeType?> type) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXDeviceManager::setSystemVolumeType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"type": type[__i__]?.toValue(), "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  //endregion
}