// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class _TXAudioCustomProcessDelegate_SUB extends NSObject with TXAudioCustomProcessDelegate {}

mixin TXAudioCustomProcessDelegate on NSObject {
  

  static TXAudioCustomProcessDelegate subInstance() => _TXAudioCustomProcessDelegate_SUB();

  static Future<TXAudioCustomProcessDelegate> anonymous__() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXAudioCustomProcessDelegate::createAnonymous__');
  
    final __object__ = TencentPlayerFluttifyIOSAs<TXAudioCustomProcessDelegate>(__result__)!;
  
    // handle callback
    MethodChannel('TXAudioCustomProcessDelegate::Callback@${__object__.refId}', kTencentPlayerFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'onRecordRawPcmData_timeStamp_sampleRate_channels_withBgm':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onRecordRawPcmData_timeStamp_sampleRate_channels_withBgm?.call([\'data\':${args['data']}, \'timeStamp\':${args['timeStamp']}, \'sampleRate\':${args['sampleRate']}, \'channels\':${args['channels']}, \'withBgm\':${args['withBgm']}])');
                }
            
                // handle the native call
                __object__.onRecordRawPcmData_timeStamp_sampleRate_channels_withBgm?.call(TencentPlayerFluttifyIOSAs<NSData>(args['data']), args['timeStamp'], args['sampleRate'], args['channels'], args['withBgm']);
                break;
              case 'onRecordPcmData_timeStamp_sampleRate_channels':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onRecordPcmData_timeStamp_sampleRate_channels?.call([\'data\':${args['data']}, \'timeStamp\':${args['timeStamp']}, \'sampleRate\':${args['sampleRate']}, \'channels\':${args['channels']}])');
                }
            
                // handle the native call
                __object__.onRecordPcmData_timeStamp_sampleRate_channels?.call(TencentPlayerFluttifyIOSAs<NSData>(args['data']), args['timeStamp'], args['sampleRate'], args['channels']);
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e.toString());
            rethrow;
          }
        });
  
    return __object__;
  }
  

  @override
  final String tag__ = 'tencent_player_fluttify';

  

  

  Future<void> Function(NSData? data, int? timeStamp, int? sampleRate, int? channels, bool? withBgm)? onRecordRawPcmData_timeStamp_sampleRate_channels_withBgm;
  
  Future<void> Function(NSData? data, int? timeStamp, int? sampleRate, int? channels)? onRecordPcmData_timeStamp_sampleRate_channels;
  
}

