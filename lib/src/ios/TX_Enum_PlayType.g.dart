// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

enum TX_Enum_PlayType {
  PLAY_TYPE_LIVE_RTMP /* 0 */,
  PLAY_TYPE_LIVE_FLV /* 1 */,
  PLAY_TYPE_VOD_FLV /* 2 */,
  PLAY_TYPE_VOD_HLS /* 3 */,
  PLAY_TYPE_VOD_MP4 /* 4 */,
  PLAY_TYPE_LIVE_RTMP_ACC /* 5 */,
  PLAY_TYPE_LOCAL_VIDEO /* 6 */
}

extension TX_Enum_PlayTypeToX on TX_Enum_PlayType {
  int toValue() {
    switch (this) {
      case TX_Enum_PlayType.PLAY_TYPE_LIVE_RTMP: return 0;
      case TX_Enum_PlayType.PLAY_TYPE_LIVE_FLV: return 1;
      case TX_Enum_PlayType.PLAY_TYPE_VOD_FLV: return 2;
      case TX_Enum_PlayType.PLAY_TYPE_VOD_HLS: return 3;
      case TX_Enum_PlayType.PLAY_TYPE_VOD_MP4: return 4;
      case TX_Enum_PlayType.PLAY_TYPE_LIVE_RTMP_ACC: return 5;
      case TX_Enum_PlayType.PLAY_TYPE_LOCAL_VIDEO: return 6;
      default: return 0;
    }
  }
}

extension TX_Enum_PlayTypeFromX on int {
  TX_Enum_PlayType toTX_Enum_PlayType() {
    switch (this) {
      case 0: return TX_Enum_PlayType.PLAY_TYPE_LIVE_RTMP;
      case 1: return TX_Enum_PlayType.PLAY_TYPE_LIVE_FLV;
      case 2: return TX_Enum_PlayType.PLAY_TYPE_VOD_FLV;
      case 3: return TX_Enum_PlayType.PLAY_TYPE_VOD_HLS;
      case 4: return TX_Enum_PlayType.PLAY_TYPE_VOD_MP4;
      case 5: return TX_Enum_PlayType.PLAY_TYPE_LIVE_RTMP_ACC;
      case 6: return TX_Enum_PlayType.PLAY_TYPE_LOCAL_VIDEO;
      default: return TX_Enum_PlayType.values[this + 0];
    }
  }
}