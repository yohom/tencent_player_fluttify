// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

enum V2TXLiveCode {
  V2TXLIVE_OK /* 0 */,
  V2TXLIVE_ERROR_FAILED /* -1 */,
  V2TXLIVE_ERROR_INVALID_PARAMETER /* -2 */,
  V2TXLIVE_ERROR_REFUSED /* -3 */,
  V2TXLIVE_ERROR_NOT_SUPPORTED /* -4 */,
  V2TXLIVE_ERROR_INVALID_LICENSE /* -5 */,
  V2TXLIVE_ERROR_REQUEST_TIMEOUT /* -6 */,
  V2TXLIVE_ERROR_SERVER_PROCESS_FAILED /* -7 */,
  V2TXLIVE_ERROR_DISCONNECTED /* -8 */,
  V2TXLIVE_WARNING_NETWORK_BUSY /* 1101 */,
  V2TXLIVE_WARNING_VIDEO_BLOCK /* 2105 */,
  V2TXLIVE_WARNING_CAMERA_START_FAILED /* -1301 */,
  V2TXLIVE_WARNING_CAMERA_OCCUPIED /* -1316 */,
  V2TXLIVE_WARNING_CAMERA_NO_PERMISSION /* -1314 */,
  V2TXLIVE_WARNING_MICROPHONE_START_FAILED /* -1302 */,
  V2TXLIVE_WARNING_MICROPHONE_OCCUPIED /* -1319 */,
  V2TXLIVE_WARNING_MICROPHONE_NO_PERMISSION /* -1317 */,
  V2TXLIVE_WARNING_SCREEN_CAPTURE_NOT_SUPPORTED /* -1309 */,
  V2TXLIVE_WARNING_SCREEN_CAPTURE_START_FAILED /* -1308 */,
  V2TXLIVE_WARNING_SCREEN_CAPTURE_INTERRUPTED /* -7001 */
}

extension V2TXLiveCodeToX on V2TXLiveCode {
  int toValue() {
    switch (this) {
      case V2TXLiveCode.V2TXLIVE_OK: return 0;
      case V2TXLiveCode.V2TXLIVE_ERROR_FAILED: return -1;
      case V2TXLiveCode.V2TXLIVE_ERROR_INVALID_PARAMETER: return -2;
      case V2TXLiveCode.V2TXLIVE_ERROR_REFUSED: return -3;
      case V2TXLiveCode.V2TXLIVE_ERROR_NOT_SUPPORTED: return -4;
      case V2TXLiveCode.V2TXLIVE_ERROR_INVALID_LICENSE: return -5;
      case V2TXLiveCode.V2TXLIVE_ERROR_REQUEST_TIMEOUT: return -6;
      case V2TXLiveCode.V2TXLIVE_ERROR_SERVER_PROCESS_FAILED: return -7;
      case V2TXLiveCode.V2TXLIVE_ERROR_DISCONNECTED: return -8;
      case V2TXLiveCode.V2TXLIVE_WARNING_NETWORK_BUSY: return 1101;
      case V2TXLiveCode.V2TXLIVE_WARNING_VIDEO_BLOCK: return 2105;
      case V2TXLiveCode.V2TXLIVE_WARNING_CAMERA_START_FAILED: return -1301;
      case V2TXLiveCode.V2TXLIVE_WARNING_CAMERA_OCCUPIED: return -1316;
      case V2TXLiveCode.V2TXLIVE_WARNING_CAMERA_NO_PERMISSION: return -1314;
      case V2TXLiveCode.V2TXLIVE_WARNING_MICROPHONE_START_FAILED: return -1302;
      case V2TXLiveCode.V2TXLIVE_WARNING_MICROPHONE_OCCUPIED: return -1319;
      case V2TXLiveCode.V2TXLIVE_WARNING_MICROPHONE_NO_PERMISSION: return -1317;
      case V2TXLiveCode.V2TXLIVE_WARNING_SCREEN_CAPTURE_NOT_SUPPORTED: return -1309;
      case V2TXLiveCode.V2TXLIVE_WARNING_SCREEN_CAPTURE_START_FAILED: return -1308;
      case V2TXLiveCode.V2TXLIVE_WARNING_SCREEN_CAPTURE_INTERRUPTED: return -7001;
      default: return 0;
    }
  }
}

extension V2TXLiveCodeFromX on int {
  V2TXLiveCode toV2TXLiveCode() {
    switch (this) {
      case 0: return V2TXLiveCode.V2TXLIVE_OK;
      case -1: return V2TXLiveCode.V2TXLIVE_ERROR_FAILED;
      case -2: return V2TXLiveCode.V2TXLIVE_ERROR_INVALID_PARAMETER;
      case -3: return V2TXLiveCode.V2TXLIVE_ERROR_REFUSED;
      case -4: return V2TXLiveCode.V2TXLIVE_ERROR_NOT_SUPPORTED;
      case -5: return V2TXLiveCode.V2TXLIVE_ERROR_INVALID_LICENSE;
      case -6: return V2TXLiveCode.V2TXLIVE_ERROR_REQUEST_TIMEOUT;
      case -7: return V2TXLiveCode.V2TXLIVE_ERROR_SERVER_PROCESS_FAILED;
      case -8: return V2TXLiveCode.V2TXLIVE_ERROR_DISCONNECTED;
      case 1101: return V2TXLiveCode.V2TXLIVE_WARNING_NETWORK_BUSY;
      case 2105: return V2TXLiveCode.V2TXLIVE_WARNING_VIDEO_BLOCK;
      case -1301: return V2TXLiveCode.V2TXLIVE_WARNING_CAMERA_START_FAILED;
      case -1316: return V2TXLiveCode.V2TXLIVE_WARNING_CAMERA_OCCUPIED;
      case -1314: return V2TXLiveCode.V2TXLIVE_WARNING_CAMERA_NO_PERMISSION;
      case -1302: return V2TXLiveCode.V2TXLIVE_WARNING_MICROPHONE_START_FAILED;
      case -1319: return V2TXLiveCode.V2TXLIVE_WARNING_MICROPHONE_OCCUPIED;
      case -1317: return V2TXLiveCode.V2TXLIVE_WARNING_MICROPHONE_NO_PERMISSION;
      case -1309: return V2TXLiveCode.V2TXLIVE_WARNING_SCREEN_CAPTURE_NOT_SUPPORTED;
      case -1308: return V2TXLiveCode.V2TXLIVE_WARNING_SCREEN_CAPTURE_START_FAILED;
      case -7001: return V2TXLiveCode.V2TXLIVE_WARNING_SCREEN_CAPTURE_INTERRUPTED;
      default: return V2TXLiveCode.values[this + 0];
    }
  }
}