// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class _TXVodDownloadDelegate_SUB extends NSObject with TXVodDownloadDelegate {}

mixin TXVodDownloadDelegate on NSObject {
  

  static TXVodDownloadDelegate subInstance() => _TXVodDownloadDelegate_SUB();

  static Future<TXVodDownloadDelegate> anonymous__({void Function(TXVodDownloadMediaInfo? mediaInfo)? onDownloadStart, void Function(TXVodDownloadMediaInfo? mediaInfo)? onDownloadProgress, void Function(TXVodDownloadMediaInfo? mediaInfo)? onDownloadStop, void Function(TXVodDownloadMediaInfo? mediaInfo)? onDownloadFinish, void Function(TXVodDownloadMediaInfo? mediaInfo, TXDownloadError? code, String? msg)? onDownloadError, int Function(TXVodDownloadMediaInfo? mediaInfo, String? url, NSData? data)? hlsKeyVerify}) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXVodDownloadDelegate::createAnonymous__');
  
    final __object__ = TencentPlayerFluttifyIOSAs<TXVodDownloadDelegate>(__result__)!;
  
    // handle callback
    MethodChannel('TXVodDownloadDelegate::Callback@${__object__.refId}', kTencentPlayerFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'onDownloadStart':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onDownloadStart?.call([\'mediaInfo\':${args['mediaInfo']}])');
                }
            
                // handle the native call
                onDownloadStart?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']));
                break;
              case 'onDownloadProgress':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onDownloadProgress?.call([\'mediaInfo\':${args['mediaInfo']}])');
                }
            
                // handle the native call
                onDownloadProgress?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']));
                break;
              case 'onDownloadStop':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onDownloadStop?.call([\'mediaInfo\':${args['mediaInfo']}])');
                }
            
                // handle the native call
                onDownloadStop?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']));
                break;
              case 'onDownloadFinish':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onDownloadFinish?.call([\'mediaInfo\':${args['mediaInfo']}])');
                }
            
                // handle the native call
                onDownloadFinish?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']));
                break;
              case 'onDownloadError:errorCode:errorMsg':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onDownloadError?.call([\'mediaInfo\':${args['mediaInfo']}, \'code\':${args['code']}, \'msg\':${args['msg']}])');
                }
            
                // handle the native call
                onDownloadError?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']), (args['code'] as int).toTXDownloadError(), args['msg']);
                break;
              case 'hlsKeyVerify:url:data':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: hlsKeyVerify?.call([\'mediaInfo\':${args['mediaInfo']}, \'url\':${args['url']}, \'data\':${args['data']}])');
                }
            
                // handle the native call
                hlsKeyVerify?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']), args['url'], TencentPlayerFluttifyIOSAs<NSData>(args['data']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e.toString());
            rethrow;
          }
        });
  
    return __object__;
  }
  

  @override
  final String tag__ = 'tencent_player_fluttify';

  

  

  Future<void> onDownloadStart(TXVodDownloadMediaInfo? mediaInfo) async {}
  
  Future<void> onDownloadProgress(TXVodDownloadMediaInfo? mediaInfo) async {}
  
  Future<void> onDownloadStop(TXVodDownloadMediaInfo? mediaInfo) async {}
  
  Future<void> onDownloadFinish(TXVodDownloadMediaInfo? mediaInfo) async {}
  
  Future<void> onDownloadError_errorCode_errorMsg(TXVodDownloadMediaInfo? mediaInfo, TXDownloadError? code, String? msg) async {}
  
  Future<int?> hlsKeyVerify_url_data(TXVodDownloadMediaInfo? mediaInfo, String? url, NSData? data) async {}
  
}

