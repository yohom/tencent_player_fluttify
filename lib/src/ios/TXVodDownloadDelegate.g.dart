// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class _TXVodDownloadDelegate_SUB extends NSObject with TXVodDownloadDelegate {}

mixin TXVodDownloadDelegate on NSObject {
  

  static TXVodDownloadDelegate subInstance() => _TXVodDownloadDelegate_SUB();

  static Future<TXVodDownloadDelegate> anonymous__() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXVodDownloadDelegate::createAnonymous__');
  
    final __object__ = TencentPlayerFluttifyIOSAs<TXVodDownloadDelegate>(__result__)!;
  
    // handle callback
    MethodChannel('TXVodDownloadDelegate::Callback@${__object__.refId}', kTencentPlayerFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'onDownloadStart':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onDownloadStart?.call([\'mediaInfo\':${args['mediaInfo']}])');
                }
            
                // handle the native call
                __object__.onDownloadStart?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']));
                break;
              case 'onDownloadProgress':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onDownloadProgress?.call([\'mediaInfo\':${args['mediaInfo']}])');
                }
            
                // handle the native call
                __object__.onDownloadProgress?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']));
                break;
              case 'onDownloadStop':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onDownloadStop?.call([\'mediaInfo\':${args['mediaInfo']}])');
                }
            
                // handle the native call
                __object__.onDownloadStop?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']));
                break;
              case 'onDownloadFinish':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onDownloadFinish?.call([\'mediaInfo\':${args['mediaInfo']}])');
                }
            
                // handle the native call
                __object__.onDownloadFinish?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']));
                break;
              case 'onDownloadError_errorCode_errorMsg':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onDownloadError_errorCode_errorMsg?.call([\'mediaInfo\':${args['mediaInfo']}, \'code\':${args['code']}, \'msg\':${args['msg']}])');
                }
            
                // handle the native call
                __object__.onDownloadError_errorCode_errorMsg?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']), (args['code'] as int).toTXDownloadError(), args['msg']);
                break;
              case 'hlsKeyVerify_url_data':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.hlsKeyVerify_url_data?.call([\'mediaInfo\':${args['mediaInfo']}, \'url\':${args['url']}, \'data\':${args['data']}])');
                }
            
                // handle the native call
                __object__.hlsKeyVerify_url_data?.call(TencentPlayerFluttifyIOSAs<TXVodDownloadMediaInfo>(args['mediaInfo']), args['url'], TencentPlayerFluttifyIOSAs<NSData>(args['data']));
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e.toString());
            rethrow;
          }
        });
  
    return __object__;
  }
  

  @override
  final String tag__ = 'tencent_player_fluttify';

  

  

  Future<void> Function(TXVodDownloadMediaInfo? mediaInfo)? onDownloadStart;
  
  Future<void> Function(TXVodDownloadMediaInfo? mediaInfo)? onDownloadProgress;
  
  Future<void> Function(TXVodDownloadMediaInfo? mediaInfo)? onDownloadStop;
  
  Future<void> Function(TXVodDownloadMediaInfo? mediaInfo)? onDownloadFinish;
  
  Future<void> Function(TXVodDownloadMediaInfo? mediaInfo, TXDownloadError? code, String? msg)? onDownloadError_errorCode_errorMsg;
  
  Future<int?> Function(TXVodDownloadMediaInfo? mediaInfo, String? url, NSData? data)? hlsKeyVerify_url_data;
  
}

