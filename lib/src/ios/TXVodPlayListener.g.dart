// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class _TXVodPlayListener_SUB extends NSObject with TXVodPlayListener {}

mixin TXVodPlayListener on NSObject {
  

  static TXVodPlayListener subInstance() => _TXVodPlayListener_SUB();

  static Future<TXVodPlayListener> anonymous__() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXVodPlayListener::createAnonymous__');
  
    final __object__ = TencentPlayerFluttifyIOSAs<TXVodPlayListener>(__result__)!;
  
    // handle callback
    MethodChannel('TXVodPlayListener::Callback@${__object__.refId}', kTencentPlayerFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'onPlayEvent_event_withParam':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onPlayEvent_event_withParam?.call([\'player\':${args['player']}, \'EvtID\':${args['EvtID']}, \'param\':${args['param']}])');
                }
            
                // handle the native call
                __object__.onPlayEvent_event_withParam?.call(TencentPlayerFluttifyIOSAs<TXVodPlayer>(args['player']), args['EvtID'], args['param']);
                break;
              case 'onNetStatus_withParam':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onNetStatus_withParam?.call([\'player\':${args['player']}, \'param\':${args['param']}])');
                }
            
                // handle the native call
                __object__.onNetStatus_withParam?.call(TencentPlayerFluttifyIOSAs<TXVodPlayer>(args['player']), args['param']);
                break;
              case 'onPlayer_pictureInPictureStateDidChange_withParam':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onPlayer_pictureInPictureStateDidChange_withParam?.call([\'player\':${args['player']}, \'pipState\':${args['pipState']}, \'param\':${args['param']}])');
                }
            
                // handle the native call
                __object__.onPlayer_pictureInPictureStateDidChange_withParam?.call(TencentPlayerFluttifyIOSAs<TXVodPlayer>(args['player']), (args['pipState'] as int).toTX_VOD_PLAYER_PIP_STATE(), args['param']);
                break;
              case 'onPlayer_pictureInPictureErrorDidOccur_withParam':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onPlayer_pictureInPictureErrorDidOccur_withParam?.call([\'player\':${args['player']}, \'errorType\':${args['errorType']}, \'param\':${args['param']}])');
                }
            
                // handle the native call
                __object__.onPlayer_pictureInPictureErrorDidOccur_withParam?.call(TencentPlayerFluttifyIOSAs<TXVodPlayer>(args['player']), (args['errorType'] as int).toTX_VOD_PLAYER_PIP_ERROR_TYPE(), args['param']);
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e.toString());
            rethrow;
          }
        });
  
    return __object__;
  }
  

  @override
  final String tag__ = 'tencent_player_fluttify';

  

  

  Future<void> Function(TXVodPlayer? player, int? EvtID, Map? param)? onPlayEvent_event_withParam;
  
  Future<void> Function(TXVodPlayer? player, Map? param)? onNetStatus_withParam;
  
  Future<void> Function(TXVodPlayer? player, TX_VOD_PLAYER_PIP_STATE? pipState, Map? param)? onPlayer_pictureInPictureStateDidChange_withParam;
  
  Future<void> Function(TXVodPlayer? player, TX_VOD_PLAYER_PIP_ERROR_TYPE? errorType, Map? param)? onPlayer_pictureInPictureErrorDidOccur_withParam;
  
}

