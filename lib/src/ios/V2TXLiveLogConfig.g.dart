// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class V2TXLiveLogConfig extends NSObject  {
  //region constants
  static const String name__ = 'V2TXLiveLogConfig';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  static Future<V2TXLiveLogConfig?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createV2TXLiveLogConfig',
      {'init': init}
    );
    return TencentPlayerFluttifyIOSAs<V2TXLiveLogConfig?>(__result__)!;
  }
  
  static Future<List<V2TXLiveLogConfig>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchV2TXLiveLogConfig',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyIOSAs<V2TXLiveLogConfig>(it))
        .where((element) => element !=null)
        .cast<V2TXLiveLogConfig>()
        .toList() ?? <V2TXLiveLogConfig>[];
  }
  
  //endregion

  //region getters
  Future<V2TXLiveLogLevel?> get_logLevel() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveLogConfig::get_logLevel", {'__this__': this});
    return (__result__ as int).toV2TXLiveLogLevel();
  }
  
  Future<bool?> get_enableObserver() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveLogConfig::get_enableObserver", {'__this__': this});
    return __result__;
  }
  
  Future<bool?> get_enableConsole() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveLogConfig::get_enableConsole", {'__this__': this});
    return __result__;
  }
  
  Future<bool?> get_enableLogFile() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveLogConfig::get_enableLogFile", {'__this__': this});
    return __result__;
  }
  
  Future<String?> get_logPath() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveLogConfig::get_logPath", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_logLevel(V2TXLiveLogLevel logLevel) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveLogConfig::set_logLevel', <String, dynamic>{'__this__': this, "logLevel": logLevel.toValue()});
  
  
  }
  
  Future<void> set_enableObserver(bool enableObserver) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveLogConfig::set_enableObserver', <String, dynamic>{'__this__': this, "enableObserver": enableObserver});
  
  
  }
  
  Future<void> set_enableConsole(bool enableConsole) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveLogConfig::set_enableConsole', <String, dynamic>{'__this__': this, "enableConsole": enableConsole});
  
  
  }
  
  Future<void> set_enableLogFile(bool enableLogFile) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveLogConfig::set_enableLogFile', <String, dynamic>{'__this__': this, "enableLogFile": enableLogFile});
  
  
  }
  
  Future<void> set_logPath(String logPath) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveLogConfig::set_logPath', <String, dynamic>{'__this__': this, "logPath": logPath});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'V2TXLiveLogConfig{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension V2TXLiveLogConfig_Batch on List<V2TXLiveLogConfig> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  Future<List<V2TXLiveLogLevel?>> get_logLevel_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveLogConfig::get_logLevel_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toV2TXLiveLogLevel()).cast<V2TXLiveLogLevel?>().toList();
  }
  
  Future<List<bool?>> get_enableObserver_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveLogConfig::get_enableObserver_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  Future<List<bool?>> get_enableConsole_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveLogConfig::get_enableConsole_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  Future<List<bool?>> get_enableLogFile_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveLogConfig::get_enableLogFile_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  Future<List<String?>> get_logPath_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveLogConfig::get_logPath_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_logLevel_batch(List<V2TXLiveLogLevel> logLevel) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveLogConfig::set_logLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "logLevel": logLevel[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_enableObserver_batch(List<bool> enableObserver) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveLogConfig::set_enableObserver_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "enableObserver": enableObserver[__i__]}]);
  
  
  }
  
  Future<void> set_enableConsole_batch(List<bool> enableConsole) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveLogConfig::set_enableConsole_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "enableConsole": enableConsole[__i__]}]);
  
  
  }
  
  Future<void> set_enableLogFile_batch(List<bool> enableLogFile) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveLogConfig::set_enableLogFile_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "enableLogFile": enableLogFile[__i__]}]);
  
  
  }
  
  Future<void> set_logPath_batch(List<String> logPath) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveLogConfig::set_logPath_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "logPath": logPath[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}