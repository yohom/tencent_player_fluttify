// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class V2TXLiveVideoFrame extends NSObject  {
  //region constants
  static const String name__ = 'V2TXLiveVideoFrame';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  static Future<V2TXLiveVideoFrame?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createV2TXLiveVideoFrame',
      {'init': init}
    );
    return TencentPlayerFluttifyIOSAs<V2TXLiveVideoFrame?>(__result__);
  }
  
  static Future<List<V2TXLiveVideoFrame>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchV2TXLiveVideoFrame',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyIOSAs<V2TXLiveVideoFrame>(it))
        .where((element) => element !=null)
        .cast<V2TXLiveVideoFrame>()
        .toList() ?? <V2TXLiveVideoFrame>[];
  }
  
  //endregion

  //region getters
  Future<V2TXLivePixelFormat?> get_pixelFormat() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_pixelFormat", {'__this__': this});
    return (__result__ as int).toV2TXLivePixelFormat();
  }
  
  Future<V2TXLiveBufferType?> get_bufferType() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_bufferType", {'__this__': this});
    return (__result__ as int).toV2TXLiveBufferType();
  }
  
  Future<NSData?> get_data() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_data", {'__this__': this});
    return TencentPlayerFluttifyIOSAs<NSData>(__result__);
  }
  
  Future<NSValue/* void* */?> get_pixelBuffer() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_pixelBuffer", {'__this__': this});
    return TencentPlayerFluttifyIOSAs<NSValue/* void* */>(__result__);
  }
  
  Future<int?> get_width() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_width", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_height() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_height", {'__this__': this});
    return __result__;
  }
  
  Future<V2TXLiveRotation?> get_rotation() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_rotation", {'__this__': this});
    return (__result__ as int).toV2TXLiveRotation();
  }
  
  Future<int?> get_textureId() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_textureId", {'__this__': this});
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_pixelFormat(V2TXLivePixelFormat pixelFormat) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_pixelFormat', <String, dynamic>{'__this__': this, "pixelFormat": pixelFormat.toValue()});
  
  
  }
  
  Future<void> set_bufferType(V2TXLiveBufferType bufferType) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_bufferType', <String, dynamic>{'__this__': this, "bufferType": bufferType.toValue()});
  
  
  }
  
  Future<void> set_data(NSData data) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_data', <String, dynamic>{'__this__': this, "data": data});
  
  
  }
  
  Future<void> set_pixelBuffer(NSValue/* void* */ pixelBuffer) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_pixelBuffer', <String, dynamic>{'__this__': this, "pixelBuffer": pixelBuffer});
  
  
  }
  
  Future<void> set_width(int width) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_width', <String, dynamic>{'__this__': this, "width": width});
  
  
  }
  
  Future<void> set_height(int height) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_height', <String, dynamic>{'__this__': this, "height": height});
  
  
  }
  
  Future<void> set_rotation(V2TXLiveRotation rotation) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_rotation', <String, dynamic>{'__this__': this, "rotation": rotation.toValue()});
  
  
  }
  
  Future<void> set_textureId(int textureId) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_textureId', <String, dynamic>{'__this__': this, "textureId": textureId});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'V2TXLiveVideoFrame{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension V2TXLiveVideoFrame_Batch on List<V2TXLiveVideoFrame> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  Future<List<V2TXLivePixelFormat?>> get_pixelFormat_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_pixelFormat_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toV2TXLivePixelFormat()).cast<V2TXLivePixelFormat?>().toList();
  }
  
  Future<List<V2TXLiveBufferType?>> get_bufferType_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_bufferType_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toV2TXLiveBufferType()).cast<V2TXLiveBufferType?>().toList();
  }
  
  Future<List<NSData?>> get_data_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_data_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => TencentPlayerFluttifyIOSAs<NSData>(__result__)).cast<NSData?>().toList();
  }
  
  Future<List<NSValue/* void* */?>> get_pixelBuffer_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_pixelBuffer_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => TencentPlayerFluttifyIOSAs<NSValue/* void* */>(__result__)).cast<NSValue/* void* */?>().toList();
  }
  
  Future<List<int?>> get_width_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_width_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<int?>> get_height_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_height_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<V2TXLiveRotation?>> get_rotation_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_rotation_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => (__result__ as int).toV2TXLiveRotation()).cast<V2TXLiveRotation?>().toList();
  }
  
  Future<List<int?>> get_textureId_batch() async {
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod("V2TXLiveVideoFrame::get_textureId_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_pixelFormat_batch(List<V2TXLivePixelFormat> pixelFormat) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_pixelFormat_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "pixelFormat": pixelFormat[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_bufferType_batch(List<V2TXLiveBufferType> bufferType) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_bufferType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "bufferType": bufferType[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_data_batch(List<NSData> data) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_data_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "data": data[__i__]}]);
  
  
  }
  
  Future<void> set_pixelBuffer_batch(List<NSValue/* void* */> pixelBuffer) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_pixelBuffer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "pixelBuffer": pixelBuffer[__i__]}]);
  
  
  }
  
  Future<void> set_width_batch(List<int> width) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_width_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "width": width[__i__]}]);
  
  
  }
  
  Future<void> set_height_batch(List<int> height) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_height_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "height": height[__i__]}]);
  
  
  }
  
  Future<void> set_rotation_batch(List<V2TXLiveRotation> rotation) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_rotation_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "rotation": rotation[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_textureId_batch(List<int> textureId) async {
    await kTencentPlayerFluttifyChannel.invokeMethod('V2TXLiveVideoFrame::set_textureId_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "textureId": textureId[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}