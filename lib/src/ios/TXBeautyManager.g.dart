// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class TXBeautyManager extends NSObject  {
  //region constants
  static const String name__ = 'TXBeautyManager';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  static Future<TXBeautyManager> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createTXBeautyManager',
      {'init': init}
    );
    return TencentPlayerFluttifyIOSAs<TXBeautyManager>(__result__)!;
  }
  
  static Future<List<TXBeautyManager>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchTXBeautyManager',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyIOSAs<TXBeautyManager>(it))
        .where((element) => element !=null)
        .cast<TXBeautyManager>()
        .toList() ?? <TXBeautyManager>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<void> setBeautyStyle(TXBeautyStyle? beautyStyle) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setBeautyStyle([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setBeautyStyle', {"beautyStyle": beautyStyle?.toValue(), "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setBeautyLevel(double? beautyLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setBeautyLevel([\'beautyLevel\':$beautyLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setBeautyLevel', {"beautyLevel": beautyLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setWhitenessLevel(double? whitenessLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setWhitenessLevel([\'whitenessLevel\':$whitenessLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setWhitenessLevel', {"whitenessLevel": whitenessLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> enableSharpnessEnhancement(bool? enable) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::enableSharpnessEnhancement([\'enable\':$enable])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::enableSharpnessEnhancement', {"enable": enable, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setRuddyLevel(double? ruddyLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setRuddyLevel([\'ruddyLevel\':$ruddyLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setRuddyLevel', {"ruddyLevel": ruddyLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setFilter(UIImage? image) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setFilter([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFilter', {"image": image, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setFilterStrength(double? strength) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setFilterStrength([\'strength\':$strength])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFilterStrength', {"strength": strength, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setGreenScreenFile(String? path) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setGreenScreenFile([\'path\':$path])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setGreenScreenFile', {"path": path, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setEyeScaleLevel(double? eyeScaleLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setEyeScaleLevel([\'eyeScaleLevel\':$eyeScaleLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setEyeScaleLevel', {"eyeScaleLevel": eyeScaleLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setFaceSlimLevel(double? faceSlimLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setFaceSlimLevel([\'faceSlimLevel\':$faceSlimLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFaceSlimLevel', {"faceSlimLevel": faceSlimLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setFaceVLevel(double? faceVLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setFaceVLevel([\'faceVLevel\':$faceVLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFaceVLevel', {"faceVLevel": faceVLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setChinLevel(double? chinLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setChinLevel([\'chinLevel\':$chinLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setChinLevel', {"chinLevel": chinLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setFaceShortLevel(double? faceShortLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setFaceShortLevel([\'faceShortLevel\':$faceShortLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFaceShortLevel', {"faceShortLevel": faceShortLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setFaceNarrowLevel(double? faceNarrowLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setFaceNarrowLevel([\'faceNarrowLevel\':$faceNarrowLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFaceNarrowLevel', {"faceNarrowLevel": faceNarrowLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setNoseSlimLevel(double? noseSlimLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setNoseSlimLevel([\'noseSlimLevel\':$noseSlimLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setNoseSlimLevel', {"noseSlimLevel": noseSlimLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setEyeLightenLevel(double? eyeLightenLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setEyeLightenLevel([\'eyeLightenLevel\':$eyeLightenLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setEyeLightenLevel', {"eyeLightenLevel": eyeLightenLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setToothWhitenLevel(double? toothWhitenLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setToothWhitenLevel([\'toothWhitenLevel\':$toothWhitenLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setToothWhitenLevel', {"toothWhitenLevel": toothWhitenLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setWrinkleRemoveLevel(double? wrinkleRemoveLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setWrinkleRemoveLevel([\'wrinkleRemoveLevel\':$wrinkleRemoveLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setWrinkleRemoveLevel', {"wrinkleRemoveLevel": wrinkleRemoveLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setPounchRemoveLevel(double? pounchRemoveLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setPounchRemoveLevel([\'pounchRemoveLevel\':$pounchRemoveLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setPounchRemoveLevel', {"pounchRemoveLevel": pounchRemoveLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setSmileLinesRemoveLevel(double? smileLinesRemoveLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setSmileLinesRemoveLevel([\'smileLinesRemoveLevel\':$smileLinesRemoveLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setSmileLinesRemoveLevel', {"smileLinesRemoveLevel": smileLinesRemoveLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setForeheadLevel(double? foreheadLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setForeheadLevel([\'foreheadLevel\':$foreheadLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setForeheadLevel', {"foreheadLevel": foreheadLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setEyeDistanceLevel(double? eyeDistanceLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setEyeDistanceLevel([\'eyeDistanceLevel\':$eyeDistanceLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setEyeDistanceLevel', {"eyeDistanceLevel": eyeDistanceLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setEyeAngleLevel(double? eyeAngleLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setEyeAngleLevel([\'eyeAngleLevel\':$eyeAngleLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setEyeAngleLevel', {"eyeAngleLevel": eyeAngleLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setMouthShapeLevel(double? mouthShapeLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setMouthShapeLevel([\'mouthShapeLevel\':$mouthShapeLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setMouthShapeLevel', {"mouthShapeLevel": mouthShapeLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setNoseWingLevel(double? noseWingLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setNoseWingLevel([\'noseWingLevel\':$noseWingLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setNoseWingLevel', {"noseWingLevel": noseWingLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setNosePositionLevel(double? nosePositionLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setNosePositionLevel([\'nosePositionLevel\':$nosePositionLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setNosePositionLevel', {"nosePositionLevel": nosePositionLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setLipsThicknessLevel(double? lipsThicknessLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setLipsThicknessLevel([\'lipsThicknessLevel\':$lipsThicknessLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setLipsThicknessLevel', {"lipsThicknessLevel": lipsThicknessLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> setFaceBeautyLevel(double? faceBeautyLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setFaceBeautyLevel([\'faceBeautyLevel\':$faceBeautyLevel])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFaceBeautyLevel', {"faceBeautyLevel": faceBeautyLevel, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setMotionTmpl_inDir(String? tmplName, String? tmplDir) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setMotionTmpl([\'tmplName\':$tmplName, \'tmplDir\':$tmplDir])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setMotionTmpl_inDir', {"tmplName": tmplName, "tmplDir": tmplDir, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<void> setMotionMute(bool? motionMute) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXBeautyManager@$refId::setMotionMute([\'motionMute\':$motionMute])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setMotionMute', {"motionMute": motionMute, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'TXBeautyManager{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension TXBeautyManager_Batch on List<TXBeautyManager?> {
  String? get refId {
    if (isEmpty) return null;
    return first?.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> setBeautyStyle_batch(List<TXBeautyStyle?> beautyStyle) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setBeautyStyle_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"beautyStyle": beautyStyle[__i__]?.toValue(), "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setBeautyLevel_batch(List<double?> beautyLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setBeautyLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"beautyLevel": beautyLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setWhitenessLevel_batch(List<double?> whitenessLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setWhitenessLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"whitenessLevel": whitenessLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> enableSharpnessEnhancement_batch(List<bool?> enable) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::enableSharpnessEnhancement_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"enable": enable[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setRuddyLevel_batch(List<double?> ruddyLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setRuddyLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"ruddyLevel": ruddyLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setFilter_batch(List<UIImage?> image) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFilter_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"image": image[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setFilterStrength_batch(List<double?> strength) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFilterStrength_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"strength": strength[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<int?>> setGreenScreenFile_batch(List<String?> path) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setGreenScreenFile_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"path": path[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setEyeScaleLevel_batch(List<double?> eyeScaleLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setEyeScaleLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"eyeScaleLevel": eyeScaleLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setFaceSlimLevel_batch(List<double?> faceSlimLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFaceSlimLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"faceSlimLevel": faceSlimLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setFaceVLevel_batch(List<double?> faceVLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFaceVLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"faceVLevel": faceVLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setChinLevel_batch(List<double?> chinLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setChinLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"chinLevel": chinLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setFaceShortLevel_batch(List<double?> faceShortLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFaceShortLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"faceShortLevel": faceShortLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setFaceNarrowLevel_batch(List<double?> faceNarrowLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFaceNarrowLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"faceNarrowLevel": faceNarrowLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setNoseSlimLevel_batch(List<double?> noseSlimLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setNoseSlimLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"noseSlimLevel": noseSlimLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setEyeLightenLevel_batch(List<double?> eyeLightenLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setEyeLightenLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"eyeLightenLevel": eyeLightenLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setToothWhitenLevel_batch(List<double?> toothWhitenLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setToothWhitenLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"toothWhitenLevel": toothWhitenLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setWrinkleRemoveLevel_batch(List<double?> wrinkleRemoveLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setWrinkleRemoveLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"wrinkleRemoveLevel": wrinkleRemoveLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setPounchRemoveLevel_batch(List<double?> pounchRemoveLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setPounchRemoveLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"pounchRemoveLevel": pounchRemoveLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setSmileLinesRemoveLevel_batch(List<double?> smileLinesRemoveLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setSmileLinesRemoveLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"smileLinesRemoveLevel": smileLinesRemoveLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setForeheadLevel_batch(List<double?> foreheadLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setForeheadLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"foreheadLevel": foreheadLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setEyeDistanceLevel_batch(List<double?> eyeDistanceLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setEyeDistanceLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"eyeDistanceLevel": eyeDistanceLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setEyeAngleLevel_batch(List<double?> eyeAngleLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setEyeAngleLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"eyeAngleLevel": eyeAngleLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setMouthShapeLevel_batch(List<double?> mouthShapeLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setMouthShapeLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"mouthShapeLevel": mouthShapeLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setNoseWingLevel_batch(List<double?> noseWingLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setNoseWingLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"noseWingLevel": noseWingLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setNosePositionLevel_batch(List<double?> nosePositionLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setNosePositionLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"nosePositionLevel": nosePositionLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setLipsThicknessLevel_batch(List<double?> lipsThicknessLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setLipsThicknessLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"lipsThicknessLevel": lipsThicknessLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> setFaceBeautyLevel_batch(List<double?> faceBeautyLevel) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setFaceBeautyLevel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"faceBeautyLevel": faceBeautyLevel[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<void>> setMotionTmpl_inDir_batch(List<String?> tmplName, List<String?> tmplDir) async {
    assert(tmplName.length == tmplDir.length);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setMotionTmpl_inDir_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"tmplName": tmplName[__i__], "tmplDir": tmplDir[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<void>> setMotionMute_batch(List<bool?> motionMute) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXBeautyManager::setMotionMute_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"motionMute": motionMute[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  //endregion
}