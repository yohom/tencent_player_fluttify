// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class _TXLiveBaseDelegate_SUB extends NSObject with TXLiveBaseDelegate {}

mixin TXLiveBaseDelegate on NSObject {
  

  static TXLiveBaseDelegate subInstance() => _TXLiveBaseDelegate_SUB();

  static Future<TXLiveBaseDelegate> anonymous__() async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXLiveBaseDelegate::createAnonymous__');
  
    final __object__ = TencentPlayerFluttifyIOSAs<TXLiveBaseDelegate>(__result__)!;
  
    // handle callback
    MethodChannel('TXLiveBaseDelegate::Callback@${__object__.refId}', kTencentPlayerFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'onLog_LogLevel_WhichModule':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onLog_LogLevel_WhichModule?.call([\'log\':${args['log']}, \'level\':${args['level']}, \'module\':${args['module']}])');
                }
            
                // handle the native call
                __object__.onLog_LogLevel_WhichModule?.call(args['log'], args['level'], args['module']);
                break;
              case 'onUpdateNetworkTime_message':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onUpdateNetworkTime_message?.call([\'errCode\':${args['errCode']}, \'errMsg\':${args['errMsg']}])');
                }
            
                // handle the native call
                __object__.onUpdateNetworkTime_message?.call(args['errCode'], args['errMsg']);
                break;
              case 'onLicenceLoaded_Reason':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: __object__.onLicenceLoaded_Reason?.call([\'result\':${args['result']}, \'reason\':${args['reason']}])');
                }
            
                // handle the native call
                __object__.onLicenceLoaded_Reason?.call(args['result'], args['reason']);
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e.toString());
            rethrow;
          }
        });
  
    return __object__;
  }
  

  @override
  final String tag__ = 'tencent_player_fluttify';

  

  

  Future<void> Function(String? log, int? level, String? module)? onLog_LogLevel_WhichModule;
  
  Future<void> Function(int? errCode, String? errMsg)? onUpdateNetworkTime_message;
  
  Future<void> Function(int? result, String? reason)? onLicenceLoaded_Reason;
  
}

