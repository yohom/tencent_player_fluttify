// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tencent_player_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class TXPlayerGlobalSetting extends NSObject  {
  //region constants
  static const String name__ = 'TXPlayerGlobalSetting';

  @override
  final String tag__ = 'tencent_player_fluttify';

  
  //endregion

  //region creators
  static Future<TXPlayerGlobalSetting?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod(
      'ObjectFactory::createTXPlayerGlobalSetting',
      {'init': init}
    );
    return TencentPlayerFluttifyIOSAs<TXPlayerGlobalSetting?>(__result__);
  }
  
  static Future<List<TXPlayerGlobalSetting>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kTencentPlayerFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchTXPlayerGlobalSetting',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => TencentPlayerFluttifyIOSAs<TXPlayerGlobalSetting>(it))
        .where((element) => element !=null)
        .cast<TXPlayerGlobalSetting>()
        .toList() ?? <TXPlayerGlobalSetting>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<void> setCacheFolderPath(String cacheFolder) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXPlayerGlobalSetting::setCacheFolderPath([\'cacheFolder\':$cacheFolder])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXPlayerGlobalSetting::setCacheFolderPath', {"cacheFolder": cacheFolder});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String?> cacheFolderPath() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXPlayerGlobalSetting::cacheFolderPath([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXPlayerGlobalSetting::cacheFolderPath', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setMaxCacheSize(int maxCacheSizeMB) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXPlayerGlobalSetting::setMaxCacheSize([\'maxCacheSizeMB\':$maxCacheSizeMB])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXPlayerGlobalSetting::setMaxCacheSize', {"maxCacheSizeMB": maxCacheSizeMB});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int?> maxCacheSize() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: TXPlayerGlobalSetting::maxCacheSize([])');
    }
  
    // invoke native method
    final __result__ = await kTencentPlayerFluttifyChannel.invokeMethod('TXPlayerGlobalSetting::maxCacheSize', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'TXPlayerGlobalSetting{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension TXPlayerGlobalSetting_Batch on List<TXPlayerGlobalSetting> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<void>> setCacheFolderPath_batch(List<String> cacheFolder) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXPlayerGlobalSetting::setCacheFolderPath_batch', [for (int __i__ = 0; __i__ < cacheFolder.length; __i__++) {"cacheFolder": cacheFolder[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<String?>> cacheFolderPath_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXPlayerGlobalSetting::cacheFolderPath_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  static Future<List<void>> setMaxCacheSize_batch(List<int> maxCacheSizeMB) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXPlayerGlobalSetting::setMaxCacheSize_batch', [for (int __i__ = 0; __i__ < maxCacheSizeMB.length; __i__++) {"maxCacheSizeMB": maxCacheSizeMB[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<int?>> maxCacheSize_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kTencentPlayerFluttifyChannel.invokeMethod('TXPlayerGlobalSetting::maxCacheSize_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  //endregion
}